# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-12-27 21:41


import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import freenasUI.freeadmin.models.fields
import freenasUI.system.models


def create_system(apps, schema_editor):
    apps.get_model('system', 'Advanced').objects.create()
    apps.get_model('system', 'Settings').objects.create()
    apps.get_model('system', 'Email').objects.create()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Advanced',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adv_consolemenu', models.BooleanField(default=False, verbose_name='Enable Console Menu')),
                ('adv_serialconsole', models.BooleanField(default=False, verbose_name='Use Serial Console')),
                ('adv_serialport', models.CharField(choices=[(b'0x3f8', b'0x3f8')], default=b'0x2f8', help_text='Set this to match your serial port address (0x3f8, 0x2f8, etc.)', max_length=120, verbose_name='Serial Port Address')),
                ('adv_serialspeed', models.CharField(choices=[(b'9600', '9600'), (b'19200', '19200'), (b'38400', '38400'), (b'57600', '57600'), (b'115200', '115200')], default=b'9600', help_text='Set this to match your serial port speed', max_length=120, verbose_name='Serial Port Speed')),
                ('adv_consolescreensaver', models.BooleanField(default=False, verbose_name='Enable screen saver')),
                ('adv_powerdaemon', models.BooleanField(default=False, verbose_name='Enable powerd (Power Saving Daemon)')),
                ('adv_swapondrive', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Swap size on each drive in GiB, affects new disks only. Setting this to 0 disables swap creation completely (STRONGLY DISCOURAGED).')),
                ('adv_consolemsg', models.BooleanField(default=True, verbose_name='Show console messages in the footer')),
                ('adv_traceback', models.BooleanField(default=True, verbose_name='Show tracebacks in case of fatal errors')),
                ('adv_advancedmode', models.BooleanField(default=False, help_text='By default only essential fields are shown. Fields considered advanced can be displayed through the Advanced Mode button.', verbose_name='Show advanced fields by default')),
                ('adv_autotune', models.BooleanField(default=False, help_text='Attempt to automatically tune the network and ZFS system control variables based on memory available.', verbose_name='Enable autotune')),
                ('adv_debugkernel', models.BooleanField(default=False, help_text='The kernel built with debug symbols will be booted instead.', verbose_name='Enable debug kernel')),
                ('adv_uploadcrash', models.BooleanField(default=True, verbose_name='Enable automatic upload of kernel crash dumps and daily telemetry')),
                ('adv_anonstats', models.BooleanField(default=True, editable=False, verbose_name='Enable report anonymous statistics')),
                ('adv_anonstats_token', models.TextField(blank=True, editable=False)),
                ('adv_motd', models.TextField(default=b'Welcome', max_length=1024, verbose_name='MOTD banner')),
                ('adv_boot_scrub', models.IntegerField(default=35, editable=False)),
                ('adv_periodic_notifyuser', freenasUI.freeadmin.models.fields.UserField(default=b'root', help_text='If you wish periodic emails to be sent to a different email address than the alert emails are set to (root) set an email address for a user and select that user in the dropdown.', max_length=120, verbose_name='Periodic Notification User')),
                ('adv_graphite', models.CharField(blank=True, default=b'', help_text='A hostname or IP here will be used as the destination to send collectd data to using the graphite plugin to collectd.', max_length=120, verbose_name='Remote Graphite Server Hostname')),
                ('adv_fqdn_syslog', models.BooleanField(default=False, verbose_name='Use FQDN for logging')),
            ],
            options={
                'verbose_name': 'Advanced',
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node', models.CharField(default=b'A', max_length=100)),
                ('message_id', models.CharField(max_length=100)),
                ('dismiss', models.BooleanField(default=True)),
                ('timestamp', models.IntegerField(default=freenasUI.system.models.time_now)),
            ],
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bak_finished', models.BooleanField(default=False, verbose_name='Finished')),
                ('bak_failed', models.BooleanField(default=False, verbose_name='Failed')),
                ('bak_acknowledged', models.BooleanField(default=False, verbose_name='Acknowledged')),
                ('bak_worker_pid', models.IntegerField(null=True, verbose_name='Backup worker PID')),
                ('bak_started_at', models.DateTimeField(verbose_name='Started at')),
                ('bak_finished_at', models.DateTimeField(null=True, verbose_name='Finished at')),
                ('bak_destination', models.CharField(blank=True, max_length=1024, verbose_name='Destination')),
                ('bak_status', models.CharField(blank=True, max_length=1024, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'System Backup',
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cert_type', models.IntegerField()),
                ('cert_name', models.CharField(help_text='Internal identifier of the certificate. Only alphanumeric, "_" and "-" are allowed.', max_length=120, unique=True, verbose_name='Identifier')),
                ('cert_certificate', models.TextField(blank=True, help_text='Cut and paste the contents of your certificate here', null=True, verbose_name='Certificate')),
                ('cert_privatekey', models.TextField(blank=True, help_text='Cut and paste the contents of your private key here', null=True, verbose_name='Private Key')),
                ('cert_CSR', models.TextField(blank=True, help_text='Cut and paste the contents of your CSR here', null=True, verbose_name='Signing Request')),
                ('cert_key_length', models.IntegerField(blank=True, default=2048, null=True, verbose_name='Key length')),
                ('cert_digest_algorithm', models.CharField(blank=True, default=b'SHA256', max_length=120, null=True, verbose_name='Digest Algorithm')),
                ('cert_lifetime', models.IntegerField(blank=True, default=3650, null=True, verbose_name='Lifetime')),
                ('cert_country', models.CharField(blank=True, help_text='Country Name (2 letter code)', max_length=120, null=True, verbose_name='Country')),
                ('cert_state', models.CharField(blank=True, help_text='State or Province Name (full name)', max_length=120, null=True, verbose_name='State')),
                ('cert_city', models.CharField(blank=True, help_text='Locality Name (eg, city)', max_length=120, null=True, verbose_name='Locality')),
                ('cert_organization', models.CharField(blank=True, help_text='Organization Name (eg, company)', max_length=120, null=True, verbose_name='Organization')),
                ('cert_email', models.CharField(blank=True, help_text='Email Address', max_length=120, null=True, verbose_name='Email Address')),
                ('cert_common', models.CharField(blank=True, help_text='Common Name (eg, FQDN of FreeNAS server or service)', max_length=120, null=True, verbose_name='Common Name')),
                ('cert_serial', models.IntegerField(blank=True, help_text='Serial for next certificate', null=True, verbose_name='Serial')),
                ('cert_chain', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Certificate',
                'verbose_name_plural': 'Certificates',
            },
        ),
        migrations.CreateModel(
            name='CertificateAuthority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cert_type', models.IntegerField()),
                ('cert_name', models.CharField(help_text='Internal identifier of the certificate. Only alphanumeric, "_" and "-" are allowed.', max_length=120, unique=True, verbose_name='Identifier')),
                ('cert_certificate', models.TextField(blank=True, help_text='Cut and paste the contents of your certificate here', null=True, verbose_name='Certificate')),
                ('cert_privatekey', models.TextField(blank=True, help_text='Cut and paste the contents of your private key here', null=True, verbose_name='Private Key')),
                ('cert_CSR', models.TextField(blank=True, help_text='Cut and paste the contents of your CSR here', null=True, verbose_name='Signing Request')),
                ('cert_key_length', models.IntegerField(blank=True, default=2048, null=True, verbose_name='Key length')),
                ('cert_digest_algorithm', models.CharField(blank=True, default=b'SHA256', max_length=120, null=True, verbose_name='Digest Algorithm')),
                ('cert_lifetime', models.IntegerField(blank=True, default=3650, null=True, verbose_name='Lifetime')),
                ('cert_country', models.CharField(blank=True, help_text='Country Name (2 letter code)', max_length=120, null=True, verbose_name='Country')),
                ('cert_state', models.CharField(blank=True, help_text='State or Province Name (full name)', max_length=120, null=True, verbose_name='State')),
                ('cert_city', models.CharField(blank=True, help_text='Locality Name (eg, city)', max_length=120, null=True, verbose_name='Locality')),
                ('cert_organization', models.CharField(blank=True, help_text='Organization Name (eg, company)', max_length=120, null=True, verbose_name='Organization')),
                ('cert_email', models.CharField(blank=True, help_text='Email Address', max_length=120, null=True, verbose_name='Email Address')),
                ('cert_common', models.CharField(blank=True, help_text='Common Name (eg, FQDN of FreeNAS server or service)', max_length=120, null=True, verbose_name='Common Name')),
                ('cert_serial', models.IntegerField(blank=True, help_text='Serial for next certificate', null=True, verbose_name='Serial')),
                ('cert_chain', models.BooleanField(default=False)),
                ('cert_signedby', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='system.CertificateAuthority', verbose_name='Signing Certificate Authority')),
            ],
            options={
                'verbose_name': 'CA',
                'verbose_name_plural': 'CAs',
            },
        ),
        migrations.CreateModel(
            name='CloudCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Account Name')),
                ('provider', models.CharField(choices=[(b'AMAZON', 'Amazon S3')], max_length=50, verbose_name='Provider')),
                ('attributes', freenasUI.freeadmin.models.fields.DictField(editable=False)),
            ],
            options={
                'verbose_name': 'Cloud Credential',
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('em_fromemail', models.CharField(default=b'', help_text='An email address that the system will use for the sending address for mail it sends, eg: freenas@example.com', max_length=120, verbose_name='From email')),
                ('em_outgoingserver', models.CharField(blank=True, help_text='A hostname or ip that will accept our mail, for instance mail.example.org, or 192.168.1.1', max_length=120, verbose_name='Outgoing mail server')),
                ('em_port', models.IntegerField(default=25, help_text='An integer from 1 - 65535, generally will be 25, 465, or 587', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Port to connect to')),
                ('em_security', models.CharField(choices=[(b'plain', 'Plain'), (b'ssl', 'SSL'), (b'tls', 'TLS')], default=b'plain', help_text='encryption of the connection', max_length=120, verbose_name='TLS/SSL')),
                ('em_smtp', models.BooleanField(default=False, verbose_name='Use SMTP Authentication')),
                ('em_user', models.CharField(blank=True, help_text='A username to authenticate to the remote server', max_length=120, null=True, verbose_name='Username')),
                ('em_pass', models.CharField(blank=True, help_text='A password to authenticate to the remote server', max_length=120, null=True, verbose_name='Password')),
            ],
            options={
                'verbose_name': 'Email',
            },
        ),
        migrations.CreateModel(
            name='NTPServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ntp_address', models.CharField(max_length=120, verbose_name='Address')),
                ('ntp_burst', models.BooleanField(default=False, help_text='When the server is reachable, send a burst of eight packets instead of the usual one. This is designed to improve timekeeping quality with the server command and s addresses.', verbose_name='Burst')),
                ('ntp_iburst', models.BooleanField(default=True, help_text='When the server is unreachable, send a burst of eight packets instead of the usual one. This is designed to speed the initial synchronization acquisition with the server command and s addresses.', verbose_name='IBurst')),
                ('ntp_prefer', models.BooleanField(default=False, help_text='Marks the server as preferred. All other things being equal, this host will be chosen for synchronization among a set of correctly operating hosts.', verbose_name='Prefer')),
                ('ntp_minpoll', models.IntegerField(default=6, help_text='The minimum poll interval for NTP messages, as a power of 2 in seconds. Defaults to 6 (64 s), but can be decreased to a lower limit of 4 (16 s)', validators=[django.core.validators.MinValueValidator(4)], verbose_name='Min. Poll')),
                ('ntp_maxpoll', models.IntegerField(default=10, help_text='The maximum poll interval for NTP messages, as a power of 2 in seconds. Defaults to 10 (1,024 s), but can be increased to an upper limit of 17 (36.4 h)', validators=[django.core.validators.MaxValueValidator(17)], verbose_name='Max. Poll')),
            ],
            options={
                'ordering': ['ntp_address'],
                'verbose_name': 'NTP Server',
                'verbose_name_plural': 'NTP Servers',
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stg_guiprotocol', models.CharField(choices=[(b'http', 'HTTP'), (b'https', 'HTTPS'), (b'httphttps', 'HTTP+HTTPS')], default=b'http', max_length=120, verbose_name='Protocol')),
                ('stg_guiaddress', models.CharField(blank=True, default=b'0.0.0.0', max_length=120, verbose_name='WebGUI IPv4 Address')),
                ('stg_guiv6address', models.CharField(blank=True, default=b'::', max_length=120, verbose_name='WebGUI IPv6 Address')),
                ('stg_guiport', models.IntegerField(default=80, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='WebGUI HTTP Port')),
                ('stg_guihttpsport', models.IntegerField(default=443, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='WebGUI HTTPS Port')),
                ('stg_guihttpsredirect', models.BooleanField(default=True, help_text='Redirect HTTP (port 80) to HTTPS when only the HTTPS protocol is enabled', verbose_name='WebGUI HTTP -> HTTPS Redirect')),
                ('stg_language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokm\xe5l'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default=b'en', max_length=120, verbose_name='Language')),
                ('stg_kbdmap', models.CharField(blank=True, choices=[(b'be.iso', b'Belgian ISO-8859-1'), (b'be.iso.acc', b'Belgian ISO-8859-1 (accent keys)'), (b'bg.bds.ctrlcaps', b'Bulgarian (BDS)'), (b'bg.phonetic.ctrlcaps', b'Bulgarian (Phonetic)'), (b'br275.iso', b'Brazilian 275 ISO-8859-1'), (b'br275.iso.acc', b'Brazilian 275 ISO-8859-1 (accent keys)'), (b'br275.cp850', b'Brazilian 275 Codepage 850'), (b'by.cp1131', b'Belarusian Codepage 1131'), (b'by.cp1251', b'Belarusian Codepage 1251'), (b'by.iso5', b'Belarusian ISO-8859-5'), (b'ce.iso2', b'Central European ISO-8859-2'), (b'colemak.iso15.acc', b'Colemak ergonomic alternative'), (b'cs.latin2.qwertz', b'Czech ISO-8859-2 (QWERTZ, accent keys)'), (b'cz.iso2', b'Czech ISO-8859-2'), (b'danish.iso', b'Danish ISO-8859-1'), (b'danish.iso.acc', b'Danish ISO-8859-1 (accent keys)'), (b'danish.cp865', b'Danish Codepage 865'), (b'danish.iso.macbook', b'Danish ISO-8859-1 (macbook)'), (b'dutch.iso.acc', b'Dutch ISO keymap (accent keys)'), (b'eee_nordic', b'Nordic layout on Asus eeePC'), (b'el.iso07', b'Greek ISO-8859-7 (104 keys)'), (b'estonian.iso', b'Estonian ISO-8859-1'), (b'estonian.iso15', b'Estonian ISO-8859-15'), (b'estonian.cp850', b'Estonian Codepage 850'), (b'finnish.iso', b'Finnish ISO-8859-1'), (b'finnish.cp850', b'Finnish Codepage 850'), (b'fr.iso', b'French ISO-8859-1'), (b'fr.iso.acc', b'French ISO-8859-1 (accent keys)'), (b'fr.macbook.acc', b'French Macbook/Macbook Pro ISO-8859-15 (accent keys)'), (b'fr.dvorak', b'French Dvorak-like'), (b'fr.dvorak.acc', b'French Dvorak-like (accent keys)'), (b'fr_CA.iso.acc', b'French Canadian ISO-8859-1 (accent keys)'), (b'german.iso', b'German ISO-8859-15'), (b'german.iso.acc', b'German ISO-8859-15 (accent keys)'), (b'german.cp850', b'German Codepage 850'), (b'gr.elot.acc', b'Greek ISO-8859-7 ELOT'), (b'gr.us101.acc', b'Greek ISO-8859-7 (101 keys)'), (b'iw.iso8', b'Hebrew ISO-8859-8'), (b'hr.iso', b'Croatian ISO-8859-2'), (b'hu.iso2.101keys', b'Hungarian 101 ISO-8859-2'), (b'hu.iso2.102keys', b'Hungarian 102 ISO-8859-2'), (b'hy.armscii-8', b'Armenian phonetic layout'), (b'icelandic.iso', b'Icelandic ISO-8859-1'), (b'icelandic.iso.acc', b'Icelandic ISO-8859-1 (accent keys)'), (b'it.iso', b'Italian ISO-8859-1'), (b'jp.106', b'Japanese 106'), (b'jp.106x', b'Japanese 106x'), (b'jp.pc98', b'Japanese PC-98x1'), (b'jp.pc98.iso', b'Japanese PC-98x1 (ISO)'), (b'kk.pt154.kst', b'Kazakh PT154 codepage'), (b'kk.pt154.io', b'Kazakh PT154 codepage (with IO)'), (b'latinamerican', b'Latin American'), (b'latinamerican.iso.acc', b'Latin American (accent keys)'), (b'lt.iso4', b'Lithuanian ISO-8859-4'), (b'norwegian.iso', b'Norwegian ISO-8859-1'), (b'norwegian.dvorak', b'Norwegian dvorak'), (b'pl_PL.ISO8859-2', b"Polish ISO-8859-2 (programmer's)"), (b'pl_PL.dvorak', b'Polish Dvorak'), (b'pt.iso', b'Portuguese ISO-8859-1'), (b'pt.iso.acc', b'Portuguese ISO-8859-1 (accent keys)'), (b'ru.cp866', b'Russian Codepage 866 (alternative)'), (b'ru.iso5', b'Russian ISO-8859-5'), (b'ru.koi8-r', b'Russian koi8-r'), (b'ru.koi8-r.shift', b'Russian koi8-r (shift)'), (b'ru.koi8-r.win', b'Russian koi8-r (winkeys)'), (b'spanish.dvorak', b'Spanish Dvorak'), (b'spanish.iso', b'Spanish ISO-8859-1'), (b'spanish.iso.acc', b'Spanish ISO-8859-1 (accent keys)'), (b'spanish.iso15.acc', b'Spanish ISO-8859-15 (accent keys)'), (b'si.iso', b'Slovenian ISO-8859-2'), (b'sk.iso2', b'Slovak ISO-8859-2'), (b'swedish.iso', b'Swedish ISO-8859-1'), (b'swedish.cp850', b'Swedish Codepage 850'), (b'swissfrench.iso', b'Swiss-French ISO-8859-1'), (b'swissfrench.iso.acc', b'Swiss-French ISO-8859-1 (accent keys)'), (b'swissfrench.cp850', b'Swiss-French Codepage 850'), (b'swissgerman.iso', b'Swiss-German ISO-8859-1'), (b'swissgerman.iso.acc', b'Swiss-German ISO-8859-1 (accent keys)'), (b'swissgerman.cp850', b'Swiss-German Codepage 850'), (b'swissgerman.macbook.acc', b'Swiss-German Macbook/Macbook Pro (accent keys)'), (b'tr.iso9.q', b'Turkish ISO-8859-9'), (b'uk.iso', b'United Kingdom ISO-8859-1'), (b'uk.iso-ctrl', b'United Kingdom ISO-8859-1 (Caps Lock acts as Left Ctrl)'), (b'uk.cp850', b'United Kingdom Codepage 850'), (b'uk.cp850-ctrl', b'United Kingdom Codepage 850 (Caps Lock acts as Left Ctrl)'), (b'uk.dvorak', b'United Kingdom Dvorak'), (b'us.iso', b'United States of America ISO-8859-1'), (b'us.iso.acc', b'United States of America ISO-8859-1 (accent keys)'), (b'us.dvorak', b'United States of America dvorak'), (b'us.dvorakr', b'United States of America righthand dvorak'), (b'us.dvorakl', b'United States of America lefthand dvorak'), (b'us.dvorakp', b'United States of America Programmer Dvorak'), (b'us.dvorakx', b'United States of America dvorakx'), (b'us.emacs', b'United States of America Emacs optimized layout'), (b'us.pc-ctrl', b'United States of America ISO-8859-1 (Caps Lock acts as Left Ctrl)'), (b'us.unix', b'United States of America Traditional Unix Workstation'), (b'ua.iso5', b'Ukrainian ISO-8859-5'), (b'ua.koi8-u', b'Ukrainian koi8-u'), (b'ua.koi8-u.shift.alt', b'Ukrainian koi8-u with koi8-r (shift)')], max_length=120, verbose_name='Console Keyboard Map')),
                ('stg_timezone', models.CharField(choices=[(b'Africa/Abidjan', b'Africa/Abidjan'), (b'Africa/Accra', b'Africa/Accra'), (b'Africa/Addis_Ababa', b'Africa/Addis_Ababa'), (b'Africa/Algiers', b'Africa/Algiers'), (b'Africa/Asmara', b'Africa/Asmara'), (b'Africa/Bamako', b'Africa/Bamako'), (b'Africa/Bangui', b'Africa/Bangui'), (b'Africa/Banjul', b'Africa/Banjul'), (b'Africa/Bissau', b'Africa/Bissau'), (b'Africa/Blantyre', b'Africa/Blantyre'), (b'Africa/Brazzaville', b'Africa/Brazzaville'), (b'Africa/Bujumbura', b'Africa/Bujumbura'), (b'Africa/Cairo', b'Africa/Cairo'), (b'Africa/Casablanca', b'Africa/Casablanca'), (b'Africa/Ceuta', b'Africa/Ceuta'), (b'Africa/Conakry', b'Africa/Conakry'), (b'Africa/Dakar', b'Africa/Dakar'), (b'Africa/Dar_es_Salaam', b'Africa/Dar_es_Salaam'), (b'Africa/Djibouti', b'Africa/Djibouti'), (b'Africa/Douala', b'Africa/Douala'), (b'Africa/El_Aaiun', b'Africa/El_Aaiun'), (b'Africa/Freetown', b'Africa/Freetown'), (b'Africa/Gaborone', b'Africa/Gaborone'), (b'Africa/Harare', b'Africa/Harare'), (b'Africa/Johannesburg', b'Africa/Johannesburg'), (b'Africa/Juba', b'Africa/Juba'), (b'Africa/Kampala', b'Africa/Kampala'), (b'Africa/Khartoum', b'Africa/Khartoum'), (b'Africa/Kigali', b'Africa/Kigali'), (b'Africa/Kinshasa', b'Africa/Kinshasa'), (b'Africa/Lagos', b'Africa/Lagos'), (b'Africa/Libreville', b'Africa/Libreville'), (b'Africa/Lome', b'Africa/Lome'), (b'Africa/Luanda', b'Africa/Luanda'), (b'Africa/Lubumbashi', b'Africa/Lubumbashi'), (b'Africa/Lusaka', b'Africa/Lusaka'), (b'Africa/Malabo', b'Africa/Malabo'), (b'Africa/Maputo', b'Africa/Maputo'), (b'Africa/Maseru', b'Africa/Maseru'), (b'Africa/Mbabane', b'Africa/Mbabane'), (b'Africa/Mogadishu', b'Africa/Mogadishu'), (b'Africa/Monrovia', b'Africa/Monrovia'), (b'Africa/Nairobi', b'Africa/Nairobi'), (b'Africa/Ndjamena', b'Africa/Ndjamena'), (b'Africa/Niamey', b'Africa/Niamey'), (b'Africa/Nouakchott', b'Africa/Nouakchott'), (b'Africa/Ouagadougou', b'Africa/Ouagadougou'), (b'Africa/Porto-Novo', b'Africa/Porto-Novo'), (b'Africa/Sao_Tome', b'Africa/Sao_Tome'), (b'Africa/Tripoli', b'Africa/Tripoli'), (b'Africa/Tunis', b'Africa/Tunis'), (b'Africa/Windhoek', b'Africa/Windhoek'), (b'America/Adak', b'America/Adak'), (b'America/Anchorage', b'America/Anchorage'), (b'America/Anguilla', b'America/Anguilla'), (b'America/Antigua', b'America/Antigua'), (b'America/Araguaina', b'America/Araguaina'), (b'America/Argentina/Buenos_Aires', b'America/Argentina/Buenos_Aires'), (b'America/Argentina/Catamarca', b'America/Argentina/Catamarca'), (b'America/Argentina/Cordoba', b'America/Argentina/Cordoba'), (b'America/Argentina/Jujuy', b'America/Argentina/Jujuy'), (b'America/Argentina/La_Rioja', b'America/Argentina/La_Rioja'), (b'America/Argentina/Mendoza', b'America/Argentina/Mendoza'), (b'America/Argentina/Rio_Gallegos', b'America/Argentina/Rio_Gallegos'), (b'America/Argentina/Salta', b'America/Argentina/Salta'), (b'America/Argentina/San_Juan', b'America/Argentina/San_Juan'), (b'America/Argentina/San_Luis', b'America/Argentina/San_Luis'), (b'America/Argentina/Tucuman', b'America/Argentina/Tucuman'), (b'America/Argentina/Ushuaia', b'America/Argentina/Ushuaia'), (b'America/Aruba', b'America/Aruba'), (b'America/Asuncion', b'America/Asuncion'), (b'America/Atikokan', b'America/Atikokan'), (b'America/Bahia', b'America/Bahia'), (b'America/Bahia_Banderas', b'America/Bahia_Banderas'), (b'America/Barbados', b'America/Barbados'), (b'America/Belem', b'America/Belem'), (b'America/Belize', b'America/Belize'), (b'America/Blanc-Sablon', b'America/Blanc-Sablon'), (b'America/Boa_Vista', b'America/Boa_Vista'), (b'America/Bogota', b'America/Bogota'), (b'America/Boise', b'America/Boise'), (b'America/Cambridge_Bay', b'America/Cambridge_Bay'), (b'America/Campo_Grande', b'America/Campo_Grande'), (b'America/Cancun', b'America/Cancun'), (b'America/Caracas', b'America/Caracas'), (b'America/Cayenne', b'America/Cayenne'), (b'America/Cayman', b'America/Cayman'), (b'America/Chicago', b'America/Chicago'), (b'America/Chihuahua', b'America/Chihuahua'), (b'America/Costa_Rica', b'America/Costa_Rica'), (b'America/Creston', b'America/Creston'), (b'America/Cuiaba', b'America/Cuiaba'), (b'America/Curacao', b'America/Curacao'), (b'America/Danmarkshavn', b'America/Danmarkshavn'), (b'America/Dawson', b'America/Dawson'), (b'America/Dawson_Creek', b'America/Dawson_Creek'), (b'America/Denver', b'America/Denver'), (b'America/Detroit', b'America/Detroit'), (b'America/Dominica', b'America/Dominica'), (b'America/Edmonton', b'America/Edmonton'), (b'America/Eirunepe', b'America/Eirunepe'), (b'America/El_Salvador', b'America/El_Salvador'), (b'America/Fort_Nelson', b'America/Fort_Nelson'), (b'America/Fortaleza', b'America/Fortaleza'), (b'America/Glace_Bay', b'America/Glace_Bay'), (b'America/Godthab', b'America/Godthab'), (b'America/Goose_Bay', b'America/Goose_Bay'), (b'America/Grand_Turk', b'America/Grand_Turk'), (b'America/Grenada', b'America/Grenada'), (b'America/Guadeloupe', b'America/Guadeloupe'), (b'America/Guatemala', b'America/Guatemala'), (b'America/Guayaquil', b'America/Guayaquil'), (b'America/Guyana', b'America/Guyana'), (b'America/Halifax', b'America/Halifax'), (b'America/Havana', b'America/Havana'), (b'America/Hermosillo', b'America/Hermosillo'), (b'America/Indiana/Indianapolis', b'America/Indiana/Indianapolis'), (b'America/Indiana/Knox', b'America/Indiana/Knox'), (b'America/Indiana/Marengo', b'America/Indiana/Marengo'), (b'America/Indiana/Petersburg', b'America/Indiana/Petersburg'), (b'America/Indiana/Tell_City', b'America/Indiana/Tell_City'), (b'America/Indiana/Vevay', b'America/Indiana/Vevay'), (b'America/Indiana/Vincennes', b'America/Indiana/Vincennes'), (b'America/Indiana/Winamac', b'America/Indiana/Winamac'), (b'America/Inuvik', b'America/Inuvik'), (b'America/Iqaluit', b'America/Iqaluit'), (b'America/Jamaica', b'America/Jamaica'), (b'America/Juneau', b'America/Juneau'), (b'America/Kentucky/Louisville', b'America/Kentucky/Louisville'), (b'America/Kentucky/Monticello', b'America/Kentucky/Monticello'), (b'America/Kralendijk', b'America/Kralendijk'), (b'America/La_Paz', b'America/La_Paz'), (b'America/Lima', b'America/Lima'), (b'America/Los_Angeles', b'America/Los_Angeles'), (b'America/Lower_Princes', b'America/Lower_Princes'), (b'America/Maceio', b'America/Maceio'), (b'America/Managua', b'America/Managua'), (b'America/Manaus', b'America/Manaus'), (b'America/Marigot', b'America/Marigot'), (b'America/Martinique', b'America/Martinique'), (b'America/Matamoros', b'America/Matamoros'), (b'America/Mazatlan', b'America/Mazatlan'), (b'America/Menominee', b'America/Menominee'), (b'America/Merida', b'America/Merida'), (b'America/Metlakatla', b'America/Metlakatla'), (b'America/Mexico_City', b'America/Mexico_City'), (b'America/Miquelon', b'America/Miquelon'), (b'America/Moncton', b'America/Moncton'), (b'America/Monterrey', b'America/Monterrey'), (b'America/Montevideo', b'America/Montevideo'), (b'America/Montserrat', b'America/Montserrat'), (b'America/Nassau', b'America/Nassau'), (b'America/New_York', b'America/New_York'), (b'America/Nipigon', b'America/Nipigon'), (b'America/Nome', b'America/Nome'), (b'America/Noronha', b'America/Noronha'), (b'America/North_Dakota/Beulah', b'America/North_Dakota/Beulah'), (b'America/North_Dakota/Center', b'America/North_Dakota/Center'), (b'America/North_Dakota/New_Salem', b'America/North_Dakota/New_Salem'), (b'America/Ojinaga', b'America/Ojinaga'), (b'America/Panama', b'America/Panama'), (b'America/Pangnirtung', b'America/Pangnirtung'), (b'America/Paramaribo', b'America/Paramaribo'), (b'America/Phoenix', b'America/Phoenix'), (b'America/Port-au-Prince', b'America/Port-au-Prince'), (b'America/Port_of_Spain', b'America/Port_of_Spain'), (b'America/Porto_Velho', b'America/Porto_Velho'), (b'America/Puerto_Rico', b'America/Puerto_Rico'), (b'America/Rainy_River', b'America/Rainy_River'), (b'America/Rankin_Inlet', b'America/Rankin_Inlet'), (b'America/Recife', b'America/Recife'), (b'America/Regina', b'America/Regina'), (b'America/Resolute', b'America/Resolute'), (b'America/Rio_Branco', b'America/Rio_Branco'), (b'America/Santarem', b'America/Santarem'), (b'America/Santiago', b'America/Santiago'), (b'America/Santo_Domingo', b'America/Santo_Domingo'), (b'America/Sao_Paulo', b'America/Sao_Paulo'), (b'America/Scoresbysund', b'America/Scoresbysund'), (b'America/Sitka', b'America/Sitka'), (b'America/St_Barthelemy', b'America/St_Barthelemy'), (b'America/St_Johns', b'America/St_Johns'), (b'America/St_Kitts', b'America/St_Kitts'), (b'America/St_Lucia', b'America/St_Lucia'), (b'America/St_Thomas', b'America/St_Thomas'), (b'America/St_Vincent', b'America/St_Vincent'), (b'America/Swift_Current', b'America/Swift_Current'), (b'America/Tegucigalpa', b'America/Tegucigalpa'), (b'America/Thule', b'America/Thule'), (b'America/Thunder_Bay', b'America/Thunder_Bay'), (b'America/Tijuana', b'America/Tijuana'), (b'America/Toronto', b'America/Toronto'), (b'America/Tortola', b'America/Tortola'), (b'America/Vancouver', b'America/Vancouver'), (b'America/Whitehorse', b'America/Whitehorse'), (b'America/Winnipeg', b'America/Winnipeg'), (b'America/Yakutat', b'America/Yakutat'), (b'America/Yellowknife', b'America/Yellowknife'), (b'Antarctica/Casey', b'Antarctica/Casey'), (b'Antarctica/Davis', b'Antarctica/Davis'), (b'Antarctica/DumontDUrville', b'Antarctica/DumontDUrville'), (b'Antarctica/Macquarie', b'Antarctica/Macquarie'), (b'Antarctica/Mawson', b'Antarctica/Mawson'), (b'Antarctica/McMurdo', b'Antarctica/McMurdo'), (b'Antarctica/Palmer', b'Antarctica/Palmer'), (b'Antarctica/Rothera', b'Antarctica/Rothera'), (b'Antarctica/Syowa', b'Antarctica/Syowa'), (b'Antarctica/Troll', b'Antarctica/Troll'), (b'Antarctica/Vostok', b'Antarctica/Vostok'), (b'Arctic/Longyearbyen', b'Arctic/Longyearbyen'), (b'Asia/Aden', b'Asia/Aden'), (b'Asia/Almaty', b'Asia/Almaty'), (b'Asia/Amman', b'Asia/Amman'), (b'Asia/Anadyr', b'Asia/Anadyr'), (b'Asia/Aqtau', b'Asia/Aqtau'), (b'Asia/Aqtobe', b'Asia/Aqtobe'), (b'Asia/Ashgabat', b'Asia/Ashgabat'), (b'Asia/Atyrau', b'Asia/Atyrau'), (b'Asia/Baghdad', b'Asia/Baghdad'), (b'Asia/Bahrain', b'Asia/Bahrain'), (b'Asia/Baku', b'Asia/Baku'), (b'Asia/Bangkok', b'Asia/Bangkok'), (b'Asia/Barnaul', b'Asia/Barnaul'), (b'Asia/Beirut', b'Asia/Beirut'), (b'Asia/Bishkek', b'Asia/Bishkek'), (b'Asia/Brunei', b'Asia/Brunei'), (b'Asia/Chita', b'Asia/Chita'), (b'Asia/Choibalsan', b'Asia/Choibalsan'), (b'Asia/Colombo', b'Asia/Colombo'), (b'Asia/Damascus', b'Asia/Damascus'), (b'Asia/Dhaka', b'Asia/Dhaka'), (b'Asia/Dili', b'Asia/Dili'), (b'Asia/Dubai', b'Asia/Dubai'), (b'Asia/Dushanbe', b'Asia/Dushanbe'), (b'Asia/Famagusta', b'Asia/Famagusta'), (b'Asia/Gaza', b'Asia/Gaza'), (b'Asia/Hebron', b'Asia/Hebron'), (b'Asia/Ho_Chi_Minh', b'Asia/Ho_Chi_Minh'), (b'Asia/Hong_Kong', b'Asia/Hong_Kong'), (b'Asia/Hovd', b'Asia/Hovd'), (b'Asia/Irkutsk', b'Asia/Irkutsk'), (b'Asia/Istanbul', b'Asia/Istanbul'), (b'Asia/Jakarta', b'Asia/Jakarta'), (b'Asia/Jayapura', b'Asia/Jayapura'), (b'Asia/Jerusalem', b'Asia/Jerusalem'), (b'Asia/Kabul', b'Asia/Kabul'), (b'Asia/Kamchatka', b'Asia/Kamchatka'), (b'Asia/Karachi', b'Asia/Karachi'), (b'Asia/Kathmandu', b'Asia/Kathmandu'), (b'Asia/Khandyga', b'Asia/Khandyga'), (b'Asia/Kolkata', b'Asia/Kolkata'), (b'Asia/Krasnoyarsk', b'Asia/Krasnoyarsk'), (b'Asia/Kuala_Lumpur', b'Asia/Kuala_Lumpur'), (b'Asia/Kuching', b'Asia/Kuching'), (b'Asia/Kuwait', b'Asia/Kuwait'), (b'Asia/Macau', b'Asia/Macau'), (b'Asia/Magadan', b'Asia/Magadan'), (b'Asia/Makassar', b'Asia/Makassar'), (b'Asia/Manila', b'Asia/Manila'), (b'Asia/Muscat', b'Asia/Muscat'), (b'Asia/Nicosia', b'Asia/Nicosia'), (b'Asia/Novokuznetsk', b'Asia/Novokuznetsk'), (b'Asia/Novosibirsk', b'Asia/Novosibirsk'), (b'Asia/Omsk', b'Asia/Omsk'), (b'Asia/Oral', b'Asia/Oral'), (b'Asia/Phnom_Penh', b'Asia/Phnom_Penh'), (b'Asia/Pontianak', b'Asia/Pontianak'), (b'Asia/Pyongyang', b'Asia/Pyongyang'), (b'Asia/Qatar', b'Asia/Qatar'), (b'Asia/Qyzylorda', b'Asia/Qyzylorda'), (b'Asia/Riyadh', b'Asia/Riyadh'), (b'Asia/Sakhalin', b'Asia/Sakhalin'), (b'Asia/Samarkand', b'Asia/Samarkand'), (b'Asia/Seoul', b'Asia/Seoul'), (b'Asia/Shanghai', b'Asia/Shanghai'), (b'Asia/Singapore', b'Asia/Singapore'), (b'Asia/Srednekolymsk', b'Asia/Srednekolymsk'), (b'Asia/Taipei', b'Asia/Taipei'), (b'Asia/Tashkent', b'Asia/Tashkent'), (b'Asia/Tbilisi', b'Asia/Tbilisi'), (b'Asia/Tehran', b'Asia/Tehran'), (b'Asia/Thimphu', b'Asia/Thimphu'), (b'Asia/Tokyo', b'Asia/Tokyo'), (b'Asia/Tomsk', b'Asia/Tomsk'), (b'Asia/Ulaanbaatar', b'Asia/Ulaanbaatar'), (b'Asia/Urumqi', b'Asia/Urumqi'), (b'Asia/Ust-Nera', b'Asia/Ust-Nera'), (b'Asia/Vientiane', b'Asia/Vientiane'), (b'Asia/Vladivostok', b'Asia/Vladivostok'), (b'Asia/Yakutsk', b'Asia/Yakutsk'), (b'Asia/Yangon', b'Asia/Yangon'), (b'Asia/Yekaterinburg', b'Asia/Yekaterinburg'), (b'Asia/Yerevan', b'Asia/Yerevan'), (b'Atlantic/Azores', b'Atlantic/Azores'), (b'Atlantic/Bermuda', b'Atlantic/Bermuda'), (b'Atlantic/Canary', b'Atlantic/Canary'), (b'Atlantic/Cape_Verde', b'Atlantic/Cape_Verde'), (b'Atlantic/Faroe', b'Atlantic/Faroe'), (b'Atlantic/Madeira', b'Atlantic/Madeira'), (b'Atlantic/Reykjavik', b'Atlantic/Reykjavik'), (b'Atlantic/South_Georgia', b'Atlantic/South_Georgia'), (b'Atlantic/St_Helena', b'Atlantic/St_Helena'), (b'Atlantic/Stanley', b'Atlantic/Stanley'), (b'Australia/Adelaide', b'Australia/Adelaide'), (b'Australia/Brisbane', b'Australia/Brisbane'), (b'Australia/Broken_Hill', b'Australia/Broken_Hill'), (b'Australia/Currie', b'Australia/Currie'), (b'Australia/Darwin', b'Australia/Darwin'), (b'Australia/Eucla', b'Australia/Eucla'), (b'Australia/Hobart', b'Australia/Hobart'), (b'Australia/Lindeman', b'Australia/Lindeman'), (b'Australia/Lord_Howe', b'Australia/Lord_Howe'), (b'Australia/Melbourne', b'Australia/Melbourne'), (b'Australia/Perth', b'Australia/Perth'), (b'Australia/Sydney', b'Australia/Sydney'), (b'CET', b'CET'), (b'CST6CDT', b'CST6CDT'), (b'EET', b'EET'), (b'EST', b'EST'), (b'EST5EDT', b'EST5EDT'), (b'Etc/Greenwich', b'Etc/Greenwich'), (b'Etc/UCT', b'Etc/UCT'), (b'Etc/UTC', b'Etc/UTC'), (b'Etc/Universal', b'Etc/Universal'), (b'Etc/Zulu', b'Etc/Zulu'), (b'Europe/Amsterdam', b'Europe/Amsterdam'), (b'Europe/Andorra', b'Europe/Andorra'), (b'Europe/Astrakhan', b'Europe/Astrakhan'), (b'Europe/Athens', b'Europe/Athens'), (b'Europe/Belgrade', b'Europe/Belgrade'), (b'Europe/Berlin', b'Europe/Berlin'), (b'Europe/Bratislava', b'Europe/Bratislava'), (b'Europe/Brussels', b'Europe/Brussels'), (b'Europe/Bucharest', b'Europe/Bucharest'), (b'Europe/Budapest', b'Europe/Budapest'), (b'Europe/Busingen', b'Europe/Busingen'), (b'Europe/Chisinau', b'Europe/Chisinau'), (b'Europe/Copenhagen', b'Europe/Copenhagen'), (b'Europe/Dublin', b'Europe/Dublin'), (b'Europe/Gibraltar', b'Europe/Gibraltar'), (b'Europe/Guernsey', b'Europe/Guernsey'), (b'Europe/Helsinki', b'Europe/Helsinki'), (b'Europe/Isle_of_Man', b'Europe/Isle_of_Man'), (b'Europe/Istanbul', b'Europe/Istanbul'), (b'Europe/Jersey', b'Europe/Jersey'), (b'Europe/Kaliningrad', b'Europe/Kaliningrad'), (b'Europe/Kiev', b'Europe/Kiev'), (b'Europe/Kirov', b'Europe/Kirov'), (b'Europe/Lisbon', b'Europe/Lisbon'), (b'Europe/Ljubljana', b'Europe/Ljubljana'), (b'Europe/London', b'Europe/London'), (b'Europe/Luxembourg', b'Europe/Luxembourg'), (b'Europe/Madrid', b'Europe/Madrid'), (b'Europe/Malta', b'Europe/Malta'), (b'Europe/Mariehamn', b'Europe/Mariehamn'), (b'Europe/Minsk', b'Europe/Minsk'), (b'Europe/Monaco', b'Europe/Monaco'), (b'Europe/Moscow', b'Europe/Moscow'), (b'Europe/Nicosia', b'Europe/Nicosia'), (b'Europe/Oslo', b'Europe/Oslo'), (b'Europe/Paris', b'Europe/Paris'), (b'Europe/Podgorica', b'Europe/Podgorica'), (b'Europe/Prague', b'Europe/Prague'), (b'Europe/Riga', b'Europe/Riga'), (b'Europe/Rome', b'Europe/Rome'), (b'Europe/Samara', b'Europe/Samara'), (b'Europe/San_Marino', b'Europe/San_Marino'), (b'Europe/Sarajevo', b'Europe/Sarajevo'), (b'Europe/Saratov', b'Europe/Saratov'), (b'Europe/Simferopol', b'Europe/Simferopol'), (b'Europe/Skopje', b'Europe/Skopje'), (b'Europe/Sofia', b'Europe/Sofia'), (b'Europe/Stockholm', b'Europe/Stockholm'), (b'Europe/Tallinn', b'Europe/Tallinn'), (b'Europe/Tirane', b'Europe/Tirane'), (b'Europe/Ulyanovsk', b'Europe/Ulyanovsk'), (b'Europe/Uzhgorod', b'Europe/Uzhgorod'), (b'Europe/Vaduz', b'Europe/Vaduz'), (b'Europe/Vatican', b'Europe/Vatican'), (b'Europe/Vienna', b'Europe/Vienna'), (b'Europe/Vilnius', b'Europe/Vilnius'), (b'Europe/Volgograd', b'Europe/Volgograd'), (b'Europe/Warsaw', b'Europe/Warsaw'), (b'Europe/Zagreb', b'Europe/Zagreb'), (b'Europe/Zaporozhye', b'Europe/Zaporozhye'), (b'Europe/Zurich', b'Europe/Zurich'), (b'Factory', b'Factory'), (b'HST', b'HST'), (b'Indian/Antananarivo', b'Indian/Antananarivo'), (b'Indian/Chagos', b'Indian/Chagos'), (b'Indian/Christmas', b'Indian/Christmas'), (b'Indian/Cocos', b'Indian/Cocos'), (b'Indian/Comoro', b'Indian/Comoro'), (b'Indian/Kerguelen', b'Indian/Kerguelen'), (b'Indian/Mahe', b'Indian/Mahe'), (b'Indian/Maldives', b'Indian/Maldives'), (b'Indian/Mauritius', b'Indian/Mauritius'), (b'Indian/Mayotte', b'Indian/Mayotte'), (b'Indian/Reunion', b'Indian/Reunion'), (b'MET', b'MET'), (b'MST', b'MST'), (b'MST7MDT', b'MST7MDT'), (b'PST8PDT', b'PST8PDT'), (b'Pacific/Apia', b'Pacific/Apia'), (b'Pacific/Auckland', b'Pacific/Auckland'), (b'Pacific/Bougainville', b'Pacific/Bougainville'), (b'Pacific/Chatham', b'Pacific/Chatham'), (b'Pacific/Chuuk', b'Pacific/Chuuk'), (b'Pacific/Easter', b'Pacific/Easter'), (b'Pacific/Efate', b'Pacific/Efate'), (b'Pacific/Enderbury', b'Pacific/Enderbury'), (b'Pacific/Fakaofo', b'Pacific/Fakaofo'), (b'Pacific/Fiji', b'Pacific/Fiji'), (b'Pacific/Funafuti', b'Pacific/Funafuti'), (b'Pacific/Galapagos', b'Pacific/Galapagos'), (b'Pacific/Gambier', b'Pacific/Gambier'), (b'Pacific/Guadalcanal', b'Pacific/Guadalcanal'), (b'Pacific/Guam', b'Pacific/Guam'), (b'Pacific/Honolulu', b'Pacific/Honolulu'), (b'Pacific/Johnston', b'Pacific/Johnston'), (b'Pacific/Kiritimati', b'Pacific/Kiritimati'), (b'Pacific/Kosrae', b'Pacific/Kosrae'), (b'Pacific/Kwajalein', b'Pacific/Kwajalein'), (b'Pacific/Majuro', b'Pacific/Majuro'), (b'Pacific/Marquesas', b'Pacific/Marquesas'), (b'Pacific/Midway', b'Pacific/Midway'), (b'Pacific/Nauru', b'Pacific/Nauru'), (b'Pacific/Niue', b'Pacific/Niue'), (b'Pacific/Norfolk', b'Pacific/Norfolk'), (b'Pacific/Noumea', b'Pacific/Noumea'), (b'Pacific/Pago_Pago', b'Pacific/Pago_Pago'), (b'Pacific/Palau', b'Pacific/Palau'), (b'Pacific/Pitcairn', b'Pacific/Pitcairn'), (b'Pacific/Pohnpei', b'Pacific/Pohnpei'), (b'Pacific/Port_Moresby', b'Pacific/Port_Moresby'), (b'Pacific/Rarotonga', b'Pacific/Rarotonga'), (b'Pacific/Saipan', b'Pacific/Saipan'), (b'Pacific/Tahiti', b'Pacific/Tahiti'), (b'Pacific/Tarawa', b'Pacific/Tarawa'), (b'Pacific/Tongatapu', b'Pacific/Tongatapu'), (b'Pacific/Wake', b'Pacific/Wake'), (b'Pacific/Wallis', b'Pacific/Wallis'), (b'UTC', b'UTC'), (b'WET', b'WET'), (b'posixrules', b'posixrules')], default=b'America/Los_Angeles', max_length=120, verbose_name='Timezone')),
                ('stg_sysloglevel', models.CharField(choices=[(b'f_emerg', 'Emergency'), (b'f_alert', 'Alert'), (b'f_crit', 'Critical'), (b'f_err', 'Error'), (b'f_warning', 'Warning'), (b'f_notice', 'Notice'), (b'f_info', 'Info'), (b'f_debug', 'Debug'), (b'f_is_debug', 'Is_Debug')], default=b'f_info', help_text='Specifies which messages will be logged by server. INFO and VERBOSE log transactions that server performs on behalf of the client. f_is_debug specify higher levels of debugging output. The default is f_info.', max_length=120, verbose_name='Syslog level')),
                ('stg_syslogserver', models.CharField(blank=True, default=b'', help_text='Specifies the server and port syslog messages will be sent to.  The accepted format is hostname:port or ip:port, if :port is not specified it will default to port 514 (this field currently only takes IPv4 addresses)', max_length=120, verbose_name='Syslog server')),
                ('stg_wizardshown', models.BooleanField(default=False, editable=False)),
                ('stg_pwenc_check', models.CharField(editable=False, max_length=100)),
                ('stg_guicertificate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='system.Certificate', verbose_name='Certificate')),
            ],
            options={
                'verbose_name': 'General',
            },
        ),
        migrations.CreateModel(
            name='SystemDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sys_pool', models.CharField(blank=True, max_length=1024, verbose_name='Pool')),
                ('sys_syslog_usedataset', models.BooleanField(default=False, verbose_name='Syslog')),
                ('sys_rrd_usedataset', models.BooleanField(default=False, help_text='Save the Round-Robin Database (RRD) used by system statistics collection daemon into the system dataset', verbose_name='Reporting Database')),
                ('sys_uuid', models.CharField(editable=False, max_length=32)),
                ('sys_uuid_b', models.CharField(blank=True, editable=False, max_length=32, null=True)),
            ],
            options={
                'verbose_name': 'System Dataset',
            },
        ),
        migrations.CreateModel(
            name='Tunable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tun_var', models.CharField(max_length=50, unique=True, verbose_name='Variable')),
                ('tun_value', models.CharField(max_length=512, verbose_name='Value')),
                ('tun_type', models.CharField(choices=[(b'loader', 'Loader'), (b'rc', 'rc.conf'), (b'sysctl', 'Sysctl')], default=b'loader', max_length=20, verbose_name='Type')),
                ('tun_comment', models.CharField(blank=True, max_length=100, verbose_name='Comment')),
                ('tun_enabled', models.BooleanField(default=True, verbose_name='Enabled')),
            ],
            options={
                'ordering': ['tun_var'],
                'verbose_name': 'Tunable',
                'verbose_name_plural': 'Tunables',
            },
        ),
        migrations.CreateModel(
            name='Update',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upd_autocheck', models.BooleanField(default=True, verbose_name='Check Automatically For Updates')),
                ('upd_train', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'verbose_name': 'Update',
            },
        ),
        migrations.AddField(
            model_name='certificate',
            name='cert_signedby',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='system.CertificateAuthority', verbose_name='Signing Certificate Authority'),
        ),
        migrations.AlterUniqueTogether(
            name='alert',
            unique_together=set([('node', 'message_id')]),
        ),
        migrations.RunPython(create_system),
    ]
