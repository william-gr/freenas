# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-12-27 21:41


import datetime
from django.db import migrations, models
import django.db.models.deletion
import freenasUI.freeadmin.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Disk',
            fields=[
                ('disk_identifier', models.CharField(editable=False, max_length=42, primary_key=True, serialize=False, verbose_name='Identifier')),
                ('disk_name', models.CharField(max_length=120, verbose_name='Name')),
                ('disk_subsystem', models.CharField(default=b'', editable=False, max_length=10)),
                ('disk_number', models.IntegerField(default=1, editable=False)),
                ('disk_serial', models.CharField(blank=True, max_length=30, verbose_name='Serial')),
                ('disk_size', models.CharField(blank=True, editable=False, max_length=20, verbose_name='Disk Size')),
                ('disk_multipath_name', models.CharField(blank=True, editable=False, max_length=30, verbose_name='Multipath name')),
                ('disk_multipath_member', models.CharField(blank=True, editable=False, max_length=30, verbose_name='Multipath member')),
                ('disk_description', models.CharField(blank=True, max_length=120, verbose_name='Description')),
                ('disk_transfermode', models.CharField(choices=[(b'Auto', 'Auto'), (b'PIO0', 'PIO0'), (b'PIO1', 'PIO1'), (b'PIO2', 'PIO2'), (b'PIO3', 'PIO3'), (b'PIO4', 'PIO4'), (b'WDMA0', 'WDMA0'), (b'WDMA1', 'WDMA1'), (b'WDMA2', 'WDMA2'), (b'UDMA16', 'UDMA-16'), (b'UDMA33', 'UDMA-33'), (b'UDMA66', 'UDMA-66'), (b'UDMA100', 'UDMA-100'), (b'UDMA133', 'UDMA-133'), (b'SATA150', 'SATA 1.5Gbit/s'), (b'SATA300', 'SATA 3.0Gbit/s')], default=b'Auto', max_length=120, verbose_name='Transfer Mode')),
                ('disk_hddstandby', models.CharField(choices=[(b'Always On', 'Always On'), (b'5', b'5'), (b'10', b'10'), (b'20', b'20'), (b'30', b'30'), (b'60', b'60'), (b'120', b'120'), (b'180', b'180'), (b'240', b'240'), (b'300', b'300'), (b'330', b'330')], default=b'Always On', max_length=120, verbose_name='HDD Standby')),
                ('disk_advpowermgmt', models.CharField(choices=[(b'Disabled', 'Disabled'), (b'1', 'Level 1 - Minimum power usage with Standby (spindown)'), (b'64', 'Level 64 - Intermediate power usage with Standby'), (b'127', 'Level 127 - Intermediate power usage with Standby'), (b'128', 'Level 128 - Minimum power usage without Standby (no spindown)'), (b'192', 'Level 192 - Intermediate power usage without Standby'), (b'254', 'Level 254 - Maximum performance, maximum power usage')], default=b'Disabled', max_length=120, verbose_name='Advanced Power Management')),
                ('disk_acousticlevel', models.CharField(choices=[(b'Disabled', 'Disabled'), (b'Minimum', 'Minimum'), (b'Medium', 'Medium'), (b'Maximum', 'Maximum')], default=b'Disabled', max_length=120, verbose_name='Acoustic Level')),
                ('disk_togglesmart', models.BooleanField(default=True, verbose_name='Enable S.M.A.R.T.')),
                ('disk_smartoptions', models.CharField(blank=True, max_length=120, verbose_name='S.M.A.R.T. extra options')),
                ('disk_enabled', models.BooleanField(default=True, editable=False)),
            ],
            options={
                'ordering': ['disk_subsystem', 'disk_number'],
                'verbose_name': 'Disk',
                'verbose_name_plural': 'Disks',
            },
        ),
        migrations.CreateModel(
            name='EncryptedDisk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encrypted_provider', models.CharField(max_length=120, unique=True, verbose_name='Underlying provider')),
                ('encrypted_disk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='storage.Disk')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Replication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repl_filesystem', models.CharField(blank=True, max_length=150, verbose_name='Volume/Dataset')),
                ('repl_lastsnapshot', models.CharField(blank=True, editable=False, max_length=120, verbose_name='Last snapshot sent to remote side')),
                ('repl_zfs', models.CharField(help_text='This should be the name of the ZFS filesystem on remote side. eg: Volumename/Datasetname not the mountpoint or filesystem path', max_length=120, verbose_name='Remote ZFS Volume/Dataset')),
                ('repl_userepl', models.BooleanField(default=False, verbose_name="Recursively replicate child dataset's snapshots")),
                ('repl_followdelete', models.BooleanField(default=False, verbose_name='Delete stale snapshots on remote system')),
                ('repl_compression', models.CharField(choices=[(b'off', 'Off'), (b'lz4', 'lz4 (fastest)'), (b'pigz', 'pigz (all rounder)'), (b'plzip', 'plzip (best compression)')], default=b'lz4', max_length=5, verbose_name='Replication Stream Compression')),
                ('repl_limit', models.IntegerField(default=0, help_text='Limit the replication speed. Unit in kilobytes/seconds. 0 = unlimited.', verbose_name='Limit (kB/s)')),
                ('repl_begin', models.TimeField(default=datetime.time(0, 0), help_text='Do not start replication before', verbose_name='Begin')),
                ('repl_end', models.TimeField(default=datetime.time(23, 59), help_text='Do not start replication after', verbose_name='End')),
                ('repl_enabled', models.BooleanField(default=True, help_text='Disabling will not stop any replications which are in progress.', verbose_name='Enabled')),
            ],
            options={
                'ordering': ['repl_filesystem'],
                'verbose_name': 'Replication Task',
                'verbose_name_plural': 'Replication Tasks',
            },
        ),
        migrations.CreateModel(
            name='ReplRemote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ssh_remote_hostname', models.CharField(max_length=120, verbose_name='Remote hostname')),
                ('ssh_remote_port', models.IntegerField(default=22, verbose_name='Remote port')),
                ('ssh_remote_dedicateduser_enabled', models.BooleanField(default=False, verbose_name='Remote Dedicated User Enabled')),
                ('ssh_remote_dedicateduser', freenasUI.freeadmin.models.fields.UserField(blank=True, default=b'', max_length=120, null=True, verbose_name='Remote Dedicated User')),
                ('ssh_remote_hostkey', models.CharField(max_length=2048, verbose_name='Remote hostkey')),
                ('ssh_cipher', models.CharField(choices=[(b'standard', 'Standard'), (b'fast', 'Fast'), (b'disabled', 'Disabled')], default=b'standard', max_length=20, verbose_name='Encryption Cipher')),
            ],
            options={
                'verbose_name': 'Remote Replication Host',
                'verbose_name_plural': 'Remote Replication Hosts',
            },
        ),
        migrations.CreateModel(
            name='Scrub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scrub_threshold', models.PositiveSmallIntegerField(default=35, help_text='Determine how many days shall be between scrubs', verbose_name='Threshold days')),
                ('scrub_description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('scrub_minute', models.CharField(default=b'00', help_text='Values 0-59 allowed.', max_length=100, verbose_name='Minute')),
                ('scrub_hour', models.CharField(default=b'00', help_text='Values 0-23 allowed.', max_length=100, verbose_name='Hour')),
                ('scrub_daymonth', models.CharField(default=b'*', help_text='Values 1-31 allowed.', max_length=100, verbose_name='Day of month')),
                ('scrub_month', models.CharField(default=b'*', max_length=100, verbose_name='Month')),
                ('scrub_dayweek', models.CharField(default=b'7', max_length=100, verbose_name='Day of week')),
                ('scrub_enabled', models.BooleanField(default=True, verbose_name='Enabled')),
            ],
            options={
                'ordering': ['scrub_volume__vol_name'],
                'verbose_name': 'Scrub',
                'verbose_name_plural': 'Scrubs',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_filesystem', models.CharField(max_length=150, verbose_name='Volume/Dataset')),
                ('task_recursive', models.BooleanField(default=False, verbose_name='Recursive')),
                ('task_ret_count', models.PositiveIntegerField(default=2, verbose_name='Snapshot lifetime value')),
                ('task_ret_unit', models.CharField(choices=[(b'hour', 'Hour(s)'), (b'day', 'Day(s)'), (b'week', 'Week(s)'), (b'month', 'Month(s)'), (b'year', 'Year(s)')], default=b'week', max_length=120, verbose_name='Snapshot lifetime unit')),
                ('task_begin', models.TimeField(default=datetime.time(9, 0), help_text='Do not snapshot before', verbose_name='Begin')),
                ('task_end', models.TimeField(default=datetime.time(18, 0), help_text='Do not snapshot after', verbose_name='End')),
                ('task_interval', models.PositiveIntegerField(choices=[(5, '5 minutes'), (10, '10 minutes'), (15, '15 minutes'), (30, '30 minutes'), (60, '1 hour'), (120, '2 hours'), (180, '3 hours'), (240, '4 hours'), (360, '6 hours'), (720, '12 hours'), (1440, '1 day'), (10080, '1 week'), (20160, '2 weeks'), (40320, '4 weeks')], default=60, help_text='How much time has been passed between two snapshot attempts.', verbose_name='Interval')),
                ('task_repeat_unit', models.CharField(choices=[(b'daily', 'Everyday'), (b'weekly', 'Every selected weekday')], default=b'weekly', help_text='How the task is repeated', max_length=120, verbose_name='Occurrence')),
                ('task_byweekday', models.CharField(blank=True, default=b'1,2,3,4,5', max_length=120, verbose_name='Weekday')),
                ('task_enabled', models.BooleanField(default=True, verbose_name='Enabled')),
            ],
            options={
                'ordering': ['task_filesystem'],
                'verbose_name': 'Periodic Snapshot Task',
                'verbose_name_plural': 'Periodic Snapshot Tasks',
            },
        ),
        migrations.CreateModel(
            name='VMWarePlugin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(max_length=200, verbose_name='Hostname')),
                ('username', models.CharField(help_text='Username on the above VMware host with enough privileges to snapshot virtual machines.', max_length=200, verbose_name='Username')),
                ('password', models.CharField(max_length=200, verbose_name='Password')),
                ('filesystem', models.CharField(max_length=200, verbose_name='ZFS Filesystem')),
                ('datastore', models.CharField(help_text='The datastore on the VMware side that the filesystem corresponds to.', max_length=200, verbose_name='Datastore')),
            ],
            options={
                'verbose_name': 'VMware-Snapshot',
                'verbose_name_plural': 'VMware-Snapshots',
            },
        ),
        migrations.CreateModel(
            name='Volume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vol_name', models.CharField(max_length=120, unique=True, verbose_name='Name')),
                ('vol_fstype', models.CharField(choices=[(b'ZFS', b'ZFS')], max_length=120, verbose_name='File System Type')),
                ('vol_guid', models.CharField(blank=True, editable=False, max_length=50)),
                ('vol_encrypt', models.IntegerField(choices=[(0, 'Unencrypted'), (1, 'Encrypted, no passphrase'), (2, 'Encrypted, with passphrase')], default=0, verbose_name='Encryption Type')),
                ('vol_encryptkey', models.CharField(blank=True, editable=False, max_length=50)),
            ],
            options={
                'verbose_name': 'Volume',
            },
        ),
        migrations.AddField(
            model_name='scrub',
            name='scrub_volume',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='storage.Volume', verbose_name='Volume'),
        ),
        migrations.AddField(
            model_name='replication',
            name='repl_remote',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.ReplRemote', verbose_name='Remote Host'),
        ),
        migrations.AddField(
            model_name='encrypteddisk',
            name='encrypted_volume',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.Volume'),
        ),
    ]
