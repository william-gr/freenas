# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-12-27 21:42


import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import freenasUI.freeadmin.models.fields
import freenasUI.services.models
from freenasUI.common.system import get_sw_name


def create_services(apps, schema_editor):
    afp = apps.get_model('services', 'AFP')()
    afp.save()

    cifs = apps.get_model('services', 'CIFS')()
    cifs.cifs_srv_netbiosname = get_sw_name().lower()
    cifs.cifs_srv_workgroup = 'WORKGROUP'
    cifs.cifs_srv_description = '%s Server' % get_sw_name()
    cifs.save()

    ddns = apps.get_model('services', 'DynamicDNS')()
    ddns.save()

    ftp = apps.get_model('services', 'FTP')()
    ftp.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('system', '0001_initial'),
        ('directoryservice', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AFP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('afp_srv_guest', models.BooleanField(default=False, help_text='Allows guest access to all Apple shares on this box.', verbose_name='Guest Access')),
                ('afp_srv_guest_user', freenasUI.freeadmin.models.fields.UserField(default=b'nobody', help_text="Use this option to override the username ('nobody' by default) which will be used for access to services which are specified as guest. Whatever privileges this user has will be available to any client connecting to the guest service. This user must exist in the password file, but does not require a valid login. The user root cannot be used as guest account.", max_length=120, verbose_name='Guest account')),
                ('afp_srv_bindip', freenasUI.freeadmin.models.fields.MultiSelectField(blank=True, default=b'', help_text='IP addresses to advertise and listens to. If none specified, advertise the first IP address of the system, but to listen for any incoming request.', max_length=255, verbose_name='Bind IP Addresses')),
                ('afp_srv_connections_limit', models.IntegerField(default=50, help_text='Maximum number of connections permitted via AFP. The default limit is 50.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)], verbose_name='Max. Connections')),
                ('afp_srv_homedir_enable', models.BooleanField(default=False, help_text='Enable/disable home directories for AFP user.', verbose_name='Enable home directories')),
                ('afp_srv_homedir', freenasUI.freeadmin.models.fields.PathField(blank=True, max_length=255, null=True, verbose_name='Home directories')),
                ('afp_srv_homename', models.CharField(blank=True, help_text='When set, overrides the default Home Share Name.', max_length=50, verbose_name='Home share name')),
                ('afp_srv_dbpath', freenasUI.freeadmin.models.fields.PathField(blank=True, help_text='Sets the database information to be stored in path. You have to specify a writable location, even if the volume is read only.', max_length=255, null=True, verbose_name='Database Path')),
                ('afp_srv_global_aux', models.TextField(blank=True, help_text='These parameters are added to the [Global] section of afp.conf', verbose_name='Global auxiliary parameters')),
                ('afp_srv_map_acls', models.CharField(choices=[(b'none', 'None'), (b'rights', 'Rights'), (b'mode', 'Mode')], default=b'rights', help_text='How to map the effective permissions of authenticated users: Rights (default, Unix-style permissions), Mode (ACLs), or None', max_length=120, verbose_name='Map ACLs')),
            ],
            options={
                'verbose_name': 'AFP',
                'verbose_name_plural': 'AFP',
            },
        ),
        migrations.CreateModel(
            name='CIFS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cifs_srv_netbiosname', models.CharField(max_length=120, verbose_name='NetBIOS name')),
                ('cifs_srv_netbiosname_b', models.CharField(blank=True, max_length=120, null=True, verbose_name='NetBIOS name')),
                ('cifs_srv_netbiosalias', models.CharField(blank=True, max_length=120, null=True, verbose_name='NetBIOS alias')),
                ('cifs_srv_workgroup', models.CharField(help_text='Workgroup the server will appear to be in when queried by clients (maximum 15 characters).', max_length=120, verbose_name='Workgroup')),
                ('cifs_srv_description', models.CharField(blank=True, help_text='Server description. This can usually be left blank.', max_length=120, verbose_name='Description')),
                ('cifs_srv_doscharset', models.CharField(choices=[(b'CP437', b'CP437'), (b'CP850', b'CP850'), (b'CP852', b'CP852'), (b'CP866', b'CP866'), (b'CP932', b'CP932'), (b'CP949', b'CP949'), (b'CP950', b'CP950'), (b'CP1026', b'CP1026'), (b'CP1251', b'CP1251'), (b'ASCII', b'ASCII')], default=b'CP437', max_length=120, verbose_name='DOS charset')),
                ('cifs_srv_unixcharset', models.CharField(choices=[(b'UTF-8', b'UTF-8'), (b'iso-8859-1', b'iso-8859-1'), (b'iso-8859-15', b'iso-8859-15'), (b'gb2312', b'gb2312'), (b'EUC-JP', b'EUC-JP'), (b'ASCII', b'ASCII')], default=b'UTF-8', max_length=120, verbose_name='UNIX charset')),
                ('cifs_srv_loglevel', models.CharField(choices=[(b'0', 'None'), (b'1', 'Minimum'), (b'2', 'Normal'), (b'3', 'Full'), (b'10', 'Debug')], default=b'0', max_length=120, verbose_name='Log level')),
                ('cifs_srv_syslog', models.BooleanField(default=False, verbose_name='Use syslog only')),
                ('cifs_srv_localmaster', models.BooleanField(default=False, verbose_name='Local Master')),
                ('cifs_srv_domain_logons', models.BooleanField(default=False, verbose_name='Domain logons')),
                ('cifs_srv_timeserver', models.BooleanField(default=False, verbose_name='Time Server for Domain')),
                ('cifs_srv_guest', freenasUI.freeadmin.models.fields.UserField(default=b'nobody', help_text="Use this option to override the username ('nobody' by default) which will be used for access to services which are specified as guest. Whatever privileges this user has will be available to any client connecting to the guest service. This user must exist in the password file, but does not require a valid login. The user root cannot be used as guest account.", max_length=120, verbose_name='Guest account')),
                ('cifs_srv_filemask', models.CharField(blank=True, help_text='Use this option to override the file creation mask (0666 by default).', max_length=120, verbose_name='File mask')),
                ('cifs_srv_dirmask', models.CharField(blank=True, help_text='Use this option to override the directory creation mask (0777 by default).', max_length=120, verbose_name='Directory mask')),
                ('cifs_srv_nullpw', models.BooleanField(default=False, verbose_name='Allow Empty Password')),
                ('cifs_srv_smb_options', models.TextField(blank=True, help_text='These parameters are added to the [global] section of smb.conf', verbose_name='Auxiliary parameters')),
                ('cifs_srv_unixext', models.BooleanField(default=True, help_text='These extensions enable Samba to better serve UNIX SMB clients by supporting features such as symbolic links, hard links, etc...', verbose_name='Unix Extensions')),
                ('cifs_srv_aio_enable', models.BooleanField(default=False, editable=False, help_text='Enable/disable AIO support.', verbose_name='Enable AIO')),
                ('cifs_srv_aio_rs', models.IntegerField(default=4096, editable=False, help_text='Samba will read asynchronously if request size is larger than this value.', verbose_name='Minimum AIO read size')),
                ('cifs_srv_aio_ws', models.IntegerField(default=4096, editable=False, help_text='Samba will write asynchronously if request size is larger than this value.', verbose_name='Minimum AIO write size')),
                ('cifs_srv_zeroconf', models.BooleanField(default=True, help_text='Zeroconf support via Avahi allows clients (the Mac OSX finder in particular) to automatically discover the SMB shares on the system similar to the Computer Browser service in Windows.', verbose_name='Zeroconf share discovery')),
                ('cifs_srv_hostlookup', models.BooleanField(default=True, help_text='Specifies whether Samba should use (expensive) hostname lookups or use IP addresses instead. An example place where hostname lookups are currently used is when checking the hosts deny and hosts allow.', verbose_name='Hostnames lookups')),
                ('cifs_srv_min_protocol', models.CharField(blank=True, choices=[(b'CORE', 'CORE'), (b'COREPLUS', 'COREPLUS'), (b'LANMAN1', 'LANMAN1'), (b'LANMAN2', 'LANMAN2'), (b'NT1', 'NT1'), (b'SMB2', 'SMB2'), (b'SMB2_02', 'SMB2_02'), (b'SMB2_10', 'SMB2_10'), (b'SMB3', 'SMB3'), (b'SMB3_00', 'SMB3_00'), (b'SMB3_02', 'SMB3_02'), (b'SMB3_11', 'SMB3_11')], help_text='The minimum protocol version that will be supported by the server', max_length=120, verbose_name='Server minimum protocol')),
                ('cifs_srv_max_protocol', models.CharField(choices=[(b'CORE', 'CORE'), (b'COREPLUS', 'COREPLUS'), (b'LANMAN1', 'LANMAN1'), (b'LANMAN2', 'LANMAN2'), (b'NT1', 'NT1'), (b'SMB2', 'SMB2'), (b'SMB2_02', 'SMB2_02'), (b'SMB2_10', 'SMB2_10'), (b'SMB3', 'SMB3'), (b'SMB3_00', 'SMB3_00'), (b'SMB3_02', 'SMB3_02'), (b'SMB3_11', 'SMB3_11')], default=b'SMB3', help_text='The highest protocol version that will be supported by the server', max_length=120, verbose_name='Server maximum protocol')),
                ('cifs_srv_allow_execute_always', models.BooleanField(default=True, help_text='This boolean parameter controls the behaviour of smbd(8) when receiving a protocol request of "open for execution" from a Windows client. With Samba 3.6 and older, the execution right in the ACL was not checked, so a client could execute a file even if it did not have execute rights on the file. In Samba 4.0, this has been fixed, so that by default, i.e. when this parameter is set to "False", "open for execution" is now denied when execution permissions are not present. If this parameter is set to "True", Samba does not check execute permissions on "open for execution", thus re-establishing the behavior of Samba 3.6 ', verbose_name='Allow execute always')),
                ('cifs_srv_obey_pam_restrictions', models.BooleanField(default=True, help_text="This parameter controls whether or not Samba should obey PAM's account and session management directives", verbose_name='Obey pam restrictions')),
                ('cifs_srv_bindip', freenasUI.freeadmin.models.fields.MultiSelectField(blank=True, help_text='IP addresses to bind to. If none specified, all available interfaces that are up will be listened on.', max_length=250, null=True, verbose_name='Bind IP Addresses')),
                ('cifs_SID', models.CharField(blank=True, max_length=120, null=True)),
            ],
            options={
                'verbose_name': 'SMB',
                'verbose_name_plural': 'SMB',
            },
        ),
        migrations.CreateModel(
            name='DomainController',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dc_realm', models.CharField(help_text='Realm Name, eg EXAMPLE.ORG', max_length=120, verbose_name='Realm')),
                ('dc_domain', models.CharField(help_text='Domain Name in old format, eg EXAMPLE', max_length=120, verbose_name='Domain')),
                ('dc_role', models.CharField(choices=[(b'dc', b'active directory domain controller')], default=b'dc', help_text='Server Role', max_length=120, verbose_name='Server Role')),
                ('dc_dns_backend', models.CharField(choices=[(b'SAMBA_INTERNAL', b'SAMBA_INTERNAL'), (b'BIND9_FLATFILE', b'BIND9_FLATFILE'), (b'BIND9_DLZ', b'BIND9_DLZ'), (b'NONE', b'NONE')], default=b'SAMBA_INTERNAL', help_text='DNS Backend, eg SAMBA_INTERNAL', max_length=120, verbose_name='DNS Backend')),
                ('dc_dns_forwarder', models.CharField(help_text='DNS Forwarder IP Address', max_length=120, verbose_name='DNS Forwarder')),
                ('dc_forest_level', models.CharField(choices=[(b'2000', b'2000'), (b'2003', b'2003'), (b'2008', b'2008'), (b'2008_R2', b'2008_R2')], default=b'2003', help_text='Domain and Forest Level, eg 2003', max_length=120, verbose_name='Domain Forest Level')),
                ('dc_passwd', models.CharField(help_text='Administrator Password', max_length=120, verbose_name='Administrator Password')),
                ('dc_kerberos_realm', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='directoryservice.KerberosRealm', verbose_name='Kerberos Realm')),
            ],
            options={
                'verbose_name': 'Domain Controller',
                'verbose_name_plural': 'Domain Controller',
            },
        ),
        migrations.CreateModel(
            name='DynamicDNS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ddns_provider', models.CharField(blank=True, choices=[(b'dyndns@dyndns.org', b'dyndns.org'), (b'default@freedns.afraid.org', b'freedns.afraid.org'), (b'default@zoneedit.com', b'zoneedit.com'), (b'default@no-ip.com', b'no-ip.com'), (b'default@easydns.com', b'easydns.com'), (b'dyndns@3322.org', b'3322.org'), (b'default@sitelutions.com', b'sitelutions.com'), (b'default@dnsomatic.com', b'dnsomatic.com'), (b'default@he.net', b'he.net'), (b'default@tzo.com', b'tzo.com'), (b'default@dynsip.org', b'dynsip.org'), (b'default@dhis.org', b'dhis.org'), (b'default@majimoto.net', b'majimoto.net'), (b'default@zerigo.com', b'zerigo.com')], default=b'dyndns@dyndns.org', max_length=120, verbose_name='Provider')),
                ('ddns_ipserver', models.CharField(blank=True, default=b'checkip.dyndns.org:80 /.', help_text="The client IP is detected by calling 'url' from this 'ip_server_name:port /.'. Leaving this field blank causes the service to use its built in default: checkip.dyndns.org:80 /.", max_length=150, verbose_name='IP Server')),
                ('ddns_domain', models.CharField(blank=True, help_text='A host name alias. This option can appear multiple times, for each domain that has the same IP. Use a comma to separate multiple alias names.  Some Dynamic DNS providers require a hash after the host name, for these providers use a # sign in the between the hostname and hash in the format hostname#hash.  You may also use multiple hostname and hash combinations in the format host1#hash1,host2#hash2.', max_length=120, verbose_name='Domain name')),
                ('ddns_username', models.CharField(max_length=120, verbose_name='Username')),
                ('ddns_password', models.CharField(max_length=120, verbose_name='Password')),
                ('ddns_updateperiod', models.CharField(blank=True, help_text='Time in seconds. Default is about 1 min.', max_length=120, verbose_name='Update period')),
                ('ddns_fupdateperiod', models.CharField(blank=True, max_length=120, verbose_name='Forced update period')),
                ('ddns_options', models.TextField(blank=True, help_text='These parameters will be added to global settings in inadyn-mt.conf.', verbose_name='Auxiliary parameters')),
            ],
            options={
                'verbose_name': 'Dynamic DNS',
                'verbose_name_plural': 'Dynamic DNS',
            },
        ),
        migrations.CreateModel(
            name='FibreChannelToTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fc_port', models.CharField(max_length=10, verbose_name='Port')),
            ],
            options={
                'verbose_name': 'Fibre Channel Target',
                'verbose_name_plural': 'Fibre Channel Targets',
            },
        ),
        migrations.CreateModel(
            name='FTP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ftp_port', models.PositiveIntegerField(default=21, help_text='Port to bind FTP server.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Port')),
                ('ftp_clients', models.PositiveIntegerField(default=32, help_text='Maximum number of simultaneous clients.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='Clients')),
                ('ftp_ipconnections', models.PositiveIntegerField(default=0, help_text='Maximum number of connections per IP address (0 = unlimited).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Connections')),
                ('ftp_loginattempt', models.PositiveIntegerField(default=3, help_text='Maximum number of allowed password attempts before disconnection.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Login Attempts')),
                ('ftp_timeout', models.PositiveIntegerField(default=120, help_text='Maximum idle time in seconds.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='Timeout')),
                ('ftp_rootlogin', models.BooleanField(default=False, verbose_name='Allow Root Login')),
                ('ftp_onlyanonymous', models.BooleanField(default=False, verbose_name='Allow Anonymous Login')),
                ('ftp_anonpath', freenasUI.freeadmin.models.fields.PathField(blank=True, max_length=255, null=True, verbose_name='Path')),
                ('ftp_onlylocal', models.BooleanField(default=False, verbose_name='Allow Local User Login')),
                ('ftp_banner', models.TextField(blank=True, help_text='Message which will be displayed to the user when they initially login.', max_length=120, verbose_name='Display Login')),
                ('ftp_filemask', models.CharField(default=b'077', help_text='Override the file creation mask (077 by default).', max_length=3, verbose_name='File mask')),
                ('ftp_dirmask', models.CharField(default=b'077', help_text='Override the directory creation mask (077 by default).', max_length=3, verbose_name='Directory mask')),
                ('ftp_fxp', models.BooleanField(default=False, verbose_name='Enable FXP')),
                ('ftp_resume', models.BooleanField(default=False, verbose_name='Allow Transfer Resumption')),
                ('ftp_defaultroot', models.BooleanField(default=False, help_text='For local users, only allow access to user home directory unless the user is a member of group wheel.', verbose_name='Always Chroot')),
                ('ftp_ident', models.BooleanField(default=False, verbose_name='Require IDENT Authentication')),
                ('ftp_reversedns', models.BooleanField(default=False, verbose_name='Perform Reverse DNS Lookups')),
                ('ftp_masqaddress', models.CharField(blank=True, help_text='Cause the server to display the network information for the specified address to the client, on the assumption that IP address or DNS host is acting as a NAT gateway or port forwarder for the server.', max_length=120, verbose_name='Masquerade address')),
                ('ftp_passiveportsmin', models.PositiveIntegerField(default=0, help_text='The minimum port to allocate for PASV style data connections (0 = use any port).', verbose_name='Minimum passive port')),
                ('ftp_passiveportsmax', models.PositiveIntegerField(default=0, help_text='The maximum port to allocate for PASV style data connections (0 = use any port). Passive ports restricts the range of ports from which the server will select when sent the PASV command from a client. The server will randomly choose a number from within the specified range until an open port is found. The port range selected must be in the non-privileged range (eg. greater than or equal to 1024). It is strongly recommended that the chosen range be large enough to handle many simultaneous passive connections (for example, 49152-65534, the IANA-registered ephemeral port range).', verbose_name='Maximum passive port')),
                ('ftp_localuserbw', models.PositiveIntegerField(default=0, help_text='Local user upload bandwidth in KB/s. Zero means infinity.', verbose_name='Local user upload bandwidth')),
                ('ftp_localuserdlbw', models.PositiveIntegerField(default=0, help_text='Local user download bandwidth in KB/s. Zero means infinity.', verbose_name='Local user download bandwidth')),
                ('ftp_anonuserbw', models.PositiveIntegerField(default=0, help_text='Anonymous user upload bandwidth in KB/s. Zero means infinity.', verbose_name='Anonymous user upload bandwidth')),
                ('ftp_anonuserdlbw', models.PositiveIntegerField(default=0, help_text='Anonymous user download bandwidth in KB/s. Zero means infinity.', verbose_name='Anonymous user download bandwidth')),
                ('ftp_tls', models.BooleanField(default=False, verbose_name='Enable TLS')),
                ('ftp_tls_policy', models.CharField(choices=[(b'on', 'on'), (b'off', 'off'), (b'data', 'data'), (b'!data', '!data'), (b'auth', 'auth'), (b'ctrl', 'ctrl'), (b'ctrl+data', 'ctrl+data'), (b'ctrl+!data', 'ctrl+!data'), (b'auth+data', 'auth+data'), (b'auth+!data', 'auth+!data')], default=b'on', max_length=120, verbose_name='TLS policy')),
                ('ftp_tls_opt_allow_client_renegotiations', models.BooleanField(default=False, verbose_name='TLS allow client renegotiations')),
                ('ftp_tls_opt_allow_dot_login', models.BooleanField(default=False, verbose_name='TLS allow dot login')),
                ('ftp_tls_opt_allow_per_user', models.BooleanField(default=False, verbose_name='TLS allow per user')),
                ('ftp_tls_opt_common_name_required', models.BooleanField(default=False, verbose_name='TLS common name required')),
                ('ftp_tls_opt_enable_diags', models.BooleanField(default=False, verbose_name='TLS enable diagnostics')),
                ('ftp_tls_opt_export_cert_data', models.BooleanField(default=False, verbose_name='TLS export certificate data')),
                ('ftp_tls_opt_no_cert_request', models.BooleanField(default=False, verbose_name='TLS no certificate request')),
                ('ftp_tls_opt_no_empty_fragments', models.BooleanField(default=False, verbose_name='TLS no empty fragments')),
                ('ftp_tls_opt_no_session_reuse_required', models.BooleanField(default=False, verbose_name='TLS no session reuse required')),
                ('ftp_tls_opt_stdenvvars', models.BooleanField(default=False, verbose_name='TLS export standard vars')),
                ('ftp_tls_opt_dns_name_required', models.BooleanField(default=False, verbose_name='TLS DNS name required')),
                ('ftp_tls_opt_ip_address_required', models.BooleanField(default=False, verbose_name='TLS IP address required')),
                ('ftp_options', models.TextField(blank=True, help_text='These parameters are added to proftpd.conf.', max_length=120, verbose_name='Auxiliary parameters')),
                ('ftp_ssltls_certificate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='system.Certificate', verbose_name='Certificate')),
            ],
            options={
                'verbose_name': 'FTP',
                'verbose_name_plural': 'FTP',
            },
        ),
        migrations.CreateModel(
            name='iSCSITarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscsi_target_name', models.CharField(help_text="Base Name will be appended automatically when starting without 'iqn.', 'eui.' or 'naa.'.", max_length=120, unique=True, verbose_name='Target Name')),
                ('iscsi_target_alias', models.CharField(blank=True, help_text='Optional user-friendly string of the target.', max_length=120, null=True, unique=True, verbose_name='Target Alias')),
                ('iscsi_target_mode', models.CharField(choices=[(b'iscsi', 'iSCSI'), (b'fc', 'Fibre Channel'), (b'both', 'Both')], default=b'iscsi', max_length=20, verbose_name='Target Mode')),
            ],
            options={
                'ordering': ['iscsi_target_name'],
                'verbose_name': 'Target',
                'verbose_name_plural': 'Targets',
            },
        ),
        migrations.CreateModel(
            name='iSCSITargetAuthCredential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscsi_target_auth_tag', models.IntegerField(default=1, verbose_name='Group ID')),
                ('iscsi_target_auth_user', models.CharField(help_text='Target side user name. It is usually the initiator name by default.', max_length=120, verbose_name='User')),
                ('iscsi_target_auth_secret', models.CharField(help_text='Target side secret.', max_length=120, verbose_name='Secret')),
                ('iscsi_target_auth_peeruser', models.CharField(blank=True, help_text='Initiator side user name.', max_length=120, verbose_name='Peer User')),
                ('iscsi_target_auth_peersecret', models.CharField(blank=True, help_text='Initiator side secret. (for mutual CHAP authentication)', max_length=120, verbose_name='Peer Secret')),
            ],
            options={
                'verbose_name': 'Authorized Access',
                'verbose_name_plural': 'Authorized Accesses',
            },
        ),
        migrations.CreateModel(
            name='iSCSITargetAuthorizedInitiator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscsi_target_initiator_tag', models.IntegerField(default=1, unique=True, verbose_name='Group ID')),
                ('iscsi_target_initiator_initiators', models.TextField(default=b'ALL', help_text="Initiator authorized to access to the iSCSI target. It takes a name or 'ALL' for any initiators.", max_length=2048, verbose_name='Initiators')),
                ('iscsi_target_initiator_auth_network', models.TextField(default=b'ALL', help_text="Network authorized to access to the iSCSI target. It takes IP or CIDR addresses or 'ALL' for any IPs.", max_length=2048, verbose_name='Authorized network')),
                ('iscsi_target_initiator_comment', models.CharField(blank=True, help_text='You may enter a description here for your reference.', max_length=120, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Initiator',
                'verbose_name_plural': 'Initiators',
            },
        ),
        migrations.CreateModel(
            name='iSCSITargetExtent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscsi_target_extent_name', models.CharField(help_text='String identifier of the extent.', max_length=120, unique=True, verbose_name='Extent Name')),
                ('iscsi_target_extent_serial', models.CharField(default=freenasUI.services.models.extent_serial, help_text='Serial number for the logical unit', max_length=16, verbose_name='Serial')),
                ('iscsi_target_extent_type', models.CharField(help_text='Type used as extent.', max_length=120, verbose_name='Extent Type')),
                ('iscsi_target_extent_path', models.CharField(help_text='File path (e.g. /mnt/sharename/extent/extent0) used as extent.', max_length=120, verbose_name='Path to the extent')),
                ('iscsi_target_extent_filesize', models.CharField(default=0, help_text='Size of extent: 0 means auto, a raw number is bytes, or suffix with KB, MB, or TB for convenience.', max_length=120, verbose_name='Extent size')),
                ('iscsi_target_extent_blocksize', models.IntegerField(choices=[(512, b'512'), (1024, b'1024'), (2048, b'2048'), (4096, b'4096')], default=512, help_text='Logical block length (512 by default). The recommended length for compatibility is 512.', verbose_name='Logical Block Size')),
                ('iscsi_target_extent_pblocksize', models.BooleanField(default=False, help_text='By default, the physical blocksize is reported as the ZFS block size, which can be up to 128K. Some initiators do not work with values above 4K. Checking this disables reporting the physical blocksize.', verbose_name='Disable Physical Block Size Reporting')),
                ('iscsi_target_extent_avail_threshold', models.IntegerField(blank=True, help_text='Remaining dataset/zvol capacity warning threshold', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)], verbose_name='Available Space Threshold (%)')),
                ('iscsi_target_extent_comment', models.CharField(blank=True, help_text='A description can be entered here for your reference.', max_length=120, verbose_name='Comment')),
                ('iscsi_target_extent_naa', models.CharField(blank=True, editable=False, max_length=34, unique=True, verbose_name='NAA...used only by the initiator')),
                ('iscsi_target_extent_insecure_tpc', models.BooleanField(default=True, help_text='Allow initiators to xcopy without authenticating to foreign targets.', verbose_name='Enable TPC')),
                ('iscsi_target_extent_xen', models.BooleanField(default=False, help_text='Xen inititors give errors when connecting to LUNs using the FreeNAS default naming scheme.  Checking this alters the naming scheme to be more Xen-friendly', verbose_name='Xen initiator compat mode')),
                ('iscsi_target_extent_rpm', models.CharField(choices=[(b'Unknown', 'Unknown'), (b'SSD', 'SSD'), (b'5400', '5400'), (b'7200', '7200'), (b'10000', '10000'), (b'15000', '15000')], default='SSD', help_text='RPM reported to initiators for this extent/LUN. The default is SSD because Windows will attempt to defrag non SSD devices.  This is a pathological worst-case situation for ZFS.  VMWare gives the option to use SSD LUNs as swap devices. There is some value to picking a non-SSD RPM if your extent is indeed not SSDs and the initiator will be VMWare.', max_length=20, verbose_name='LUN RPM')),
                ('iscsi_target_extent_ro', models.BooleanField(default=False, verbose_name='Read-only')),
                ('iscsi_target_extent_legacy', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['iscsi_target_extent_name'],
                'verbose_name': 'Extent',
                'verbose_name_plural': 'Extents',
            },
        ),
        migrations.CreateModel(
            name='iSCSITargetGlobalConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscsi_basename', models.CharField(help_text="The base name (e.g. iqn.2005-10.org.freenas.ctl, see RFC 3720 and 3721 for details) will append the target name that is not starting with 'iqn.', 'eui.' or 'naa.'", max_length=120, verbose_name='Base Name')),
                ('iscsi_isns_servers', models.TextField(blank=True, help_text='List of Internet Storage Name Service (iSNS) Servers', verbose_name='iSNS Servers')),
                ('iscsi_pool_avail_threshold', models.IntegerField(blank=True, help_text='Remaining ZFS pool capacity warning threshold when using zvol extents', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)], verbose_name='Pool Available Space Threshold (%)')),
                ('iscsi_alua', models.BooleanField(default=False, help_text='Enabling this feature requires initiator reconfiguration', verbose_name='Enable iSCSI ALUA')),
            ],
            options={
                'verbose_name': 'Target Global Configuration',
                'verbose_name_plural': 'Target Global Configuration',
            },
        ),
        migrations.CreateModel(
            name='iSCSITargetGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscsi_target_authtype', models.CharField(choices=[(b'None', 'None'), (b'CHAP', 'CHAP'), (b'CHAP Mutual', 'Mutual CHAP')], default=b'None', help_text='The authentication method accepted by the target.', max_length=120, verbose_name='Auth Method')),
                ('iscsi_target_authgroup', models.IntegerField(blank=True, null=True, verbose_name='Authentication Group ID')),
                ('iscsi_target_initialdigest', models.CharField(default=b'Auto', help_text='The method can be accepted by the target. Auto means both none and authentication.', max_length=120, verbose_name='Auth Method')),
                ('iscsi_target', models.ForeignKey(help_text='Target this group belongs to', on_delete=django.db.models.deletion.CASCADE, to='services.iSCSITarget', verbose_name='Target')),
                ('iscsi_target_initiatorgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.iSCSITargetAuthorizedInitiator', verbose_name='Initiator Group ID')),
            ],
            options={
                'verbose_name': 'iSCSI Group',
                'verbose_name_plural': 'iSCSI Groups',
            },
        ),
        migrations.CreateModel(
            name='iSCSITargetPortal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscsi_target_portal_tag', models.IntegerField(default=1, verbose_name='Portal Group ID')),
                ('iscsi_target_portal_comment', models.CharField(blank=True, help_text='A description can be entered here for your reference.', max_length=120, verbose_name='Comment')),
                ('iscsi_target_portal_discoveryauthmethod', models.CharField(choices=[(b'None', 'None'), (b'CHAP', 'CHAP'), (b'CHAP Mutual', 'Mutual CHAP')], default=b'None', max_length=120, verbose_name='Discovery Auth Method')),
                ('iscsi_target_portal_discoveryauthgroup', models.IntegerField(blank=True, null=True, verbose_name='Discovery Auth Group')),
            ],
            options={
                'verbose_name': 'Portal',
                'verbose_name_plural': 'Portals',
            },
        ),
        migrations.CreateModel(
            name='iSCSITargetPortalIP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscsi_target_portalip_ip', models.GenericIPAddressField(verbose_name='IP Address')),
                ('iscsi_target_portalip_port', models.SmallIntegerField(default=3260, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Port')),
                ('iscsi_target_portalip_portal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ips', to='services.iSCSITargetPortal', verbose_name='Portal')),
            ],
            options={
                'verbose_name': 'Portal IP',
                'verbose_name_plural': 'Portal IPs',
            },
        ),
        migrations.CreateModel(
            name='iSCSITargetToExtent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iscsi_lunid', models.IntegerField(null=True, verbose_name='LUN ID')),
                ('iscsi_extent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.iSCSITargetExtent', verbose_name='Extent')),
                ('iscsi_target', models.ForeignKey(help_text='Target this extent belongs to', on_delete=django.db.models.deletion.CASCADE, to='services.iSCSITarget', verbose_name='Target')),
            ],
            options={
                'ordering': ['iscsi_target', 'iscsi_lunid'],
                'verbose_name': 'Target / Extent',
                'verbose_name_plural': 'Targets / Extents',
            },
        ),
        migrations.CreateModel(
            name='LLDP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lldp_intdesc', models.BooleanField(default=True, help_text='Save received info in interface description / alias', verbose_name='Interface Description')),
                ('lldp_country', models.CharField(blank=True, help_text='Specify a two-letterISO 3166 country code (required for LLDPlocation support)', max_length=2, verbose_name='Country Code')),
                ('lldp_location', models.CharField(blank=True, help_text='Specify the physical location of the host', max_length=200, verbose_name='Location')),
            ],
            options={
                'verbose_name': 'LLDP',
                'verbose_name_plural': 'LLDP',
            },
        ),
        migrations.CreateModel(
            name='NFS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nfs_srv_servers', models.PositiveIntegerField(default=4, help_text='Specifies how many servers to create. There should be enough to handle the maximum level of concurrency from clients, typically four to six.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(256)], verbose_name='Number of servers')),
                ('nfs_srv_udp', models.BooleanField(default=False, verbose_name='Serve UDP NFS clients')),
                ('nfs_srv_allow_nonroot', models.BooleanField(default=False, help_text='Allow non-root mount requests to be served. This should only be specified if there are clients that require it. It will automatically clear the vfs.nfsrv.nfs_privport sysctl flag, which controls if the kernel will accept NFS requests from reserved ports only.', verbose_name='Allow non-root mount')),
                ('nfs_srv_v4', models.BooleanField(default=False, verbose_name='Enable NFSv4')),
                ('nfs_srv_v4_v3owner', models.BooleanField(default=False, help_text='Use the NFSv3 ownership model for NFSv4.  This circumvents the need to sync users and groups between the client and server. Note that this option is mutually incompatible with the > 16 groups option.', verbose_name='NFSv3 ownership model for NFSv4')),
                ('nfs_srv_v4_krb', models.BooleanField(default=False, verbose_name='Require Kerberos for NFSv4')),
                ('nfs_srv_bindip', models.CharField(blank=True, help_text='Select the IP addresses to listen to for NFS requests. If left unchecked, NFS will listen on all available addresses.', max_length=250, verbose_name='Bind IP Addresses')),
                ('nfs_srv_mountd_port', models.SmallIntegerField(blank=True, help_text='Force mountd to bind to the specified port, for both IPv4 and IPv6 address families. This is typically done to ensure that the port which mountd binds to is a known value which can be used in firewall rulesets.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='mountd(8) bind port')),
                ('nfs_srv_rpcstatd_port', models.SmallIntegerField(blank=True, help_text='Forces the rpc.statd daemon to bind to the specified port, for both IPv4 and IPv6 address families.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='rpc.statd(8) bind port')),
                ('nfs_srv_rpclockd_port', models.SmallIntegerField(blank=True, help_text='Force the rpc.lockd daemon to bind to the specified port, for both IPv4 and IPv6 address families.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='rpc.lockd(8) bind port')),
                ('nfs_srv_16', models.BooleanField(default=False, help_text='Ignore the group membership sent on the wire by the NFS client and look up the group membership on the server.  Note that this option is mutually incompatible with the NFSv3 ownership model for NFSv4.', verbose_name='Support >16 groups')),
                ('nfs_srv_mountd_log', models.BooleanField(default=True, help_text='Enable/disable mountd logging into syslog.', verbose_name='Log mountd(8) requests')),
                ('nfs_srv_statd_lockd_log', models.BooleanField(default=False, help_text='Enable/disable statd and lockd logging into syslog.', verbose_name='Log rpc.statd(8) and rpc.lockd(8)')),
            ],
            options={
                'verbose_name': 'NFS',
                'verbose_name_plural': 'NFS',
            },
        ),
        migrations.CreateModel(
            name='RPCToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=1024)),
                ('secret', models.CharField(max_length=1024)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rsyncd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rsyncd_port', models.IntegerField(default=873, help_text='Alternate TCP port. Default is 873', verbose_name='TCP Port')),
                ('rsyncd_auxiliary', models.TextField(blank=True, help_text='These parameters will be added to [global] settings in rsyncd.conf', verbose_name='Auxiliary parameters')),
            ],
            options={
                'verbose_name': 'Configure Rsyncd',
                'verbose_name_plural': 'Configure Rsyncd',
            },
        ),
        migrations.CreateModel(
            name='RsyncMod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rsyncmod_name', models.CharField(max_length=120, verbose_name='Module name')),
                ('rsyncmod_comment', models.CharField(blank=True, max_length=120, verbose_name='Comment')),
                ('rsyncmod_path', freenasUI.freeadmin.models.fields.PathField(help_text='Path to be shared', max_length=255, verbose_name='Path')),
                ('rsyncmod_mode', models.CharField(choices=[(b'ro', 'Read-only'), (b'wo', 'Write-only'), (b'rw', 'Read and Write')], default=b'rw', help_text='Control the access a remote host has to this module', max_length=120, verbose_name='Access Mode')),
                ('rsyncmod_maxconn', models.IntegerField(default=0, help_text='Maximum number of simultaneous connections. Default is 0 (unlimited).', verbose_name='Maximum connections')),
                ('rsyncmod_user', freenasUI.freeadmin.models.fields.UserField(default=b'nobody', help_text="Specify the user name for file transfers to and from that module. In combination with the 'Group' option, this determines which file permissions are available. Leave this field empty to use default settings.", max_length=120, verbose_name='User')),
                ('rsyncmod_group', freenasUI.freeadmin.models.fields.GroupField(default=b'nobody', help_text='Specify the group name for file transfers to and from that module. Leave this field empty to use default settings.', max_length=120, verbose_name='Group')),
                ('rsyncmod_hostsallow', models.TextField(blank=True, help_text='This option is a comma, space, or tab delimited set of hosts which are permitted to access this module. You can specify the hosts by name or IP number. Leave this field empty to use default settings.', verbose_name='Hosts allow')),
                ('rsyncmod_hostsdeny', models.TextField(blank=True, help_text='A comma, space, or tab-delimited set of hosts which are NOT permitted to access this module. Where the lists conflict, the allow list takes precedence. In the event that it is necessary to deny all by default, use the keyword ALL (or the netmask 0.0.0.0/0) and then explicitly specify in the hosts allow parameter those hosts that should be permitted access. Leave this field empty to use default settings.', verbose_name='Hosts deny')),
                ('rsyncmod_auxiliary', models.TextField(blank=True, help_text='These parameters will be added to the module configuration in rsyncd.conf.', verbose_name='Auxiliary parameters')),
            ],
            options={
                'ordering': ['rsyncmod_name'],
                'verbose_name': 'Rsync Module',
                'verbose_name_plural': 'Rsync Modules',
            },
        ),
        migrations.CreateModel(
            name='services',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('srv_service', models.CharField(help_text='Name of Service, should be auto-generated at build time', max_length=120, verbose_name='Service')),
                ('srv_enable', models.BooleanField(default=False, verbose_name='Enable Service')),
            ],
            options={
                'verbose_name': 'Services',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='SMART',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smart_interval', models.IntegerField(default=30, help_text='Set the interval between disk checks to N minutes. The default is 30 minutes.', verbose_name='Check interval')),
                ('smart_powermode', models.CharField(choices=[(b'never', 'Never - Check the device regardless of its power mode'), (b'sleep', 'Sleep - Check the device unless it is in SLEEP mode'), (b'standby', 'Standby - Check the device unless it is in SLEEP or STANDBY mode'), (b'idle', 'Idle - Check the device unless it is in SLEEP, STANDBY or IDLE mode')], default=b'never', max_length=60, verbose_name='Power mode')),
                ('smart_difference', models.IntegerField(default=0, help_text='Report if the temperature has changed by at least N degrees Celsius since the last report. 0 to disable.', verbose_name='Difference')),
                ('smart_informational', models.IntegerField(default=0, help_text='Report as informational in the system log if the temperature is greater or equal than N degrees Celsius. 0 to disable.', verbose_name='Informational')),
                ('smart_critical', models.IntegerField(default=0, help_text='Report as critical in the system log and send an email if the temperature is greater or equal than N degrees Celsius. 0 to disable.', verbose_name='Critical')),
                ('smart_email', models.CharField(blank=True, help_text='Destination email address. Separate email addresses with commas.', max_length=255, verbose_name='Email to report')),
            ],
            options={
                'verbose_name': 'S.M.A.R.T.',
                'verbose_name_plural': 'S.M.A.R.T.',
            },
        ),
        migrations.CreateModel(
            name='SNMP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snmp_location', models.CharField(blank=True, help_text="Location information, e.g. physical location of this system: 'Floor of building, Room xyzzy'.", max_length=255, verbose_name='Location')),
                ('snmp_contact', models.CharField(blank=True, help_text="Contact information, e.g. name or email of the person responsible for this system: 'admin@email.address'.", max_length=120, verbose_name='Contact')),
                ('snmp_traps', models.BooleanField(default=False, editable=False, verbose_name='Send SNMP Traps')),
                ('snmp_v3', models.BooleanField(default=False, verbose_name='SNMP v3 Support')),
                ('snmp_community', models.CharField(blank=True, default=b'public', help_text="In most cases, 'public' is used here.", max_length=120, verbose_name='Community')),
                ('snmp_v3_username', models.CharField(blank=True, max_length=20, verbose_name='Username')),
                ('snmp_v3_authtype', models.CharField(blank=True, choices=[(b'MD5', 'MD5'), (b'SHA', 'SHA')], default=b'SHA', max_length=3, verbose_name='Authentication Type')),
                ('snmp_v3_password', models.CharField(blank=True, max_length=50, verbose_name='Password')),
                ('snmp_v3_privproto', models.CharField(blank=True, choices=[(b'AES', 'AES'), (b'DES', 'DES')], max_length=3, null=True, verbose_name='Privacy Protocol')),
                ('snmp_v3_privpassphrase', models.CharField(blank=True, max_length=100, null=True, verbose_name='Privacy Passphrase')),
                ('snmp_options', models.TextField(blank=True, help_text='These parameters will be added to /etc/snmpd.config.', verbose_name='Auxiliary parameters')),
            ],
            options={
                'verbose_name': 'SNMP',
                'verbose_name_plural': 'SNMP',
            },
        ),
        migrations.CreateModel(
            name='SSH',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ssh_bindiface', freenasUI.freeadmin.models.fields.MultiSelectField(blank=True, choices=[(b'em0', b'em0')], default=b'', help_text='Interfaces to advertise and listens to. If none specified, listen for in all available addresses.', max_length=350, verbose_name='Bind Interfaces')),
                ('ssh_tcpport', models.PositiveIntegerField(default=22, help_text='Alternate TCP port. Default is 22', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='TCP Port')),
                ('ssh_rootlogin', models.BooleanField(default=False, help_text='Disabled: Root can only login via public key authentication; Enabled: Root login permitted with password', verbose_name='Login as Root with password')),
                ('ssh_passwordauth', models.BooleanField(default=False, verbose_name='Allow Password Authentication')),
                ('ssh_kerberosauth', models.BooleanField(default=False, verbose_name='Allow Kerberos Authentication')),
                ('ssh_tcpfwd', models.BooleanField(default=False, verbose_name='Allow TCP Port Forwarding')),
                ('ssh_compression', models.BooleanField(default=False, verbose_name='Compress Connections')),
                ('ssh_privatekey', models.TextField(blank=True, editable=False, help_text='Paste a RSA PRIVATE KEY in PEM format here.', max_length=1024, verbose_name='Host Private Key')),
                ('ssh_sftp_log_level', models.CharField(blank=True, choices=[(b'QUIET', 'Quiet'), (b'FATAL', 'Fatal'), (b'ERROR', 'Error'), (b'INFO', 'Info'), (b'VERBOSE', 'Verbose'), (b'DEBUG', 'Debug'), (b'DEBUG2', 'Debug2'), (b'DEBUG3', 'Debug3')], help_text='Specifies which messages will be logged by sftp-server. INFO and VERBOSE log transactions that sftp-server performs on behalf of the client. DEBUG2 and DEBUG3 each specify higher levels of debugging output. The default is ERROR.', max_length=20, verbose_name='SFTP Log Level')),
                ('ssh_sftp_log_facility', models.CharField(blank=True, choices=[(b'DAEMON', 'Daemon'), (b'USER', 'User'), (b'AUTH', 'Auth'), (b'LOCAL0', 'Local 0'), (b'LOCAL1', 'Local 1'), (b'LOCAL2', 'Local 2'), (b'LOCAL3', 'Local 3'), (b'LOCAL4', 'Local 4'), (b'LOCAL5', 'Local 5'), (b'LOCAL6', 'Local 6'), (b'LOCAL7', 'Local 7')], help_text='Specifies the facility code that is used when logging messages from sftp-server.', max_length=20, verbose_name='SFTP Log Facility')),
                ('ssh_options', models.TextField(blank=True, help_text='Extra options to /usr/local/etc/ssh/sshd_config (usually empty). Note, incorrect entered options prevent SSH service to be started.', max_length=120, verbose_name='Extra options')),
                ('ssh_host_dsa_key', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_dsa_key_pub', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_dsa_key_cert_pub', models.TextField(blank=True, editable=False, max_length=1024, null=True, verbose_name=b'ssh_host_dsa_key-cert.pub')),
                ('ssh_host_ecdsa_key', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_ecdsa_key_pub', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_ecdsa_key_cert_pub', models.TextField(blank=True, editable=False, max_length=1024, null=True, verbose_name=b'ssh_host_ecdsa_key-cert.pub')),
                ('ssh_host_ed25519_key_pub', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_ed25519_key', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_ed25519_key_cert_pub', models.TextField(blank=True, editable=False, max_length=1024, null=True, verbose_name=b'ssh_host_ed25519_key-cert.pub')),
                ('ssh_host_key', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_key_pub', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_rsa_key', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_rsa_key_pub', models.TextField(blank=True, editable=False, max_length=1024, null=True)),
                ('ssh_host_rsa_key_cert_pub', models.TextField(blank=True, editable=False, max_length=1024, null=True, verbose_name=b'ssh_host_rsa_key-cert.pub')),
            ],
            options={
                'verbose_name': 'SSH',
                'verbose_name_plural': 'SSH',
            },
        ),
        migrations.CreateModel(
            name='TFTP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tftp_directory', freenasUI.freeadmin.models.fields.PathField(help_text='The directory containing the files you want to publish. The remote host does not need to pass along the directory as part of the transfer.', max_length=255, verbose_name='Directory')),
                ('tftp_newfiles', models.BooleanField(default=False, verbose_name='Allow New Files')),
                ('tftp_port', models.PositiveIntegerField(default=69, help_text='The port to listen to. The default is to listen to the tftp port specified in /etc/services.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Port')),
                ('tftp_username', freenasUI.freeadmin.models.fields.UserField(default=b'nobody', help_text='Specifies the username which the service will run as.', max_length=120, verbose_name='Username')),
                ('tftp_umask', models.CharField(default=b'022', help_text='Set the umask for newly created files to the specified value. The default is 022 (everyone can read, nobody can write).', max_length=120, verbose_name='umask')),
                ('tftp_options', models.CharField(blank=True, help_text='Extra command line options (usually empty).', max_length=120, verbose_name='Extra options')),
            ],
            options={
                'verbose_name': 'TFTP',
                'verbose_name_plural': 'TFTP',
            },
        ),
        migrations.CreateModel(
            name='UPS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ups_mode', models.CharField(choices=[(b'master', 'Master'), (b'slave', 'Slave')], default=b'master', max_length=6, verbose_name='UPS Mode')),
                ('ups_identifier', models.CharField(default=b'ups', help_text='This name is used to uniquely identify your UPS on this system.', max_length=120, verbose_name='Identifier')),
                ('ups_remotehost', models.CharField(blank=True, max_length=50, verbose_name='Remote Host')),
                ('ups_remoteport', models.IntegerField(blank=True, default=3493, verbose_name='Remote Port')),
                ('ups_driver', models.CharField(blank=True, choices=[('blazer_ser$MS-RT', 'Ablerex ups 2 MS-RT  (blazer_ser)'), ('blazer_usb$625L', 'Ablerex ups 2 625L USB (blazer_usb)'), ('blazer_ser$Hope Office 400/600', 'Ablerex ups 2 Hope Office 400/600  (blazer_ser)'), ('blazer_ser$400VA', 'ActivePower ups 2 400VA  (blazer_ser)'), ('blazer_ser$1400VA', 'ActivePower ups 2 1400VA  (blazer_ser)'), ('blazer_ser$2000VA', 'ActivePower ups 2 2000VA  (blazer_ser)'), ('blazer_ser$TopGuard 2000', 'Advice ups 2 TopGuard 2000  (blazer_ser)'), ('genericups upstype=21$MiniGuard UPS 700', 'AEC ups 1 MiniGuard UPS 700 Megatec M2501 cable (genericups upstype=21)'), ('blazer_ser or blazer_usb$PROTECT HOME', 'AEG Power Solutions ups 2 PROTECT HOME  (blazer_ser or blazer_usb)'), ('solis$Back-UPS 1200BR (Microsol)', 'APC ups 2 Back-UPS 1200BR (Microsol)  (solis)'), ('solis$Back-UPS BZ2200BI-BR (Microsol)', 'APC ups 2 Back-UPS BZ2200BI-BR (Microsol)  (solis)'), ('apcsmart$Back-UPS Pro', 'APC ups 1 Back-UPS Pro  (apcsmart)'), ('apcsmart$Matrix-UPS', 'APC ups 1 Matrix-UPS  (apcsmart)'), ('apcsmart$Smart-UPS', 'APC ups 1 Smart-UPS  (apcsmart)'), ('apcsmart$Smart-UPS SMT/SMX/SURTD', 'APC ups 1 Smart-UPS SMT/SMX/SURTD Microlink models with RJ45 socket - they *require* AP9620 SmartSlot expansion card and smart cable (apcsmart)'), ('usbhid-ups$Back-UPS Pro USB', 'APC ups 2 Back-UPS Pro USB USB (usbhid-ups)'), ('usbhid-ups$Back-UPS USB', 'APC ups 2 Back-UPS USB USB (usbhid-ups)'), ('usbhid-ups$Back-UPS RS USB', 'APC ups 2 Back-UPS RS USB USB (usbhid-ups)'), ('usbhid-ups$Back-UPS LS USB', 'APC ups 2 Back-UPS LS USB USB (usbhid-ups)'), ('usbhid-ups$Back-UPS ES/CyberFort 350', 'APC ups 2 Back-UPS ES/CyberFort 350 USB (usbhid-ups)'), ('usbhid-ups$Back-UPS BF500', 'APC ups 2 Back-UPS BF500 USB (usbhid-ups)'), ('usbhid-ups$BACK-UPS XS LCD', 'APC ups 2 BACK-UPS XS LCD USB (usbhid-ups)'), ('usbhid-ups$Smart-UPS USB', 'APC ups 2 Smart-UPS USB USB (usbhid-ups)'), ('genericups upstype=1$Back-UPS', 'APC ups 1 Back-UPS 940-0095A/C cables (genericups upstype=1)'), ('genericups upstype=2$Back-UPS', 'APC ups 1 Back-UPS 940-0020B/C cables (genericups upstype=2)'), ('genericups upstype=9$Back-UPS', 'APC ups 1 Back-UPS 940-0023A cable (genericups upstype=9)'), ('genericups upstype=12$Back-UPS Office', 'APC ups 1 Back-UPS Office 940-0119A cable (genericups upstype=12)'), ('genericups upstype=20$Back-UPS RS 500', 'APC ups 1 Back-UPS RS 500 custom non-USB cable (genericups upstype=20)'), ('snmp-ups$Smart-UPS RT XL', 'APC ups 3 Smart-UPS RT XL AP9618 SNMP monitoring card (snmp-ups)'), ('snmp-ups$(various)', 'APC ups 3 (various) AP9618 SNMP monitoring card (snmp-ups)'), ('snmp-ups privProtocol=AES$(various)', 'APC ups 3 (various) AP9630 SNMP monitoring card (snmp-ups privProtocol=AES)'), ('genericups upstype=12$Masterswitch', 'APC pdu 1 Masterswitch 940-0020 cable (genericups upstype=12)'), ('powerman-pdu$AP9210', 'APC pdu 1 AP9210 8 outlets (powerman-pdu)'), ('powerman-pdu$AP79xx', 'APC pdu 1 AP79xx 8 to 24 outlets (powerman-pdu)'), ('snmp-ups$(various)', 'APC pdu 3 (various) SNMP monitoring card (snmp-ups)'), ('snmp-ups$various PDU', 'Aphel pdu 3 various PDU  (snmp-ups)'), ('genericups upstype=4$1000A', 'Apollo ups 1 1000A  (genericups upstype=4)'), ('genericups upstype=4$1000F', 'Apollo ups 1 1000F  (genericups upstype=4)'), ('blazer_usb$850VA', 'Apollo ups 2 850VA  (blazer_usb)'), ('powerman-pdu$SWPDU', 'Appro pdu 1 SWPDU 48 outlets (powerman-pdu)'), ('blazer_ser$ARTon Millenium 1/2/3/6/10 kVA', 'ARTronic ups 2 ARTon Millenium 1/2/3/6/10 kVA Serial (blazer_ser)'), ('blazer_ser$ARTon Millenium 3.1 10/15/20 kVA', 'ARTronic ups 2 ARTon Millenium 3.1 10/15/20 kVA Serial (blazer_ser)'), ('blazer_ser$ARTon Titanium 6/10 kVA', 'ARTronic ups 2 ARTon Titanium 6/10 kVA Serial (blazer_ser)'), ('blazer_ser$ARTon Titanium 3.1 10/15/20 kVA', 'ARTronic ups 2 ARTon Titanium 3.1 10/15/20 kVA Serial (blazer_ser)'), ('blazer_ser$ARTon Optimum 1/2/3/6/10 kVA', 'ARTronic ups 2 ARTon Optimum 1/2/3/6/10 kVA Serial (blazer_ser)'), ('blazer_usb$ARTon Titanium Plus 1/2/3 kVA', 'ARTronic ups 2 ARTon Titanium Plus 1/2/3 kVA USB (blazer_usb)'), ('blazer_usb$ARTon Platinium 6/10 kVA', 'ARTronic ups 2 ARTon Platinium 6/10 kVA USB (blazer_usb)'), ('blazer_usb$ARTon Platinium Combo 3.1 10/15/20 kVA', 'ARTronic ups 2 ARTon Platinium Combo 3.1 10/15/20 kVA USB (blazer_usb)'), ('blazer_usb$ARTon Platinium RT 1/2/3/6/10 kVA', 'ARTronic ups 2 ARTon Platinium RT 1/2/3/6/10 kVA USB (blazer_usb)'), ('asem$PB1300 UPS', 'ASEM SPA UPS 5 PB1300 UPS i2c (asem)'), ('blazer_usb$Defensor 1K Tower / Rack', 'ATEK ups 2 Defensor 1K Tower / Rack USB (blazer_usb)'), ('blazer_usb$Defensor 2K Tower / Rack', 'ATEK ups 2 Defensor 2K Tower / Rack USB (blazer_usb)'), ('blazer_usb$Defensor 3K Tower / Rack', 'ATEK ups 2 Defensor 3K Tower / Rack USB (blazer_usb)'), ('blazer_usb$Defensor 6K Tower / Rack', 'ATEK ups 2 Defensor 6K Tower / Rack USB (blazer_usb)'), ('blazer_usb$Defensor 10K Tower / Rack', 'ATEK ups 2 Defensor 10K Tower / Rack USB (blazer_usb)'), ('blazer_ser$A03-P826', 'Atlantis Land ups 2 A03-P826  (blazer_ser)'), ('blazer_usb langid_fix=0x0409$A03-P551', 'Atlantis Land ups 2 A03-P551 USB (blazer_usb langid_fix=0x0409)'), ('nutdrv_qx$HostPower 851 (A03-HP851)', 'Atlantis Land ups 2 HostPower 851 (A03-HP851) USB (nutdrv_qx)'), ('nutdrv_qx$LinePower 1151 (A03-OP1151)', 'Atlantis Land ups 2 LinePower 1151 (A03-OP1151) Serial (nutdrv_qx)'), ('nutdrv_qx$LinePower 1151 (A03-OP1151)', 'Atlantis Land ups 2 LinePower 1151 (A03-OP1151) USB (nutdrv_qx)'), ('nutdrv_qx$OnePower 841+ (A03-P841)', 'Atlantis Land ups 2 OnePower 841+ (A03-P841) USB (nutdrv_qx)'), ('nutdrv_qx$(various)', 'Atlantis Land ups 2 (various) Serial (nutdrv_qx)'), ('nutdrv_qx$(various)', 'Atlantis Land ups 2 (various) USB (nutdrv_qx)'), ('blazer_ser$Aviem Power RT 1000-3000VA', 'Aviem Systems ups 2 Aviem Power RT 1000-3000VA  (blazer_ser)'), ('powerman-pdu$RPC3', 'Baytech pdu 1 RPC3 8 outlets (powerman-pdu)'), ('powerman-pdu$RPC3-20NC', 'Baytech pdu 1 RPC3-20NC 8 outlets (powerman-pdu)'), ('powerman-pdu$RPC28-30NC', 'Baytech pdu 1 RPC28-30NC 20 outlets (powerman-pdu)'), ('snmp-ups$various RPC', 'Baytech pdu 3 various RPC  (snmp-ups)'), ('blazer_usb$Active Battery Backup BU30 series', 'Belkin ups 2 Active Battery Backup BU30 series USB (blazer_usb)'), ('genericups upstype=7$Home Office F6H350-SER', 'Belkin ups 1 Home Office F6H350-SER  (genericups upstype=7)'), ('genericups upstype=7$Home Office F6H500-SER', 'Belkin ups 1 Home Office F6H500-SER  (genericups upstype=7)'), ('genericups upstype=7$Home Office F6H650-SER', 'Belkin ups 1 Home Office F6H650-SER  (genericups upstype=7)'), ('usbhid-ups$F6H375-USB', 'Belkin ups 2 F6H375-USB USB (<= 2005 models, vendor id: 050d) (usbhid-ups)'), ('blazer_usb$F6H375-USB', 'Belkin ups 2 F6H375-USB USB (2007 models, vendor id: 0665) (blazer_usb)'), ('usbhid-ups$Office Series F6C550-AVR', 'Belkin ups 2 Office Series F6C550-AVR USB (usbhid-ups)'), ('usbhid-ups$Regulator PRO-USB', 'Belkin ups 3 Regulator PRO-USB USB (~2000, product id: 0f51) (usbhid-ups)'), ('belkin$Regulator Pro', 'Belkin ups 2 Regulator Pro F6C525-SER, F6C625-SER (belkin)'), ('genericups upstype=4$Resource', 'Belkin ups 1 Resource  (genericups upstype=4)'), ('belkin$Small Enterprise F6C1500-TW-RK', 'Belkin ups 2 Small Enterprise F6C1500-TW-RK serial port (belkin)'), ('usbhid-ups$Small Enterprise F6C1500-TW-RK', 'Belkin ups 2 Small Enterprise F6C1500-TW-RK USB (usbhid-ups)'), ('usbhid-ups$Universal UPS F6C100-UNV', 'Belkin ups 2 Universal UPS F6C100-UNV USB (usbhid-ups)'), ('belkinunv$Universal UPS F6C120-UNV', 'Belkin ups 1 Universal UPS F6C120-UNV serial port (belkinunv)'), ('usbhid-ups$Universal UPS F6C120-UNV', 'Belkin ups 2 Universal UPS F6C120-UNV USB (usbhid-ups)'), ('belkinunv$Universal UPS F6C800-UNV', 'Belkin ups 1 Universal UPS F6C800-UNV serial port (belkinunv)'), ('usbhid-ups$Universal UPS F6C800-UNV', 'Belkin ups 2 Universal UPS F6C800-UNV USB (usbhid-ups)'), ('belkinunv$Universal UPS F6C1100-UNV', 'Belkin ups 1 Universal UPS F6C1100-UNV serial port (<= 2005 models) (belkinunv)'), ('usbhid-ups$Universal UPS F6C1100-UNV', 'Belkin ups 2 Universal UPS F6C1100-UNV USB (<= 2005 models, vendor id: 050d) (usbhid-ups)'), ('blazer_usb$Universal UPS F6C1100-UNV', 'Belkin ups 2 Universal UPS F6C1100-UNV USB (2007 models, vendor id: 0665) (blazer_usb)'), ('usbhid-ups$Universal UPS F6C1200-UNV', 'Belkin ups 2 Universal UPS F6C1200-UNV USB (<= 2005 models, vendor id: 050d) (usbhid-ups)'), ('blazer_usb$Universal UPS F6C1200-UNV', 'Belkin ups 2 Universal UPS F6C1200-UNV USB (2007 models, vendor id: 0665) (blazer_usb)'), ('blazer_ser$Universal UPS F6H350deUNV', 'Belkin ups 2 Universal UPS F6H350deUNV serial port (blazer_ser)'), ('blazer_ser$Universal UPS F6H350ukUNV', 'Belkin ups 2 Universal UPS F6H350ukUNV serial port (blazer_ser)'), ('blazer_ser$Universal UPS F6H500ukUNV', 'Belkin ups 2 Universal UPS F6H500ukUNV serial port (blazer_ser)'), ('blazer_ser$Universal UPS F6H650ukUNV', 'Belkin ups 2 Universal UPS F6H650ukUNV serial port (blazer_ser)'), ('blazer_usb$F6S600auUSB', 'Belkin ups 2 F6S600auUSB USB (blazer_usb)'), ('bestfortress$Fortress (older)', 'Best Power ups 1 Fortress (older)  (bestfortress)'), ('blazer_ser or bestups$Fortress (newer)', 'Best Power ups 1 Fortress (newer)  (blazer_ser or bestups)'), ('blazer_ser or bestups$Fortress Telecom', 'Best Power ups 1 Fortress Telecom  (blazer_ser or bestups)'), ('blazer_ser or bestups$Axxium Rackmount', 'Best Power ups 1 Axxium Rackmount  (blazer_ser or bestups)'), ('blazer_ser or bestups$Patriot Pro', 'Best Power ups 1 Patriot Pro  (blazer_ser or bestups)'), ('blazer_ser or bestups$Patriot Pro II', 'Best Power ups 1 Patriot Pro II  (blazer_ser or bestups)'), ('genericups upstype=6$Patriot', 'Best Power ups 1 Patriot INT51 cable (genericups upstype=6)'), ('bestuferrups$Micro-Ferrups', 'Best Power ups 1 Micro-Ferrups  (bestuferrups)'), ('bestfcom$Fortress/Ferrups', 'Best Power ups 1 Fortress/Ferrups f-command support (bestfcom)'), ('blazer_usb$B400-010-B/B400-020-B/B400-030-B/B400-010-C/B400-020-C/B400-030-C', 'Borri ups 2 B400-010-B/B400-020-B/B400-030-B/B400-010-C/B400-020-C/B400-030-C  (blazer_usb)'), ('blazer_usb$B400-R010-B/B400-R020-B/B400-R030-B/B400-R010-C/B400-R020-C/B400-R030-C', 'Borri ups 2 B400-R010-B/B400-R020-B/B400-R030-B/B400-R010-C/B400-R020-C/B400-R030-C  (blazer_usb)'), ('blazer_usb$B500-060-B/B500-100-B/B500-060-C/B500-100-C', 'Borri ups 2 B500-060-B/B500-100-B/B500-060-C/B500-100-C  (blazer_usb)'), ('blazer_usb$B500-R060-B/B500-R100-B', 'Borri ups 2 B500-R060-B/B500-R100-B  (blazer_usb)'), ('blazer_usb$B500EVO-100-B/B500EVO-200-B', 'Borri ups 2 B500EVO-100-B/B500EVO-200-B  (blazer_usb)'), ('blazer_usb$UPS-1700DV2', 'CABAC ups 2 UPS-1700DV2  (blazer_usb)'), ('blazer_ser$Desk Power 650', 'Chloride ups 2 Desk Power 650 serial port (blazer_ser)'), ('blazer_ser$CPG-SR1000', 'Cito Power ups 2 CPG-SR1000  (blazer_ser)'), ('gamatronic$ST-800', 'Clary ups 4 ST-800  (gamatronic)'), ('upscode2 use_pre_lf$T1500h', 'Compaq ups 4 T1500h  (upscode2 use_pre_lf)'), ('upscode2$R3000h', 'Compaq ups 4 R3000h  (upscode2)'), ('bcmxcp$R3000 XR', 'Compaq ups 4 R3000 XR  (bcmxcp)'), ('bcmxcp$R5500 XR', 'Compaq ups 4 R5500 XR  (bcmxcp)'), ('blazer_usb$COVER PRM 1K/2K/3K/6K/10K', 'COVER ENERGY SA ups 2 COVER PRM 1K/2K/3K/6K/10K  (blazer_usb)'), ('blazer_usb$COVER PRM 1K/2K/3K/6K/10K EC', 'COVER ENERGY SA ups 2 COVER PRM 1K/2K/3K/6K/10K EC  (blazer_usb)'), ('blazer_usb$COVER PRM 6K/10K PR', 'COVER ENERGY SA ups 2 COVER PRM 6K/10K PR  (blazer_usb)'), ('powerpanel$CPS320AVR', 'Cyber Power Systems ups 1 CPS320AVR  (powerpanel)'), ('powerpanel$CPS500AVR', 'Cyber Power Systems ups 1 CPS500AVR  (powerpanel)'), ('powerpanel$CPS650AVR', 'Cyber Power Systems ups 1 CPS650AVR  (powerpanel)'), ('powerpanel$CPS700AVR', 'Cyber Power Systems ups 1 CPS700AVR  (powerpanel)'), ('powerpanel$CPS800AVR', 'Cyber Power Systems ups 1 CPS800AVR  (powerpanel)'), ('powerpanel$CPS850AVR', 'Cyber Power Systems ups 1 CPS850AVR  (powerpanel)'), ('powerpanel$CPS900AVR', 'Cyber Power Systems ups 1 CPS900AVR  (powerpanel)'), ('powerpanel$CPS1250AVR', 'Cyber Power Systems ups 1 CPS1250AVR  (powerpanel)'), ('powerpanel$CPS1500AVR', 'Cyber Power Systems ups 1 CPS1500AVR  (powerpanel)'), ('genericups upstype=7$Power99', 'Cyber Power Systems ups 1 Power99  (genericups upstype=7)'), ('genericups upstype=7$550SL', 'Cyber Power Systems ups 1 550SL  (genericups upstype=7)'), ('genericups upstype=7$725SL', 'Cyber Power Systems ups 1 725SL  (genericups upstype=7)'), ('powerpanel$CPS825VA', 'Cyber Power Systems ups 1 CPS825VA  (powerpanel)'), ('powerpanel$CPS1100AVR', 'Cyber Power Systems ups 1 CPS1100AVR  (powerpanel)'), ('powerpanel$CPS1200AVR', 'Cyber Power Systems ups 1 CPS1200AVR  (powerpanel)'), ('powerpanel$CPS1500AVR-HO', 'Cyber Power Systems ups 1 CPS1500AVR-HO  (powerpanel)'), ('powerpanel$PR2200', 'Cyber Power Systems ups 1 PR2200  (powerpanel)'), ('powerpanel$PR3000E', 'Cyber Power Systems ups 2 PR3000E  (powerpanel)'), ('powerpanel$OL3000RMXL2U', 'Cyber Power Systems ups 2 OL3000RMXL2U  (powerpanel)'), ('usbhid-ups$CPS685AVR', 'Cyber Power Systems ups 2 CPS685AVR USB (usbhid-ups)'), ('usbhid-ups$CPS800AVR', 'Cyber Power Systems ups 2 CPS800AVR USB (usbhid-ups)'), ('usbhid-ups$AE550', 'Cyber Power Systems ups 2 AE550 USB (usbhid-ups)'), ('usbhid-ups$CP 1500C', 'Cyber Power Systems ups 3 CP 1500C USB (usbhid-ups)'), ('usbhid-ups$CP825AVR-G / LE825G', 'Cyber Power Systems ups 3 CP825AVR-G / LE825G USB (usbhid-ups)'), ('usbhid-ups$OR2200LCDRM2U', 'Cyber Power Systems ups 3 OR2200LCDRM2U USB (usbhid-ups)'), ('usbhid-ups$OR700LCDRM1U', 'Cyber Power Systems ups 3 OR700LCDRM1U USB (usbhid-ups)'), ('usbhid-ups$PR6000LCDRTXL5U', 'Cyber Power Systems ups 3 PR6000LCDRTXL5U USB (usbhid-ups)'), ('usbhid-ups$Value 400E', 'Cyber Power Systems ups 2 Value 400E USB (usbhid-ups)'), ('usbhid-ups$Value 600E', 'Cyber Power Systems ups 2 Value 600E USB (usbhid-ups)'), ('usbhid-ups$Value 800E', 'Cyber Power Systems ups 2 Value 800E USB (usbhid-ups)'), ('usbhid-ups$Value 1500ELCD-RU', 'Cyber Power Systems ups 2 Value 1500ELCD-RU USB (usbhid-ups)'), ('usbhid-ups$CP900AVR', 'Cyber Power Systems ups 2 CP900AVR USB (usbhid-ups)'), ('usbhid-ups$CP1000AVRLCD', 'Cyber Power Systems ups 2 CP1000AVRLCD USB (usbhid-ups)'), ('usbhid-ups$CP1350AVRLCD', 'Cyber Power Systems ups 2 CP1350AVRLCD USB (usbhid-ups)'), ('usbhid-ups$CP1500AVRLCD', 'Cyber Power Systems ups 2 CP1500AVRLCD USB (usbhid-ups)'), ('usbhid-ups$CP1000PFCLCD', 'Cyber Power Systems ups 2 CP1000PFCLCD USB (usbhid-ups)'), ('snmp-ups$RMCARD100', 'Cyber Power Systems ups 3 RMCARD100  (snmp-ups)'), ('snmp-ups$RMCARD201', 'Cyber Power Systems ups 3 RMCARD201  (snmp-ups)'), ('snmp-ups$RMCARD202', 'Cyber Power Systems ups 3 RMCARD202  (snmp-ups)'), ('snmp-ups$RMCARD301', 'Cyber Power Systems ups 3 RMCARD301  (snmp-ups)'), ('powerman-pdu$PM8', 'Cyclades pdu 1 PM8 8 outlets (powerman-pdu)'), ('powerman-pdu$PM10', 'Cyclades pdu 1 PM10 10 outlets (powerman-pdu)'), ('mge-shut$Tower 500W LV / HV', 'Dell ups 5 Tower 500W LV / HV Serial port (mge-shut)'), ('mge-shut$Rack/Tower 1000W LV / HV', 'Dell ups 5 Rack/Tower 1000W LV / HV Serial port (mge-shut)'), ('mge-shut$Rack/Tower 1500W LV', 'Dell ups 5 Rack/Tower 1500W LV Serial port (mge-shut)'), ('mge-shut$Rack/Tower 1920W LV / HV', 'Dell ups 5 Rack/Tower 1920W LV / HV Serial port (mge-shut)'), ('mge-shut$Rack/Tower 2300W LV', 'Dell ups 5 Rack/Tower 2300W LV Serial port (mge-shut)'), ('mge-shut$Rack/Tower 2700W LV / HV', 'Dell ups 5 Rack/Tower 2700W LV / HV Serial port (mge-shut)'), ('mge-shut$Short Depth Rack 2700W Online LV / HV', 'Dell ups 5 Short Depth Rack 2700W Online LV / HV High Efficiency, Serial port (mge-shut)'), ('mge-shut$Rack 3750W High Efficiency Online HV', 'Dell ups 5 Rack 3750W High Efficiency Online HV Serial port (mge-shut)'), ('mge-shut$Rack 4200W High Efficiency Online HV', 'Dell ups 5 Rack 4200W High Efficiency Online HV Serial port (mge-shut)'), ('mge-shut$Rack 5600W HV', 'Dell ups 5 Rack 5600W HV Serial port (mge-shut)'), ('usbhid-ups$Tower 500W LV / HV', 'Dell ups 5 Tower 500W LV / HV USB port (usbhid-ups)'), ('usbhid-ups$Rack/Tower 1000W LV / HV', 'Dell ups 5 Rack/Tower 1000W LV / HV USB port (usbhid-ups)'), ('usbhid-ups$Rack/Tower 1500W LV', 'Dell ups 5 Rack/Tower 1500W LV USB port (usbhid-ups)'), ('usbhid-ups$Rack/Tower 1920W LV / HV', 'Dell ups 5 Rack/Tower 1920W LV / HV USB port (usbhid-ups)'), ('usbhid-ups$Rack/Tower 2300W LV', 'Dell ups 5 Rack/Tower 2300W LV USB port (usbhid-ups)'), ('usbhid-ups$Rack/Tower 2700W LV / HV', 'Dell ups 5 Rack/Tower 2700W LV / HV USB port (usbhid-ups)'), ('usbhid-ups$Short Depth Rack 2700W Online LV / HV', 'Dell ups 5 Short Depth Rack 2700W Online LV / HV High Efficiency, USB port (usbhid-ups)'), ('usbhid-ups$Rack 3750W High Efficiency Online HV', 'Dell ups 5 Rack 3750W High Efficiency Online HV USB port (usbhid-ups)'), ('usbhid-ups$Rack 4200W High Efficiency Online HV', 'Dell ups 5 Rack 4200W High Efficiency Online HV USB port (usbhid-ups)'), ('usbhid-ups$Rack 5600W HV', 'Dell ups 5 Rack 5600W HV USB port (usbhid-ups)'), ('snmp-ups$Various (SNMP mode)', 'Dell ups 5 Various (SNMP mode) UPS Network Management Card  (snmp-ups)'), ('netxml-ups$Various (XML/HTTP mode)', 'Dell ups 5 Various (XML/HTTP mode) UPS Network Management Card  (netxml-ups)'), ('belkin$GES602N', 'Delta ups 1 GES602N  (belkin)'), ('genericups upstype=15$PowerRite Pro II', 'Deltec ups 1 PowerRite Pro II  (genericups upstype=15)'), ('upscode2$PRM 450/700/1000/1500', 'Deltec ups 4 PRM 450/700/1000/1500  (upscode2)'), ('powerman-pdu$LPC, EPCR2, DIN', 'Digital Loggers pdu 1 LPC, EPCR2, DIN 8 outlets (powerman-pdu)'), ('richcomm_usb$DN-170014', 'Digitus ups 1 DN-170014 USB (richcomm_usb)'), ('blazer_ser$DN-170020', 'Digitus ups 2 DN-170020  (blazer_ser)'), ('blazer_ser$UPS1700D', 'Dynamix ups 2 UPS1700D  (blazer_ser)'), ('blazer_ser$UPS-650VA', 'Dynamix ups 2 UPS-650VA  (blazer_ser)'), ('blazer_usb langid_fix=0x0409$650VA/1000VA', 'Dynamix ups 2 650VA/1000VA USB (blazer_usb langid_fix=0x0409)'), ('genericups upstype=7$975AVR', 'Dynex ups 1 975AVR  (genericups upstype=7)'), ('usbhid-ups$DX-800U', 'Dynex ups 2 DX-800U USB (usbhid-ups)'), ('usbhid-ups$3S', 'Eaton ups 5 3S  (usbhid-ups)'), ('usbhid-ups$Protection Station 500/650/800 VA', 'Eaton ups 5 Protection Station 500/650/800 VA USB (usbhid-ups)'), ('usbhid-ups$Ellipse ECO 650/800/1200/1600 VA', 'Eaton ups 5 Ellipse ECO 650/800/1200/1600 VA USB (usbhid-ups)'), ('usbhid-ups$Ellipse ASR USBS 600/750/1000/1500 VA', 'Eaton ups 5 Ellipse ASR USBS 600/750/1000/1500 VA USB cable (usbhid-ups)'), ('usbhid-ups$Ellipse MAX USBS 600/850/1100/1500 VA', 'Eaton ups 5 Ellipse MAX USBS 600/850/1100/1500 VA USB cable (usbhid-ups)'), ('usbhid-ups$Evolution 650/850/1150/1550/2000 VA', 'Eaton ups 5 Evolution 650/850/1150/1550/2000 VA USB port (usbhid-ups)'), ('usbhid-ups$Evolution S 1250/1750/2500/3000 VA', 'Eaton ups 5 Evolution S 1250/1750/2500/3000 VA USB port (usbhid-ups)'), ('usbhid-ups$EX 700/1000/1500 VA', 'Eaton ups 5 EX 700/1000/1500 VA USB port (usbhid-ups)'), ('usbhid-ups$EX 2200/3000/3000 XL VA', 'Eaton ups 5 EX 2200/3000/3000 XL VA USB port (usbhid-ups)'), ('usbhid-ups$EX 1000 RT2U / 1500 RT2U', 'Eaton ups 5 EX 1000 RT2U / 1500 RT2U USB port (usbhid-ups)'), ('usbhid-ups$MX 5/8/10/15/20 kVA', 'Eaton ups 5 MX 5/8/10/15/20 kVA USB port (usbhid-ups)'), ('usbhid-ups$5 PX', 'Eaton ups 5 5 PX USB port (usbhid-ups)'), ('usbhid-ups$Nova AVR 625/1250', 'Eaton ups 5 Nova AVR 625/1250 USB (usbhid-ups)'), ('usbhid-ups$5S', 'Eaton ups 5 5S USB port (usbhid-ups)'), ('usbhid-ups$5SC', 'Eaton ups 5 5SC USB port (usbhid-ups)'), ('usbhid-ups$5P', 'Eaton ups 5 5P USB port (usbhid-ups)'), ('usbhid-ups$9SX', 'Eaton ups 5 9SX USB port (usbhid-ups)'), ('mge-shut or oldmge-shut$Ellipse ASR USBS 600/750/1000/1500 VA', 'Eaton ups 5 Ellipse ASR USBS 600/750/1000/1500 VA Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse MAX USBS 600/850/1100/1500 VA', 'Eaton ups 5 Ellipse MAX USBS 600/850/1100/1500 VA Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution 650/850/1150/1550/2000 VA', 'Eaton ups 5 Evolution 650/850/1150/1550/2000 VA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution S 1250/1750/2500/3000 VA', 'Eaton ups 5 Evolution S 1250/1750/2500/3000 VA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$EX 700/1000/1500 VA', 'Eaton ups 5 EX 700/1000/1500 VA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$EX 2200/3000/3000 XL VA', 'Eaton ups 5 EX 2200/3000/3000 XL VA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$EX 1000 RT2U / 1500 RT2U', 'Eaton ups 5 EX 1000 RT2U / 1500 RT2U Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$MX 5/8/10/15/20 kVA', 'Eaton ups 5 MX 5/8/10/15/20 kVA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$5 PX', 'Eaton ups 5 5 PX Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$EX RT 1:1 7/11 kVA', 'Eaton ups 5 EX RT 1:1 7/11 kVA  (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$EX RT 3:1 5/7/11 kVA', 'Eaton ups 5 EX RT 3:1 5/7/11 kVA  (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$5SC', 'Eaton ups 5 5SC Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$5P', 'Eaton ups 5 5P Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$9SX', 'Eaton ups 5 9SX Serial port (mge-shut or oldmge-shut)'), ('netxml-ups$EX RT (XML/HTTP)', 'Eaton ups 5 EX RT (XML/HTTP) NMC Transverse card (ref 66074) (netxml-ups)'), ('snmp-ups$EX RT (SNMP)', 'Eaton ups 5 EX RT (SNMP) NMC Transverse card (ref 66074) (snmp-ups)'), ('blazer_usb$E Series NV UPS 400-2000 VA', 'Eaton ups 5 E Series NV UPS 400-2000 VA  (blazer_usb)'), ('mge-utalk$E Series DX UPS 1-20 kVA', 'Eaton ups 5 E Series DX UPS 1-20 kVA  (mge-utalk)'), ('upscode2$NetUPS SE 450/700/1000/1500', 'Eaton ups 4 NetUPS SE 450/700/1000/1500  (upscode2)'), ('snmp-ups$BladeUPS (SNMP)', 'Eaton ups 5 BladeUPS (SNMP) ConnectUPS Web/SNMP Card (snmp-ups)'), ('netxml-ups$various models (XML/HTTP mode)', 'Eaton ups 5 various models (XML/HTTP mode) NMC Minislot (ref 66102) (netxml-ups)'), ('snmp-ups$various models (SNMP mode)', 'Eaton ups 5 various models (SNMP mode) NMC Minislot (ref 66102) (snmp-ups)'), ('netxml-ups$various models (XML/HTTP mode)', 'Eaton ups 5 various models (XML/HTTP mode) SNMP/Web Minislot card (ref 66244) (netxml-ups)'), ('snmp-ups$various models (SNMP mode)', 'Eaton ups 5 various models (SNMP mode) SNMP/Web Minislot card (ref 66244) (snmp-ups)'), ('mge-shut or mge-utalk$various models (serial mode)', 'Eaton ups 5 various models (serial mode) Management Card Contact (ref 66104) (mge-shut or mge-utalk)'), ('snmp-ups$ePDU Managed', 'Eaton pdu 5 ePDU Managed  (snmp-ups)'), ('snmp-ups$ePDU Switched', 'Eaton pdu 5 ePDU Switched  (snmp-ups)'), ('snmp-ups or netxml-ups$ePDU Monitored', 'Eaton pdu 5 ePDU Monitored  (snmp-ups or netxml-ups)'), ('bcmxcp_usb$Powerware 3105', 'Eaton ups 5 Powerware 3105 USB (bcmxcp_usb)'), ('bcmxcp or usbhid-ups$Powerware 9130', 'Eaton ups 5 Powerware 9130  (bcmxcp or usbhid-ups)'), ('bcmxcp or usbhid-ups$Powerware 9140', 'Eaton ups 5 Powerware 9140  (bcmxcp or usbhid-ups)'), ('usbhid-ups$Powerware 5130', 'Eaton ups 5 Powerware 5130  (usbhid-ups)'), ('bcmxcp$9395', 'Eaton ups 5 9395 Serial port (bcmxcp)'), ('snmp-ups$Best Ferrups', 'Eaton ups 5 Best Ferrups older ConnectUPS (snmp-ups)'), ('bcmxcp$ConnectUPS X / BD / E Slot', 'Eaton ups 5 ConnectUPS X / BD / E Slot Serial Pass-through mode (bcmxcp)'), ('snmp-ups$ConnectUPS X / BD / E Slot', 'Eaton ups 5 ConnectUPS X / BD / E Slot Network port (snmp-ups)'), ('genericups upstype=7$Management Card Contact', 'Eaton ups 5 Management Card Contact Config 3 - Cable 66033 (genericups upstype=7)'), ('blazer_ser$MI/MT/MH', 'Effekta ups 2 MI/MT/MH 2502 cable (blazer_ser)'), ('blazer_ser$RM2000MH', 'Effekta ups 2 RM2000MH  (blazer_ser)'), ('blazer_ser$(various)', 'Energy Sistem ups 2 (various)  (blazer_ser)'), ('genericups upstype=7$mini+UPS', 'ETA ups 1 mini+UPS WinNT/Upsoft cable (genericups upstype=7)'), ('etapro$mini+UPS PRO', 'ETA ups 1 mini+UPS PRO UPS Explorer cable (etapro)'), ('nutdrv_qx$EA200N 2000VA', 'EUROCASE ups 2 EA200N 2000VA USB (nutdrv_qx)'), ('everups$NET DPC series', 'EVER ups 1 NET DPC series Serial port (everups)'), ('everups$AP Pro series', 'EVER ups 1 AP Pro series Serial port (everups)'), ('safenet$625/1000', 'EVER ups 1 625/1000  (safenet)'), ('blazer_ser$POWERLINE RT 1-3kVA series', 'EVER ups 2 POWERLINE RT 1-3kVA series Serial port (blazer_ser)'), ('blazer_ser$POWERLINE RT 6-10kVA series', 'EVER ups 2 POWERLINE RT 6-10kVA series Serial port (blazer_ser)'), ('blazer_ser$POWERLINE 11 series', 'EVER ups 2 POWERLINE 11 series Serial port (blazer_ser)'), ('blazer_ser$POWERLINE 31 series', 'EVER ups 2 POWERLINE 31 series Serial port (blazer_ser)'), ('blazer_usb$DUO II Pro series', 'EVER ups 2 DUO II Pro series USB port (blazer_usb)'), ('blazer_usb$POWERLINE RT 1-3kVA series', 'EVER ups 2 POWERLINE RT 1-3kVA series USB port (blazer_usb)'), ('blazer_usb$POWERLINE RT 6-10kVA series', 'EVER ups 2 POWERLINE RT 6-10kVA series USB port (blazer_usb)'), ('genericups upstype=15$NetUPS SE', 'Exide ups 1 NetUPS SE  (genericups upstype=15)'), ('upscode2$NetUPS SE 450/700/1000/1500', 'Exide ups 4 NetUPS SE 450/700/1000/1500  (upscode2)'), ('safenet$PowerPal', 'Fenton Technologies ups 1 PowerPal P-series (safenet)'), ('blazer_ser$PowerPal', 'Fenton Technologies ups 5 PowerPal L-series (blazer_ser)'), ('blazer_ser$PowerOn', 'Fenton Technologies ups 5 PowerOn  (blazer_ser)'), ('blazer_ser$PowerPure', 'Fenton Technologies ups 5 PowerPure  (blazer_ser)'), ('safenet$L525/L625/L750', 'Fairstone ups 1 L525/L625/L750  (safenet)'), ('genericups upstype=6$Ares 700 and larger', 'Fideltronik ups 1 Ares 700 and larger  (genericups upstype=6)'), ('nutdrv_qx$LUPUS 500', 'Fideltronik ups 2 LUPUS 500 USB (nutdrv_qx)'), ('genericups upstype=19$Other Ares models', 'Fideltronik ups 1 Other Ares models  (genericups upstype=19)'), ('upscode2$PowerRite MAX', 'Fiskars ups 4 PowerRite MAX  (upscode2)'), ('upscode2$PowerServer 10', 'Fiskars ups 4 PowerServer 10  (upscode2)'), ('upscode2$PowerServer 30', 'Fiskars ups 4 PowerServer 30  (upscode2)'), ('upscode2$9200', 'Fiskars ups 4 9200 UPS Information Unit (upscode2)'), ('nutdrv_qx$FT-1000BS', 'Flight Technic & International (FTUPS) ups 2 FT-1000BS Serial (nutdrv_qx)'), ('nutdrv_qx$FT-1000BS', 'Flight Technic & International (FTUPS) ups 2 FT-1000BS USB (nutdrv_qx)'), ('nutdrv_qx$FT-1000BS(T)', 'Flight Technic & International (FTUPS) ups 2 FT-1000BS(T) Serial (nutdrv_qx)'), ('nutdrv_qx$FT-1000BS(T)', 'Flight Technic & International (FTUPS) ups 2 FT-1000BS(T) USB (nutdrv_qx)'), ('nutdrv_qx$Smart On Line UPS 1KVA', 'Flight Technic & International (FTUPS) ups 2 Smart On Line UPS 1KVA Serial (nutdrv_qx)'), ('nutdrv_qx$Smart On Line UPS 1KVA', 'Flight Technic & International (FTUPS) ups 2 Smart On Line UPS 1KVA USB (nutdrv_qx)'), ('nutdrv_qx$(various)', 'Flight Technic & International (FTUPS) ups 2 (various) Serial (nutdrv_qx)'), ('nutdrv_qx$(various)', 'Flight Technic & International (FTUPS) ups 2 (various) USB (nutdrv_qx)'), ('blazer_usb$SL-1001', 'Forza Power Technologies ups 2 SL-1001 USB (blazer_usb)'), ('blazer_usb$FX-1500LCD', 'Forza Power Technologies ups 2 FX-1500LCD USB (blazer_usb)'), ('blazer_usb$EP650', 'FSP ups 2 EP650 USB (blazer_usb)'), ('genericups upstype=22$All models with alarm interface', 'Gamatronic ups 5 All models with alarm interface  (genericups upstype=22)'), ('blazer_ser$G-SmartCompact 2000', 'Gamatronic ups 2 G-SmartCompact 2000  (blazer_ser)'), ('gamatronic$MP110/210', 'Gamatronic ups 5 MP110/210  (gamatronic)'), ('gamatronic$MS-T', 'Gamatronic ups 5 MS-T  (gamatronic)'), ('gamatronic$MS', 'Gamatronic ups 5 MS  (gamatronic)'), ('gamatronic$\xb5PS3/1', 'Gamatronic ups 5 \xb5PS3/1  (gamatronic)'), ('blazer_usb$EP Series', 'GE Digital Energy ups 2 EP Series  (blazer_usb)'), ('blazer_ser$GT Series 1000/1500/2000/3000 VA Rack/Tower', 'GE Digital Energy ups 2 GT Series 1000/1500/2000/3000 VA Rack/Tower UL-version (blazer_ser)'), ('usbhid-ups$GS1285U', 'Geek Squad ups 2 GS1285U USB (usbhid-ups)'), ('safenet$UPS625/UPS1000', 'Gemini ups 1 UPS625/UPS1000  (safenet)'), ('snmp-ups$PR-3000-HS', 'Grafenthal ups 2 PR-3000-HS SNMP/Web Minislot card (ref 149G0006) (snmp-ups)'), ('blazer_usb$ZP120N-1K / ZP120N-1KS / ZP120N-2K / ZP120N-2KS / ZP120N-3K / ZP120N-3KS', 'Gtec ups 2 ZP120N-1K / ZP120N-1KS / ZP120N-2K / ZP120N-2KS / ZP120N-3K / ZP120N-3KS  (blazer_usb)'), ('blazer_usb$ZP120N-6K / ZP120N-6KS / ZP120N-10K-11 / ZP120N-10KS-11', 'Gtec ups 2 ZP120N-6K / ZP120N-6KS / ZP120N-10K-11 / ZP120N-10KS-11  (blazer_usb)'), ('blazer_usb$ZP120N-10K-31-00 / ZP120N-10K-31-07 / ZP120N-10K-31-09 / ZP120N-10K-31-99 / ZP120N-20K', 'Gtec ups 2 ZP120N-10K-31-00 / ZP120N-10K-31-07 / ZP120N-10K-31-09 / ZP120N-10K-31-99 / ZP120N-20K USB port (blazer_usb)'), ('blazer_usb$AP160N-1K / AP160LCD-1K-KS / AP160N-2K / AP160LCD-2K-KS / AP160N-3K / AP160LCD-3K-KS / AP160N-6K-PDU / AP160N-10K-PDU', 'Gtec ups 2 AP160N-1K / AP160LCD-1K-KS / AP160N-2K / AP160LCD-2K-KS / AP160N-3K / AP160LCD-3K-KS / AP160N-6K-PDU / AP160N-10K-PDU USB port (blazer_usb)'), ('blazer_ser$ZP120N-10K-31-00 / ZP120N-10K-31-07 / ZP120N-10K-31-09 / ZP120N-10K-31-99 / ZP120N-20K', 'Gtec ups 2 ZP120N-10K-31-00 / ZP120N-10K-31-07 / ZP120N-10K-31-09 / ZP120N-10K-31-99 / ZP120N-20K Serial port (blazer_ser)'), ('blazer_ser$AP160N-1K / AP160LCD-1K-KS / AP160N-2K / AP160LCD-2K-KS / AP160N-3K / AP160LCD-3K-KS / AP160N-6K-PDU / AP160N-10K-PDU', 'Gtec ups 2 AP160N-1K / AP160LCD-1K-KS / AP160N-2K / AP160LCD-2K-KS / AP160N-3K / AP160LCD-3K-KS / AP160N-6K-PDU / AP160N-10K-PDU Serial port (blazer_ser)'), ('apcsmart$PowerTrust 2997A', 'HP ups 1 PowerTrust 2997A HP 5061-2575 cable (apcsmart)'), ('bcmxcp$T750 G2', 'HP ups 3 T750 G2 Serial port (bcmxcp)'), ('bcmxcp$T1000 G3', 'HP ups 3 T1000 G3 Serial port (bcmxcp)'), ('bcmxcp$T1500 G3', 'HP ups 3 T1500 G3 Serial port (bcmxcp)'), ('bcmxcp$R1500 G2', 'HP ups 3 R1500 G2 Serial port (bcmxcp)'), ('bcmxcp$R3000 XR', 'HP ups 4 R3000 XR  (bcmxcp)'), ('bcmxcp$R5500 XR', 'HP ups 4 R5500 XR  (bcmxcp)'), ('bcmxcp_usb$T500 / T750', 'HP ups 3 T500 / T750 older models, USB port (bcmxcp_usb)'), ('mge-shut or oldmge-shut$R/T3000', 'HP ups 3 R/T3000 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$R5000 / R7000', 'HP ups 3 R5000 / R7000 Serial port (mge-shut or oldmge-shut)'), ('usbhid-ups$T750 INTL', 'HP ups 3 T750 INTL  (usbhid-ups)'), ('usbhid-ups$T1000 INTL', 'HP ups 3 T1000 INTL  (usbhid-ups)'), ('usbhid-ups$T1500 INTL', 'HP ups 3 T1500 INTL  (usbhid-ups)'), ('usbhid-ups$T750 G2', 'HP ups 3 T750 G2 USB port (usbhid-ups)'), ('usbhid-ups$T1000 G3', 'HP ups 3 T1000 G3 USB port (usbhid-ups)'), ('usbhid-ups$T1500 G3', 'HP ups 3 T1500 G3 USB port (usbhid-ups)'), ('usbhid-ups$R1500 G2 INTL', 'HP ups 3 R1500 G2 INTL USB port (usbhid-ups)'), ('usbhid-ups$R/T 2200 G2', 'HP ups 3 R/T 2200 G2  (usbhid-ups)'), ('usbhid-ups$R/T3000', 'HP ups 3 R/T3000 USB port (usbhid-ups)'), ('usbhid-ups$R5000 / R7000', 'HP ups 3 R5000 / R7000 USB port (usbhid-ups)'), ('snmp-ups$Various (SNMP mode)', 'HP ups 4 Various (SNMP mode) HP UPS Management Module  (snmp-ups)'), ('powerman-pdu$HP3488 Switch/Control Unit', 'HP pdu 1 HP3488 Switch/Control Unit  (powerman-pdu)'), ('powerman-pdu$Blade Center Management Module', 'IBM pdu 1 Blade Center Management Module 15 outlets (powerman-pdu)'), ('powerman-pdu$8064 Ethernet Relay Interface', 'ICS pdu 1 8064 Ethernet Relay Interface 16 outlets (powerman-pdu)'), ('usbhid-ups$iBox UPS', 'iDowell ups 2 iBox UPS  (usbhid-ups)'), ('blazer_ser$Monolith 1000LT', 'INELT ups 2 Monolith 1000LT  (blazer_ser)'), ('blazer_ser$Monolith 3000RT', 'INELT ups 2 Monolith 3000RT  (blazer_ser)'), ('powercom$GUARD', 'Inform ups 1 GUARD Line Interactive AP model (powercom)'), ('blazer_ser$Guard S 1500AP', 'Inform ups 2 Guard S 1500AP  (blazer_ser)'), ('blazer_ser$Informer Compact 1000-2000-3000 VA', 'Inform ups 2 Informer Compact 1000-2000-3000 VA  (blazer_ser)'), ('blazer_ser$Sinus SS 210', 'Inform ups 2 Sinus SS 210  (blazer_ser)'), ('blazer_ser$iPEL 350', 'Infosec ups 2 iPEL 350  (blazer_ser)'), ('blazer_ser$iPEL 500', 'Infosec ups 2 iPEL 500  (blazer_ser)'), ('blazer_ser$iPEL 750', 'Infosec ups 2 iPEL 750  (blazer_ser)'), ('blazer_ser$iPEL 1000', 'Infosec ups 2 iPEL 1000  (blazer_ser)'), ('blazer_ser$500XP', 'Infosec ups 2 500XP  (blazer_ser)'), ('blazer_usb$X2, X3, X4, E2, E3, E4', 'Infosec ups 2 X2, X3, X4, E2, E3, E4 USB (blazer_usb)'), ('blazer_usb$XP 500', 'Infosec ups 2 XP 500 USB (blazer_usb)'), ('blazer_ser$XP 1000', 'Infosec ups 2 XP 1000  (blazer_ser)'), ('blazer_usb$Mini Energy ME 800', 'IPAR ups 2 Mini Energy ME 800  (blazer_usb)'), ('powerman-pdu$', 'IPMI pdu 1   (powerman-pdu)'), ('blazer_ser$Back Power Pro 400/500/600/700/800', 'Ippon ups 2 Back Power Pro 400/500/600/700/800  (blazer_ser)'), ('blazer_usb$Back Power Pro 400/500/600/700/800', 'Ippon ups 2 Back Power Pro 400/500/600/700/800 USB (blazer_usb)'), ('blazer_ser$Back Comfo Pro 600/800', 'Ippon ups 2 Back Comfo Pro 600/800  (blazer_ser)'), ('blazer_usb$Back Comfo Pro 600/800', 'Ippon ups 2 Back Comfo Pro 600/800 USB (blazer_usb)'), ('blazer_ser$Smart Power Pro 1000/1400/2000', 'Ippon ups 2 Smart Power Pro 1000/1400/2000  (blazer_ser)'), ('blazer_usb$Smart Power Pro 1000/1400/2000', 'Ippon ups 2 Smart Power Pro 1000/1400/2000 USB (blazer_usb)'), ('blazer_ser$Smart Winner 750/1000/1500/2000/3000', 'Ippon ups 2 Smart Winner 750/1000/1500/2000/3000  (blazer_ser)'), ('blazer_usb$Smart Winner 750/1000/1500/2000/3000', 'Ippon ups 2 Smart Winner 750/1000/1500/2000/3000 USB (blazer_usb)'), ('blazer_ser$(various)', 'Ippon ups 2 (various)  (blazer_ser)'), ('blazer_usb$(various)', 'Ippon ups 2 (various) USB (blazer_usb)'), ('blazer_usb$INNOVA RT 1K/1.5K/2K/3K', 'Ippon ups 2 INNOVA RT 1K/1.5K/2K/3K  (blazer_usb)'), ('ivtscd$SCD series', 'IVT scd 1 SCD series  (ivtscd)'), ('genericups upstype=4$Jasuny USPS', 'Jageson Technology ups 1 Jasuny USPS  (genericups upstype=4)'), ('blazer_usb$JW-UPSLC02', 'JAWAN ups 2 JW-UPSLC02 USB (blazer_usb)'), ('nutdrv_atcl_usb$800 VA', 'Kanji ups 1 800 VA USB (nutdrv_atcl_usb)'), ('blazer_ser$1200D/D Series', 'Kebo ups 2 1200D/D Series  (blazer_ser)'), ('blazer_usb$BLACK NOVA 1K/2K/3K/6K/10K/20K TOWER', 'KOLFF ups 2 BLACK NOVA 1K/2K/3K/6K/10K/20K TOWER  (blazer_usb)'), ('blazer_usb$BLACK NOVA 1K/2K/3K/6K/10K/20K XL TOWER', 'KOLFF ups 2 BLACK NOVA 1K/2K/3K/6K/10K/20K XL TOWER  (blazer_usb)'), ('blazer_usb$BLACK NOVA 1K/1.5K/2K/3K/6K/10K RACK', 'KOLFF ups 2 BLACK NOVA 1K/1.5K/2K/3K/6K/10K RACK  (blazer_usb)'), ('blazer_usb$BLACK NOVA 1K/1.5K/2K/3K/6K/10K XL RACK', 'KOLFF ups 2 BLACK NOVA 1K/1.5K/2K/3K/6K/10K XL RACK  (blazer_usb)'), ('blazer_usb$UP-D1200VA', 'Krauler ups 2 UP-D1200VA USB (blazer_usb)'), ('blazer_usb$UP-M500VA', 'Krauler ups 2 UP-M500VA USB (blazer_usb)'), ('blazer_usb$New Orion 800VA', 'Lacerda ups 2 New Orion 800VA USB (blazer_usb)'), ('blazer_usb langid_fix=0x4095$UPS-1200D', 'LDLC ups 2 UPS-1200D  (blazer_usb langid_fix=0x4095)'), ('blazer_ser$MD-800E', 'Lestar ups 2 MD-800E  (blazer_ser)'), ('blazer_ser or bestups$X-Power Tigra 1kVA', 'Lexis ups 2 X-Power Tigra 1kVA  (blazer_ser or bestups)'), ('blazer_ser$ITON 600VA', 'Liebert ups 2 ITON 600VA  (blazer_ser)'), ('liebert$UPStation GXT2', 'Liebert ups 5 UPStation GXT2 contact-closure cable (liebert)'), ('liebert-esp2$GXT2-3000RT230', 'Liebert ups 1 GXT2-3000RT230  (liebert-esp2)'), ('usbhid-ups$PowerSure Personal XT', 'Liebert ups 2 PowerSure Personal XT USB (usbhid-ups)'), ('usbhid-ups$PowerSure PSA', 'Liebert ups 2 PowerSure PSA USB (usbhid-ups)'), ('usbhid-ups$PowerSure PSI 1440', 'Liebert ups 2 PowerSure PSI 1440 USB (usbhid-ups)'), ('powerman-pdu$Icebox', 'LNXI pdu 1 Icebox 10 outlets (powerman-pdu)'), ('blazer_usb$CTB-1200', 'Lyonn ups 2 CTB-1200  (blazer_usb)'), ('masterguard$(various)', 'Masterguard ups 1 (various)  (masterguard)'), ('blazer_ser$UPS 600 VA', 'Maxxtro ups 2 UPS 600 VA serial port (blazer_ser)'), ('nutdrv_qx$ME-1000-WTU', 'Mecer ups 2 ME-1000-WTU USB (nutdrv_qx)'), ('blazer_ser$ME-2000', 'Mecer ups 2 ME-2000  (blazer_ser)'), ('metasys$HF Line', 'Meta System ups 1 HF Line 1..4 boards (metasys)'), ('metasys$HF Line \\/2', 'Meta System ups 1 HF Line \\/2 5..8 boards (metasys)'), ('metasys$HF Millennium 810', 'Meta System ups 1 HF Millennium 810  (metasys)'), ('metasys$HF Millennium 820', 'Meta System ups 1 HF Millennium 820  (metasys)'), ('metasys$HF TOP Line 910', 'Meta System ups 1 HF TOP Line 910  (metasys)'), ('metasys$HF TOP Line 920', 'Meta System ups 1 HF TOP Line 920  (metasys)'), ('metasys$HF TOP Line 930', 'Meta System ups 1 HF TOP Line 930  (metasys)'), ('metasys$HF TOP Line 940', 'Meta System ups 1 HF TOP Line 940  (metasys)'), ('metasys$HF TOP Line 950', 'Meta System ups 1 HF TOP Line 950  (metasys)'), ('metasys$HF TOP Line 960', 'Meta System ups 1 HF TOP Line 960  (metasys)'), ('metasys$HF TOP Line 970', 'Meta System ups 1 HF TOP Line 970  (metasys)'), ('metasys$HF TOP Line 980', 'Meta System ups 1 HF TOP Line 980  (metasys)'), ('metasys$ECO Network 750', 'Meta System ups 1 ECO Network 750  (metasys)'), ('metasys$ECO Network 1000', 'Meta System ups 1 ECO Network 1000  (metasys)'), ('metasys$ECO Network 1050', 'Meta System ups 1 ECO Network 1050  (metasys)'), ('metasys$ECO Network 1500', 'Meta System ups 1 ECO Network 1500  (metasys)'), ('metasys$ECO Network 1800', 'Meta System ups 1 ECO Network 1800  (metasys)'), ('metasys$ECO Network 2000', 'Meta System ups 1 ECO Network 2000  (metasys)'), ('metasys$ECO Network 2100', 'Meta System ups 1 ECO Network 2100  (metasys)'), ('metasys$ECO Network 2500', 'Meta System ups 1 ECO Network 2500  (metasys)'), ('metasys$ECO Network 3000', 'Meta System ups 1 ECO Network 3000  (metasys)'), ('metasys$ECO 305', 'Meta System ups 1 ECO 305  (metasys)'), ('metasys$ECO 308', 'Meta System ups 1 ECO 308  (metasys)'), ('metasys$ECO 311', 'Meta System ups 1 ECO 311  (metasys)'), ('metasys$ECO 511', 'Meta System ups 1 ECO 511  (metasys)'), ('metasys$ECO 516', 'Meta System ups 1 ECO 516  (metasys)'), ('metasys$ECO 519', 'Meta System ups 1 ECO 519  (metasys)'), ('metasys$ECO 522', 'Meta System ups 1 ECO 522  (metasys)'), ('metasys$ally HF 800', 'Meta System ups 1 ally HF 800  (metasys)'), ('metasys$ally HF 1000', 'Meta System ups 1 ally HF 1000  (metasys)'), ('metasys$ally HF 1250', 'Meta System ups 1 ally HF 1250  (metasys)'), ('metasys$ally HF 1600', 'Meta System ups 1 ally HF 1600  (metasys)'), ('metasys$ally HF 2000', 'Meta System ups 1 ally HF 2000  (metasys)'), ('metasys$ally HF 2500', 'Meta System ups 1 ally HF 2500  (metasys)'), ('metasys$Megaline 1250', 'Meta System ups 1 Megaline 1250  (metasys)'), ('metasys$Megaline 2500', 'Meta System ups 1 Megaline 2500  (metasys)'), ('metasys$Megaline 3750', 'Meta System ups 1 Megaline 3750  (metasys)'), ('metasys$Megaline 5000', 'Meta System ups 1 Megaline 5000  (metasys)'), ('metasys$Megaline 6250', 'Meta System ups 1 Megaline 6250  (metasys)'), ('metasys$Megaline 7500', 'Meta System ups 1 Megaline 7500  (metasys)'), ('metasys$Megaline 8750', 'Meta System ups 1 Megaline 8750  (metasys)'), ('metasys$Megaline 10000', 'Meta System ups 1 Megaline 10000  (metasys)'), ('usbhid-ups$Protection Center 500/675 VA', 'MGE Office Protection Systems ups 5 Protection Center 500/675 VA USB (usbhid-ups)'), ('usbhid-ups$Protection Station 500/650/800 VA', 'MGE Office Protection Systems ups 5 Protection Station 500/650/800 VA USB (usbhid-ups)'), ('usbhid-ups$Ellipse ASR USBS 600/750/1000/1500 VA', 'MGE Office Protection Systems ups 5 Ellipse ASR USBS 600/750/1000/1500 VA USB cable (usbhid-ups)'), ('usbhid-ups$Ellipse MAX USBS 600/850/1100/1500 VA', 'MGE Office Protection Systems ups 5 Ellipse MAX USBS 600/850/1100/1500 VA USB cable (usbhid-ups)'), ('usbhid-ups$Evolution 650/850/1150/1550/2000 VA', 'MGE Office Protection Systems ups 5 Evolution 650/850/1150/1550/2000 VA USB port (usbhid-ups)'), ('usbhid-ups$Evolution S 1250/1750/2500/3000 VA', 'MGE Office Protection Systems ups 5 Evolution S 1250/1750/2500/3000 VA USB port (usbhid-ups)'), ('usbhid-ups$Pulsar 700/1000/1500 VA', 'MGE Office Protection Systems ups 5 Pulsar 700/1000/1500 VA USB port (usbhid-ups)'), ('usbhid-ups$Pulsar M 2200/3000 VA', 'MGE Office Protection Systems ups 5 Pulsar M 2200/3000 VA USB port (usbhid-ups)'), ('usbhid-ups$Pulsar MX 5/8/10/15/20 kVA', 'MGE Office Protection Systems ups 5 Pulsar MX 5/8/10/15/20 kVA USB port (usbhid-ups)'), ('mge-shut or oldmge-shut$Ellipse ASR USBS 600/750/1000/1500 VA', 'MGE Office Protection Systems ups 5 Ellipse ASR USBS 600/750/1000/1500 VA Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse MAX USBS 600/850/1100/1500 VA', 'MGE Office Protection Systems ups 5 Ellipse MAX USBS 600/850/1100/1500 VA Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution 650/850/1150/1550/2000 VA', 'MGE Office Protection Systems ups 5 Evolution 650/850/1150/1550/2000 VA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution S 1250/1750/2500/3000 VA', 'MGE Office Protection Systems ups 5 Evolution S 1250/1750/2500/3000 VA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar 700/1000/1500 VA', 'MGE Office Protection Systems ups 5 Pulsar 700/1000/1500 VA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar M 2200/3000 VA', 'MGE Office Protection Systems ups 5 Pulsar M 2200/3000 VA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar MX 5/8/10/15/20 kVA', 'MGE Office Protection Systems ups 5 Pulsar MX 5/8/10/15/20 kVA Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Comet EX RT 1:1 7/11 kVA', 'MGE Office Protection Systems ups 5 Comet EX RT 1:1 7/11 kVA  (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Comet EX RT 3:1 5/7/11 kVA', 'MGE Office Protection Systems ups 5 Comet EX RT 3:1 5/7/11 kVA  (mge-shut or oldmge-shut)'), ('netxml-ups$Comet EX RT (XML/HTTP)', 'MGE Office Protection Systems ups 5 Comet EX RT (XML/HTTP) NMC Transverse card (ref 66074) (netxml-ups)'), ('snmp-ups$Comet EX RT (SNMP)', 'MGE Office Protection Systems ups 5 Comet EX RT (SNMP) NMC Transverse card (ref 66074) (snmp-ups)'), ('netxml-ups$various models (XML/HTTP mode)', 'MGE Office Protection Systems ups 5 various models (XML/HTTP mode) NMC Minislot (Ref 66102) (netxml-ups)'), ('snmp-ups$various models (SNMP mode)', 'MGE Office Protection Systems ups 5 various models (SNMP mode) NMC Minislot (Ref 66102) (snmp-ups)'), ('netxml-ups$various models (XML/HTTP mode)', 'MGE Office Protection Systems ups 5 various models (XML/HTTP mode) SNMP/Web Minislot card (ref 66244) (netxml-ups)'), ('snmp-ups$various models (SNMP mode)', 'MGE Office Protection Systems ups 5 various models (SNMP mode) SNMP/Web Minislot card (ref 66244) (snmp-ups)'), ('usbhid-ups$Comet EX RT', 'MGE UPS SYSTEMS ups 5 Comet EX RT USB (usbhid-ups)'), ('usbhid-ups$Comet EX RT 3:1', 'MGE UPS SYSTEMS ups 5 Comet EX RT 3:1 USB (usbhid-ups)'), ('usbhid-ups$Protection Center 420', 'MGE UPS SYSTEMS ups 5 Protection Center 420 USB (usbhid-ups)'), ('usbhid-ups$Protection Center 500', 'MGE UPS SYSTEMS ups 5 Protection Center 500 USB (usbhid-ups)'), ('usbhid-ups$Protection Center 675', 'MGE UPS SYSTEMS ups 5 Protection Center 675 USB (usbhid-ups)'), ('usbhid-ups$NOVA AVR 600 USB', 'MGE UPS SYSTEMS ups 5 NOVA AVR 600 USB USB (usbhid-ups)'), ('usbhid-ups$NOVA AVR 1100 USB', 'MGE UPS SYSTEMS ups 5 NOVA AVR 1100 USB USB (usbhid-ups)'), ('usbhid-ups$Pulsar Ellipse USBS', 'MGE UPS SYSTEMS ups 5 Pulsar Ellipse USBS USB (usbhid-ups)'), ('usbhid-ups$Pulsar Ellipse USB', 'MGE UPS SYSTEMS ups 5 Pulsar Ellipse USB USB (usbhid-ups)'), ('usbhid-ups$Pulsar Ellipse Premium USBS', 'MGE UPS SYSTEMS ups 5 Pulsar Ellipse Premium USBS USB (usbhid-ups)'), ('usbhid-ups$Pulsar Ellipse Premium USB', 'MGE UPS SYSTEMS ups 5 Pulsar Ellipse Premium USB USB (usbhid-ups)'), ('usbhid-ups$Ellipse Office 600', 'MGE UPS SYSTEMS ups 5 Ellipse Office 600 USB (usbhid-ups)'), ('usbhid-ups$Ellipse Office 750', 'MGE UPS SYSTEMS ups 5 Ellipse Office 750 USB (usbhid-ups)'), ('usbhid-ups$Ellipse Office 1000', 'MGE UPS SYSTEMS ups 5 Ellipse Office 1000 USB (usbhid-ups)'), ('usbhid-ups$Ellipse Office 1500', 'MGE UPS SYSTEMS ups 5 Ellipse Office 1500 USB (usbhid-ups)'), ('usbhid-ups$Ellipse MAX 600', 'MGE UPS SYSTEMS ups 5 Ellipse MAX 600 USB (usbhid-ups)'), ('usbhid-ups$Ellipse MAX 850', 'MGE UPS SYSTEMS ups 5 Ellipse MAX 850 USB (usbhid-ups)'), ('usbhid-ups$Ellipse MAX 1100', 'MGE UPS SYSTEMS ups 5 Ellipse MAX 1100 USB (usbhid-ups)'), ('usbhid-ups$Ellipse MAX 1500', 'MGE UPS SYSTEMS ups 5 Ellipse MAX 1500 USB (usbhid-ups)'), ('usbhid-ups$Pulsar Evolution', 'MGE UPS SYSTEMS ups 5 Pulsar Evolution USB (usbhid-ups)'), ('usbhid-ups$Evolution 650', 'MGE UPS SYSTEMS ups 5 Evolution 650 USB (usbhid-ups)'), ('usbhid-ups$Evolution 850', 'MGE UPS SYSTEMS ups 5 Evolution 850 USB (usbhid-ups)'), ('usbhid-ups$Evolution 1150', 'MGE UPS SYSTEMS ups 5 Evolution 1150 USB (usbhid-ups)'), ('usbhid-ups$Evolution S 1250', 'MGE UPS SYSTEMS ups 5 Evolution S 1250 USB (usbhid-ups)'), ('usbhid-ups$Evolution 1550', 'MGE UPS SYSTEMS ups 5 Evolution 1550 USB (usbhid-ups)'), ('usbhid-ups$Evolution S 1750', 'MGE UPS SYSTEMS ups 5 Evolution S 1750 USB (usbhid-ups)'), ('usbhid-ups$Evolution 2000', 'MGE UPS SYSTEMS ups 5 Evolution 2000 USB (usbhid-ups)'), ('usbhid-ups$Evolution S 2500', 'MGE UPS SYSTEMS ups 5 Evolution S 2500 USB (usbhid-ups)'), ('usbhid-ups$Evolution S 3000', 'MGE UPS SYSTEMS ups 5 Evolution S 3000 USB (usbhid-ups)'), ('usbhid-ups$Pulsar M 2200', 'MGE UPS SYSTEMS ups 5 Pulsar M 2200 USB (usbhid-ups)'), ('usbhid-ups$Pulsar M 3000', 'MGE UPS SYSTEMS ups 5 Pulsar M 3000 USB (usbhid-ups)'), ('usbhid-ups$Pulsar M 3000 XL', 'MGE UPS SYSTEMS ups 5 Pulsar M 3000 XL USB (usbhid-ups)'), ('usbhid-ups$Pulsar 700', 'MGE UPS SYSTEMS ups 5 Pulsar 700 USB (usbhid-ups)'), ('usbhid-ups$Pulsar 1000', 'MGE UPS SYSTEMS ups 5 Pulsar 1000 USB (usbhid-ups)'), ('usbhid-ups$Pulsar 1500', 'MGE UPS SYSTEMS ups 5 Pulsar 1500 USB (usbhid-ups)'), ('usbhid-ups$Pulsar 1000 RT2U', 'MGE UPS SYSTEMS ups 5 Pulsar 1000 RT2U USB (usbhid-ups)'), ('usbhid-ups$Pulsar 1500 RT2U', 'MGE UPS SYSTEMS ups 5 Pulsar 1500 RT2U USB (usbhid-ups)'), ('usbhid-ups$Pulsar MX 4000 RT', 'MGE UPS SYSTEMS ups 5 Pulsar MX 4000 RT USB (usbhid-ups)'), ('usbhid-ups$Pulsar MX 5000 RT', 'MGE UPS SYSTEMS ups 5 Pulsar MX 5000 RT USB (usbhid-ups)'), ('usbhid-ups$Comet / Galaxy (USB)', 'MGE UPS SYSTEMS ups 5 Comet / Galaxy (USB) USB Card (ref 66067) (usbhid-ups)'), ('mge-shut or oldmge-shut$NOVA AVR 600 Serial', 'MGE UPS SYSTEMS ups 5 NOVA AVR 600 Serial  (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$NOVA AVR 1100 Serial', 'MGE UPS SYSTEMS ups 5 NOVA AVR 1100 Serial  (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar Ellipse USBS', 'MGE UPS SYSTEMS ups 5 Pulsar Ellipse USBS Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar Ellipse S', 'MGE UPS SYSTEMS ups 5 Pulsar Ellipse S  (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar Ellipse Premium USBS', 'MGE UPS SYSTEMS ups 5 Pulsar Ellipse Premium USBS Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar Ellipse Premium S', 'MGE UPS SYSTEMS ups 5 Pulsar Ellipse Premium S  (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse Office 600', 'MGE UPS SYSTEMS ups 5 Ellipse Office 600 Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse Office 750', 'MGE UPS SYSTEMS ups 5 Ellipse Office 750 Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse Office 1000', 'MGE UPS SYSTEMS ups 5 Ellipse Office 1000 Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse Office 1500', 'MGE UPS SYSTEMS ups 5 Ellipse Office 1500 Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse MAX 600', 'MGE UPS SYSTEMS ups 5 Ellipse MAX 600 Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse MAX 850', 'MGE UPS SYSTEMS ups 5 Ellipse MAX 850 Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse MAX 1100', 'MGE UPS SYSTEMS ups 5 Ellipse MAX 1100 Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Ellipse MAX 1500', 'MGE UPS SYSTEMS ups 5 Ellipse MAX 1500 Serial cable (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar EXtreme C / EX RT', 'MGE UPS SYSTEMS ups 5 Pulsar EXtreme C / EX RT  (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Comet EX RT', 'MGE UPS SYSTEMS ups 5 Comet EX RT Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Comet EX RT 3:1', 'MGE UPS SYSTEMS ups 5 Comet EX RT 3:1 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar Esprit', 'MGE UPS SYSTEMS ups 5 Pulsar Esprit  (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution 650', 'MGE UPS SYSTEMS ups 5 Evolution 650 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution 850', 'MGE UPS SYSTEMS ups 5 Evolution 850 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution 1150', 'MGE UPS SYSTEMS ups 5 Evolution 1150 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution S 1250', 'MGE UPS SYSTEMS ups 5 Evolution S 1250 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution 1550', 'MGE UPS SYSTEMS ups 5 Evolution 1550 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution S 1750', 'MGE UPS SYSTEMS ups 5 Evolution S 1750 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution 2000', 'MGE UPS SYSTEMS ups 5 Evolution 2000 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution S 2500', 'MGE UPS SYSTEMS ups 5 Evolution S 2500 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Evolution S 3000', 'MGE UPS SYSTEMS ups 5 Evolution S 3000 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar M 2200', 'MGE UPS SYSTEMS ups 5 Pulsar M 2200 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar M 3000', 'MGE UPS SYSTEMS ups 5 Pulsar M 3000 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar M 3000 XL', 'MGE UPS SYSTEMS ups 5 Pulsar M 3000 XL Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar 700', 'MGE UPS SYSTEMS ups 5 Pulsar 700 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar 1000', 'MGE UPS SYSTEMS ups 5 Pulsar 1000 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar 1500', 'MGE UPS SYSTEMS ups 5 Pulsar 1500 Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar 1000 RT2U', 'MGE UPS SYSTEMS ups 5 Pulsar 1000 RT2U Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar 1500 RT2U', 'MGE UPS SYSTEMS ups 5 Pulsar 1500 RT2U Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar MX 4000 RT', 'MGE UPS SYSTEMS ups 5 Pulsar MX 4000 RT Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut$Pulsar MX 5000 RT', 'MGE UPS SYSTEMS ups 5 Pulsar MX 5000 RT Serial port (mge-shut or oldmge-shut)'), ('mge-shut or oldmge-shut or mge-utalk$Pulsar Evolution', 'MGE UPS SYSTEMS ups 5 Pulsar Evolution Serial port (mge-shut or oldmge-shut or mge-utalk)'), ('mge-shut or oldmge-shut or mge-utalk$Pulsar EXtreme C', 'MGE UPS SYSTEMS ups 5 Pulsar EXtreme C  (mge-shut or oldmge-shut or mge-utalk)'), ('mge-utalk$Pulsar ES+', 'MGE UPS SYSTEMS ups 5 Pulsar ES+  (mge-utalk)'), ('mge-utalk$Pulsar ESV+', 'MGE UPS SYSTEMS ups 5 Pulsar ESV+  (mge-utalk)'), ('mge-utalk$Pulsar SV', 'MGE UPS SYSTEMS ups 5 Pulsar SV  (mge-utalk)'), ('mge-utalk$Pulsar ESV', 'MGE UPS SYSTEMS ups 5 Pulsar ESV  (mge-utalk)'), ('mge-utalk$Pulsar EX', 'MGE UPS SYSTEMS ups 5 Pulsar EX  (mge-utalk)'), ('mge-utalk$Pulsar EXL', 'MGE UPS SYSTEMS ups 5 Pulsar EXL  (mge-utalk)'), ('mge-utalk$Pulsar PSX', 'MGE UPS SYSTEMS ups 5 Pulsar PSX  (mge-utalk)'), ('mge-utalk$Pulsar SX', 'MGE UPS SYSTEMS ups 5 Pulsar SX  (mge-utalk)'), ('mge-utalk$Pulsar EXtreme', 'MGE UPS SYSTEMS ups 5 Pulsar EXtreme  (mge-utalk)'), ('mge-utalk$Comet EXtreme', 'MGE UPS SYSTEMS ups 5 Comet EXtreme  (mge-utalk)'), ('mge-utalk$Comet / Galaxy (Serial)', 'MGE UPS SYSTEMS ups 5 Comet / Galaxy (Serial) Utalk Serial Card (ref 66060) (mge-utalk)'), ('mge-shut or oldmge-shut$Comet / Galaxy (Serial)', 'MGE UPS SYSTEMS ups 5 Comet / Galaxy (Serial) HID COM Serial Card (ref 66066) (mge-shut or oldmge-shut)'), ('snmp-ups$Pulsar / Comet / Galaxy (SNMP)', 'MGE UPS SYSTEMS ups 5 Pulsar / Comet / Galaxy (SNMP) SNMP/Web Transverse card (ref 66074) (snmp-ups)'), ('netxml-ups$various models (XML/HTTP mode)', 'MGE UPS SYSTEMS ups 5 various models (XML/HTTP mode) NMC Minislot (Ref 66102) (netxml-ups)'), ('snmp-ups$various models (SNMP mode)', 'MGE UPS SYSTEMS ups 5 various models (SNMP mode) NMC Minislot (Ref 66102) (snmp-ups)'), ('netxml-ups$Pulsar (XML/HTTP mode)', 'MGE UPS SYSTEMS ups 5 Pulsar (XML/HTTP mode) SNMP/Web Minislot card (ref 66244) (netxml-ups)'), ('snmp-ups$Pulsar (SNMP mode)', 'MGE UPS SYSTEMS ups 5 Pulsar (SNMP mode) SNMP/Web Minislot card (ref 66244) (snmp-ups)'), ('snmp-ups$Pulsar / Comet / Galaxy (SNMP)', 'MGE UPS SYSTEMS ups 5 Pulsar / Comet / Galaxy (SNMP) SNMP card (ref 66062) (snmp-ups)'), ('snmp-ups$Pulsar (SNMP)', 'MGE UPS SYSTEMS ups 5 Pulsar (SNMP) SNMP card (ref 66045) (snmp-ups)'), ('snmp-ups$UM-Link (SNMP)', 'MGE UPS SYSTEMS ups 5 UM-Link (SNMP) Not a UPS (ref 66850) (snmp-ups)'), ('powerpanel$B.Box BP 500', 'MicroDowell ups 1 B.Box BP 500  (powerpanel)'), ('powerpanel$B.Box BP 750', 'MicroDowell ups 1 B.Box BP 750  (powerpanel)'), ('powerpanel$B.Box BP 1000', 'MicroDowell ups 1 B.Box BP 1000  (powerpanel)'), ('powerpanel$B.Box BP 1500', 'MicroDowell ups 1 B.Box BP 1500  (powerpanel)'), ('genericups upstype=7$B.Box LP 500', 'MicroDowell ups 1 B.Box LP 500  (genericups upstype=7)'), ('microdowell$Enterprise B8', 'MicroDowell ups 5 Enterprise B8  (microdowell)'), ('microdowell$Enterprise B10', 'MicroDowell ups 5 Enterprise B10  (microdowell)'), ('microdowell$Enterprise N8', 'MicroDowell ups 5 Enterprise N8  (microdowell)'), ('microdowell$Enterprise N11', 'MicroDowell ups 5 Enterprise N11  (microdowell)'), ('microdowell$Enterprise N15', 'MicroDowell ups 5 Enterprise N15  (microdowell)'), ('microdowell$Enterprise N20', 'MicroDowell ups 5 Enterprise N20  (microdowell)'), ('microdowell$Enterprise N22', 'MicroDowell ups 5 Enterprise N22  (microdowell)'), ('microdowell$Enterprise N30', 'MicroDowell ups 5 Enterprise N30  (microdowell)'), ('microdowell$Enterprise N40', 'MicroDowell ups 5 Enterprise N40  (microdowell)'), ('microdowell$Enterprise N50', 'MicroDowell ups 5 Enterprise N50  (microdowell)'), ('microdowell$Enterprise N60', 'MicroDowell ups 5 Enterprise N60  (microdowell)'), ('microdowell$Enterprise HiBox ST', 'MicroDowell ups 5 Enterprise HiBox ST  (microdowell)'), ('blazer_usb$C-Lion Innova RT 2K/3K', 'Microline ups 2 C-Lion Innova RT 2K/3K  (blazer_usb)'), ('blazer_usb$C-Lion Innova RT 6K/10K (Parallel)', 'Microline ups 2 C-Lion Innova RT 6K/10K (Parallel)  (blazer_usb)'), ('blazer_usb$C-Lion Innova Tower 6K/10K', 'Microline ups 2 C-Lion Innova Tower 6K/10K  (blazer_usb)'), ('blazer_usb$C-Lion Innova Combo 10K/20K (3/1)', 'Microline ups 2 C-Lion Innova Combo 10K/20K (3/1)  (blazer_usb)'), ('solis$Solis 1.0', 'Microsol ups 4 Solis 1.0 1000VA (solis)'), ('solis$Solis 1.5', 'Microsol ups 4 Solis 1.5 1500VA (solis)'), ('solis$Solis 2.0', 'Microsol ups 4 Solis 2.0 2000VA (solis)'), ('solis$Solis 3.0', 'Microsol ups 4 Solis 3.0 3000VA (solis)'), ('rhino$Rhino 6.0', 'Microsol ups 5 Rhino 6.0 6000VA (rhino)'), ('rhino$Rhino 7.5', 'Microsol ups 5 Rhino 7.5 7500VA (rhino)'), ('rhino$Rhino 10.0', 'Microsol ups 5 Rhino 10.0 10000VA (rhino)'), ('rhino$Rhino 20.0', 'Microsol ups 5 Rhino 20.0 20000VA (rhino)'), ('usbhid-ups$openUPS Intelligent UPS', 'Minibox ups 5 openUPS Intelligent UPS USB port (usbhid-ups)'), ('blazer_ser$Powermust', 'Mustek ups 2 Powermust 400VA Plus (blazer_ser)'), ('blazer_ser$Powermust', 'Mustek ups 2 Powermust 600VA Plus (blazer_ser)'), ('blazer_ser$Powermust', 'Mustek ups 2 Powermust 800VA Pro (blazer_ser)'), ('blazer_ser$Powermust', 'Mustek ups 2 Powermust 1000VA Plus (blazer_ser)'), ('blazer_usb$Powermust', 'Mustek ups 2 Powermust 1000VA USB (blazer_usb)'), ('blazer_ser$Powermust', 'Mustek ups 2 Powermust 1400VA Plus (blazer_ser)'), ('blazer_ser$Powermust', 'Mustek ups 2 Powermust 2000VA USB (blazer_ser)'), ('blazer_usb$Powermust Office 650', 'Mustek ups 2 Powermust Office 650 USB (blazer_usb)'), ('blazer_usb$PowerMust 424 / 636 / 848', 'Mustek ups 2 PowerMust 424 / 636 / 848 USB (blazer_usb)'), ('blazer_usb$Yukai PowerMust', 'Mustek ups 2 Yukai PowerMust 1000 USB (PID: 5161) (blazer_usb)'), ('blazer_ser$Various', 'Mustek ups 2 Various  (blazer_ser)'), ('blazer_ser$400va / 600va', 'Neus ups 2 400va / 600va  (blazer_ser)'), ('gamatronic$Expert C Online 6000', 'NHS Sistemas de Energia ups 5 Expert C Online 6000  (gamatronic)'), ('gamatronic$Expert C Online 8000', 'NHS Sistemas de Energia ups 5 Expert C Online 8000  (gamatronic)'), ('gamatronic$Expert C Online 10000', 'NHS Sistemas de Energia ups 5 Expert C Online 10000  (gamatronic)'), ('gamatronic$Expert S Online 6000', 'NHS Sistemas de Energia ups 5 Expert S Online 6000  (gamatronic)'), ('gamatronic$Expert S Online 8000', 'NHS Sistemas de Energia ups 5 Expert S Online 8000  (gamatronic)'), ('gamatronic$Expert S Online 10000', 'NHS Sistemas de Energia ups 5 Expert S Online 10000  (gamatronic)'), ('gamatronic$Expert S Online 10000', 'NHS Sistemas de Energia ups 5 Expert S Online 10000  (gamatronic)'), ('genericups upstype=8$Elite 500', 'Nitram ups 1 Elite 500  (genericups upstype=8)'), ('genericups upstype=16$Elite 2002', 'Nitram ups 1 Elite 2002  (genericups upstype=16)'), ('powerpanel$Elite 2005', 'Nitram ups 1 Elite 2005  (powerpanel)'), ('blazer_usb protocol=megatec$NUPS-650', 'Novex ups 1 NUPS-650 USB (blazer_usb protocol=megatec)'), ('blazer_ser$3000 SW', 'Numeric ups 2 3000 SW  (blazer_ser)'), ('blazer_usb$Digital 800 plus', 'Numeric ups 2 Digital 800 plus USB (blazer_usb)'), ('oneac$ON400', 'Oneac ups 1 ON400 advanced interface (oneac)'), ('oneac$ON600', 'Oneac ups 1 ON600 advanced interface (oneac)'), ('oneac$ON900', 'Oneac ups 1 ON900 advanced interface (oneac)'), ('oneac$ON1300', 'Oneac ups 1 ON1300 advanced interface (oneac)'), ('oneac$EG Series', 'Oneac ups 1 EG Series advanced interface (oneac)'), ('oneac$ON700', 'Oneac ups 1 ON700 advanced interface (oneac)'), ('oneac$ON700XAU', 'Oneac ups 1 ON700XAU advanced interface (oneac)'), ('oneac$ON700XIU', 'Oneac ups 1 ON700XIU advanced interface (oneac)'), ('oneac$ON1000', 'Oneac ups 1 ON1000 advanced interface (oneac)'), ('oneac$ON1000XAU', 'Oneac ups 1 ON1000XAU advanced interface (oneac)'), ('oneac$ON1000XIU', 'Oneac ups 1 ON1000XIU advanced interface (oneac)'), ('oneac$ON1500', 'Oneac ups 1 ON1500 advanced interface (oneac)'), ('oneac$ON1500XAU', 'Oneac ups 1 ON1500XAU advanced interface (oneac)'), ('oneac$ON1500XIU', 'Oneac ups 1 ON1500XIU advanced interface (oneac)'), ('oneac$ON2000', 'Oneac ups 1 ON2000 advanced interface (oneac)'), ('oneac$ON2000XAU', 'Oneac ups 1 ON2000XAU advanced interface (oneac)'), ('oneac$ON2000XIU', 'Oneac ups 1 ON2000XIU advanced interface (oneac)'), ('genericups upstype=14$P-Series', 'Online ups 1 P-Series  (genericups upstype=14)'), ('blazer_usb$Zinto A', 'Online ups 2 Zinto A  (blazer_usb)'), ('optiups$Zinto D', 'Online ups 1 Zinto D  (optiups)'), ('blazer_usb$Yunto YQ450', 'Online ups 2 Yunto YQ450  (blazer_usb)'), ('blazer_ser$AQUA', 'OnLite ups 2 AQUA 50 (blazer_ser)'), ('optiups$PowerES', 'Opti-UPS ups 1 PowerES 420E (optiups)'), ('powercom$VS 575C', 'Opti-UPS ups 1 VS 575C type=OPTI (powercom)'), ('blazer_ser$various', 'Orvaldi Power Protection ups 2 various not 400 or 600 (blazer_ser)'), ('blazer_usb$750 / 900SP', 'Orvaldi Power Protection ups 2 750 / 900SP  (blazer_usb)'), ('blazer_ser$400VA / 600VA', 'Phasak ups 2 400VA / 600VA  (blazer_ser)'), ('blazer_usb$500VA', 'Plexus ups 2 500VA USB (blazer_usb)'), ('blazer_usb$1000VA Pro', 'Plexus ups 2 1000VA Pro USB (blazer_usb)'), ('nutdrv_atcl_usb$800 VA', 'Plexus ups 1 800 VA USB (nutdrv_atcl_usb)'), ('blazer_ser$SMK', 'Powercom ups 4 SMK  (blazer_ser)'), ('blazer_ser$SXL', 'Powercom ups 4 SXL  (blazer_ser)'), ('blazer_ser$ULT', 'Powercom ups 4 ULT  (blazer_ser)'), ('powercom$Trust 425/625', 'Powercom ups 4 Trust 425/625  (powercom)'), ('powercom$Advice Partner/King Pr750', 'Powercom ups 4 Advice Partner/King Pr750  (powercom)'), ('powercom$Black Knight PRO', 'Powercom ups 4 Black Knight PRO  (powercom)'), ('usbhid-ups$Black Knight PRO', 'Powercom ups 5 Black Knight PRO USB (2009 models, product id: 00a6) (usbhid-ups)'), ('powercom$Smart KING Pro (all Smart series)', 'Powercom ups 4 Smart KING Pro (all Smart series)  (powercom)'), ('usbhid-ups$Smart KING Pro (all Smart series)', 'Powercom ups 5 Smart KING Pro (all Smart series) USB (2009 models, product id: 00a3) (usbhid-ups)'), ('powercom$Imperial', 'Powercom ups 4 Imperial  (powercom)'), ('usbhid-ups$Imperial', 'Powercom ups 5 Imperial USB (2009 models, product id: 00a2) (usbhid-ups)'), ('blazer_ser$Vanguard', 'Powercom ups 4 Vanguard  (blazer_ser)'), ('usbhid-ups$Vanguard', 'Powercom ups 5 Vanguard USB (2009 models, product id: 0004 or 00a5) (usbhid-ups)'), ("powercom (requires 'usbserial' kernel module)$WOW", "Powercom ups 4 WOW USB (<= 2009 models, product id: 0002) (powercom (requires 'usbserial' kernel module))"), ('usbhid-ups$WOW', 'Powercom ups 5 WOW USB (2009 models, product id: 00a4) (usbhid-ups)'), ("powercom (requires 'usbserial' kernel module)$(various)", "Powercom ups 4 (various) USB (<= 2009 models, product id: 0002) (powercom (requires 'usbserial' kernel module))"), ('usbhid-ups$(various)', 'Powercom ups 5 (various) USB (2009 models, product id: 00a?) (usbhid-ups)'), ('usbhid-ups$BNT-xxxAP', 'Powercom ups 5 BNT-xxxAP USB (product id: 0004) (usbhid-ups)'), ('usbhid-ups$BNT-xxxAP', 'Powercom ups 1 BNT-xxxAP USB (product id: 0001) (usbhid-ups)'), ('blazer_usb$VI 1000 LED', 'POWEREX ups 2 VI 1000 LED  (blazer_usb)'), ('blazer_ser$PG-600', 'PowerGuard ups 2 PG-600  (blazer_ser)'), ('genericups upstype=17$9001', 'PowerKinetics ups 1 9001  (genericups upstype=17)'), ('blazer_ser$BlackOut Buster', 'PowerKinetics ups 2 BlackOut Buster  (blazer_ser)'), ('blazer_ser$RealSmart 800', 'PowerMan ups 2 RealSmart 800  (blazer_ser)'), ('blazer_ser$RealSmart 1000', 'PowerMan ups 2 RealSmart 1000  (blazer_ser)'), ('genericups upstype=4$BackPro', 'PowerMan ups 1 BackPro  (genericups upstype=4)'), ('blazer_usb$Defender 1200VA', 'PowerShield ups 2 Defender 1200VA  (blazer_usb)'), ('genericups upstype=3$Comp1000', 'PowerTech ups 1 Comp1000 DTR cable power (genericups upstype=3)'), ('blazer_ser$SMK-800', 'PowerTech ups 2 SMK-800  (blazer_ser)'), ('blazer_ser$Line-Interactive VI 1000', 'PowerWalker ups 2 Line-Interactive VI 1000  (blazer_ser)'), ('blazer_ser$Line-Interactive VI 400/800', 'PowerWalker ups 2 Line-Interactive VI 400/800  (blazer_ser)'), ('blazer_ser$Line-Interactive VI 600', 'PowerWalker ups 2 Line-Interactive VI 600  (blazer_ser)'), ('blazer_usb$Line-Interactive VI 600 SE', 'PowerWalker ups 2 Line-Interactive VI 600 SE  (blazer_usb)'), ('blazer_usb$Line-Interactive VI 800 SE', 'PowerWalker ups 2 Line-Interactive VI 800 SE  (blazer_usb)'), ('blazer_usb$Line-Interactive VI 1400', 'PowerWalker ups 2 Line-Interactive VI 1400  (blazer_usb)'), ('blazer_usb$Line-Interactive VI 2000', 'PowerWalker ups 2 Line-Interactive VI 2000  (blazer_usb)'), ('blazer_usb$Line-Interactive VI 850 LCD', 'PowerWalker ups 2 Line-Interactive VI 850 LCD  (blazer_usb)'), ('blazer_usb$Online VFI 1000RT/1500RT/2000RT/3000RT/6000RT/10000RT LCD', 'PowerWalker ups 2 Online VFI 1000RT/1500RT/2000RT/3000RT/6000RT/10000RT LCD  (blazer_usb)'), ('blazer_usb$Line-Interactive VI 1000RT/1500RT/2000RT/3000RT LCD', 'PowerWalker ups 2 Line-Interactive VI 1000RT/1500RT/2000RT/3000RT LCD  (blazer_usb)'), ('genericups upstype=7$3110', 'Powerware ups 4 3110  (genericups upstype=7)'), ('genericups upstype=11$3115', 'Powerware ups 4 3115  (genericups upstype=11)'), ('genericups upstype=15$5119, 5125', 'Powerware ups 4 5119, 5125  (genericups upstype=15)'), ('genericups upstype=20$5119 RM', 'Powerware ups 4 5119 RM  (genericups upstype=20)'), ('upscode2$5119 RM', 'Powerware ups 5 5119 RM  (upscode2)'), ('bcmxcp_usb$PW3105', 'Powerware ups 5 PW3105  (bcmxcp_usb)'), ('bcmxcp_usb$PW5110', 'Powerware ups 5 PW5110  (bcmxcp_usb)'), ('bcmxcp$PW5115', 'Powerware ups 5 PW5115 Serial port (bcmxcp)'), ('bcmxcp_usb$PW5115', 'Powerware ups 5 PW5115 USB port (bcmxcp_usb)'), ('bcmxcp$PW5125', 'Powerware ups 5 PW5125  (bcmxcp)'), ('bcmxcp$PW9120', 'Powerware ups 5 PW9120 Serial port (bcmxcp)'), ('bcmxcp_usb$PW9120', 'Powerware ups 5 PW9120 USB port (bcmxcp_usb)'), ('bcmxcp$PW9125', 'Powerware ups 5 PW9125  (bcmxcp)'), ('bcmxcp$PW9315', 'Powerware ups 5 PW9315 3-phase (bcmxcp)'), ('upscode2$9110', 'Powerware ups 5 9110  (upscode2)'), ('upscode2$9120', 'Powerware ups 5 9120  (upscode2)'), ('upscode2$9150', 'Powerware ups 5 9150  (upscode2)'), ('upscode2$9305', 'Powerware ups 5 9305  (upscode2)'), ('snmp-ups$BladeUPS (SNMP)', 'Powerware ups 5 BladeUPS (SNMP) ConnectUPS Web/SNMP Card (snmp-ups)'), ('snmp-ups$(various)', 'Powerware ups 5 (various) ConnectUPS Web/SNMP card (snmp-ups)'), ('safenet$PM525A/-625A/-800A/-1000A/-1250A', 'Powerwell ups 1 PM525A/-625A/-800A/-1000A/-1250A  (safenet)'), ('powerman-pdu$Rackable Systems', 'Phantom pdu 1 Rackable Systems 1 outlets (powerman-pdu)'), ('snmp-ups$Intelligent PDU - Dominion PX', 'Raritan pdu 3 Intelligent PDU - Dominion PX no report, but should be supported (snmp-ups)'), ('snmp-ups$Metered PDU - Raritan PM', 'Raritan pdu 3 Metered PDU - Raritan PM no report, but should be supported (snmp-ups)'), ('snmp-ups$Switched PDU - Raritan RPC', 'Raritan pdu 3 Switched PDU - Raritan RPC no report, but should be supported (snmp-ups)'), ('blazer_ser$Blazer 400VA / 600VA / 800VA', 'REDi ups 2 Blazer 400VA / 600VA / 800VA  (blazer_ser)'), ('safenet$RPF525/625/800/1000', 'Repotec ups 1 RPF525/625/800/1000  (safenet)'), ('genericups upstype=13$RPT-800A', 'Repotec ups 1 RPT-800A  (genericups upstype=13)'), ('genericups upstype=13$RPT-162A', 'Repotec ups 1 RPT-162A  (genericups upstype=13)'), ('snmp-ups$Riello Sentinel SDL 6000-7', 'Riello ups 3 Riello Sentinel SDL 6000-7 Netman Plus 102 SNMP Card (snmp-ups)'), ('snmp-ups$Riello Sentinel Dual SDH 1000-7', 'Riello ups 3 Riello Sentinel Dual SDH 1000-7 Netman Plus 102 SNMP Card (snmp-ups)'), ('riello_usb$IDG 400/600/800/1200/1600', 'Riello ups 5 IDG 400/600/800/1200/1600  (riello_usb)'), ('riello_usb$IPG 600/800', 'Riello ups 5 IPG 600/800  (riello_usb)'), ('riello_usb$WPG 400/600/800', 'Riello ups 5 WPG 400/600/800  (riello_usb)'), ('riello_usb$NPW 600/800/1000/1500/2000', 'Riello ups 5 NPW 600/800/1000/1500/2000  (riello_usb)'), ('riello_usb$NDG 800/1000/1500/2000', 'Riello ups 5 NDG 800/1000/1500/2000  (riello_usb)'), ('riello_usb$DVT 500/800/1100/1500/2000', 'Riello ups 5 DVT 500/800/1100/1500/2000  (riello_usb)'), ('riello_usb$DVR 500/800/1100', 'Riello ups 5 DVR 500/800/1100  (riello_usb)'), ('riello_usb$DVD 1500/2200/3000', 'Riello ups 5 DVD 1500/2200/3000  (riello_usb)'), ('riello_usb$VST 800/1100/1500/2000', 'Riello ups 5 VST 800/1100/1500/2000  (riello_usb)'), ('riello_usb$VSD 1100/1500/2200/3000', 'Riello ups 5 VSD 1100/1500/2200/3000  (riello_usb)'), ('riello_usb$SEP 700/1000/1500/2200/3000', 'Riello ups 5 SEP 700/1000/1500/2200/3000  (riello_usb)'), ('riello_usb$SDH 1000/1500/2200/3000', 'Riello ups 5 SDH 1000/1500/2200/3000  (riello_usb)'), ('riello_usb$SDL 3300/4000/5000/6000/6500/8000/10000', 'Riello ups 5 SDL 3300/4000/5000/6000/6500/8000/10000  (riello_usb)'), ('riello_usb$SPW', 'Riello ups 5 SPW  (riello_usb)'), ('riello_usb$SPT', 'Riello ups 5 SPT  (riello_usb)'), ('riello_ser$NDG 800/1000/1500/2000', 'Riello ups 5 NDG 800/1000/1500/2000  (riello_ser)'), ('riello_ser$DVT 500/800/1100/1500/2000', 'Riello ups 5 DVT 500/800/1100/1500/2000  (riello_ser)'), ('riello_ser$DVR 500/800/1100', 'Riello ups 5 DVR 500/800/1100  (riello_ser)'), ('riello_ser$DVD 1500/2200/3000', 'Riello ups 5 DVD 1500/2200/3000  (riello_ser)'), ('riello_ser$VST 800/1100/1500/2000', 'Riello ups 5 VST 800/1100/1500/2000  (riello_ser)'), ('riello_ser$VSD 1100/1500/2200/3000', 'Riello ups 5 VSD 1100/1500/2200/3000  (riello_ser)'), ('riello_ser$SEP 700/1000/1500/2200/3000', 'Riello ups 5 SEP 700/1000/1500/2200/3000  (riello_ser)'), ('riello_ser$SDH 1000/1500/2200/3000', 'Riello ups 5 SDH 1000/1500/2200/3000  (riello_ser)'), ('riello_ser$SDL 3300/4000/5000/6000/6500/8000/10000', 'Riello ups 5 SDL 3300/4000/5000/6000/6500/8000/10000  (riello_ser)'), ('riello_ser$SPW', 'Riello ups 5 SPW  (riello_ser)'), ('riello_ser$SPT', 'Riello ups 5 SPT  (riello_ser)'), ('riello_ser$MCT', 'Riello ups 5 MCT  (riello_ser)'), ('riello_ser$MST', 'Riello ups 5 MST  (riello_ser)'), ('riello_ser$MCM', 'Riello ups 5 MCM  (riello_ser)'), ('riello_ser$MCT', 'Riello ups 5 MCT  (riello_ser)'), ('riello_ser$MHT', 'Riello ups 5 MHT  (riello_ser)'), ('riello_ser$MPT', 'Riello ups 5 MPT  (riello_ser)'), ('riello_ser$MPM', 'Riello ups 5 MPM  (riello_ser)'), ('snmp-ups$(various)', 'Riello ups 3 (various) Netman Plus 101 SNMP Box (snmp-ups)'), ('snmp-ups$(various)', 'Riello ups 3 (various) Netman Plus 102 SNMP Card (snmp-ups)'), ('snmp-ups$(various)', 'Riello ups 3 (various) Netman Plus 202 SNMP Card (snmp-ups)'), ('usbhid-ups$RF-1000VA / RF-1025VA', 'Rocketfish ups 2 RF-1000VA / RF-1025VA  (usbhid-ups)'), ('blazer_ser$Rucelf UPOII-3000-96-EL', 'Rucelf ups 2 Rucelf UPOII-3000-96-EL  (blazer_ser)'), ('powerman-pdu$2412S Power Line Modem', 'SmartLabs pdu 1 2412S Power Line Modem for X10/Insteon (powerman-pdu)'), ('blazer_ser$Manager III', 'SMS (Brazil) ups 2 Manager III  (blazer_ser)'), ('genericups upstype=7$305', 'SOLA ups 1 305 cable INT-0025C (genericups upstype=7)'), ('blazer_ser or bestups$325', 'SOLA ups 1 325  (blazer_ser or bestups)'), ('blazer_ser or bestups$520', 'SOLA ups 1 520  (blazer_ser or bestups)'), ('blazer_ser or bestups$610', 'SOLA ups 1 610 use ID= in ups.conf (blazer_ser or bestups)'), ('blazer_ser or bestups$620', 'SOLA ups 1 620  (blazer_ser or bestups)'), ('blazer_ser$330', 'SOLA ups 4 330  (blazer_ser)'), ('isbmex$various', 'SOLA/BASIC Mexico ups 1 various ISBMEX protocol (isbmex)'), ('blazer_ser$NeTYS-PE 600VA', 'Socomec Sicon ups 2 NeTYS-PE 600VA  (blazer_ser)'), ('powercom$Egys', 'Socomec Sicon ups 1 Egys 420 VA (powercom)'), ('snmp-ups$MASTERYS 3/3 SYSTEM 60 kVA', 'Socomec Sicon ups 3 MASTERYS 3/3 SYSTEM 60 kVA Net Vision v5.05 SNMP card (snmp-ups)'), ('snmp-ups$NETYS RT 1/1', 'Socomec Sicon ups 3 NETYS RT 1/1 Net Vision SNMP card (snmp-ups)'), ('snmp-ups$Netvision', 'Socomec Sicon ups 3 Netvision UPS equipped with Netvision WEB/SNMP card/external box (snmp-ups)'), ('safenet$Winmate 525/625/800/1000', 'Soltec ups 1 Winmate 525/625/800/1000  (safenet)'), ('blazer_ser$Sekury C 500', 'Soyntec ups 2 Sekury C 500  (blazer_ser)'), ('blazer_ser$Sekury C 800', 'Soyntec ups 2 Sekury C 800  (blazer_ser)'), ('blazer_ser$QP1000', 'SquareOne Power ups 2 QP1000  (blazer_ser)'), ('richcomm_usb$PCF-800VA', 'StarPower ups 1 PCF-800VA USB (richcomm_usb)'), ('powerman-pdu$ILOM Management Module', 'Sun pdu 1 ILOM Management Module 1 outlet (powerman-pdu)'), ('blazer_ser$HP360, Hope-550', 'SuperPower ups 2 HP360, Hope-550  (blazer_ser)'), ('blazer_usb (USB ID ffff:0000)$Power Pro+ series', 'SVEN ups 2 Power Pro+ series USB (blazer_usb (USB ID ffff:0000))'), ('blazer_usb (USB ID 05b8:0000)$Power Pro+ series', 'SVEN ups 2 Power Pro+ series USB (blazer_usb (USB ID 05b8:0000))'), ('richcomm_usb (USB ID 0925:1234)$Power Pro+ series', 'SVEN ups 1 Power Pro+ series USB (richcomm_usb (USB ID 0925:1234))'), ('blazer_usb (USB ID 05b8:0000)$Power Smart RM 2000', 'SVEN ups 2 Power Smart RM 2000 USB (blazer_usb (USB ID 05b8:0000))'), ('safenet$500/1000', 'Sweex ups 1 500/1000 smart - shipped with SafeNet (safenet)'), ('genericups upstype=7$500/1000', 'Sweex ups 1 500/1000  (genericups upstype=7)'), ('richcomm_usb$1000', 'Sweex ups 1 1000 USB (richcomm_usb)'), ('blazer_ser$(various)', 'Sweex ups 2 (various)  (blazer_ser)'), ('blazer_usb$Era 500VA', 'Syndome ups 2 Era 500VA USB (blazer_usb)'), ('blazer_ser$UPGUARDS Pro650', 'Sysgration ups 2 UPGUARDS Pro650  (blazer_ser)'), ('blazer_ser$Easy Power 1200', 'Tecnoware ups 2 Easy Power 1200  (blazer_ser)'), ('blazer_usb langid_fix=0x409$UPS ERA LCD 0.65', 'Tecnoware ups 2 UPS ERA LCD 0.65  (blazer_usb langid_fix=0x409)'), ('genericups upstype=5$(various)', 'Tripp Lite ups 1 (various) Lan 2.2 interface - black 73-0844 cable (genericups upstype=5)'), ('usbhid-ups$1500 LCD', 'Tripp Lite ups 2 1500 LCD USB (usbhid-ups)'), ('usbhid-ups$AVR550U', 'Tripp Lite ups 3 AVR550U USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$AVR700U', 'Tripp Lite ups 3 AVR700U USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$AVR750U', 'Tripp Lite ups 3 AVR750U USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$AVR900U', 'Tripp Lite ups 3 AVR900U USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$AVR900UTAA', 'Tripp Lite ups 3 AVR900UTAA USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$AVRX550U', 'Tripp Lite ups 3 AVRX550U USB (protocol 2009) (usbhid-ups)'), ('usbhid-ups$AVRX550UD', 'Tripp Lite ups 3 AVRX550UD USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$AVRX750U', 'Tripp Lite ups 3 AVRX750U USB (protocol 2009) (usbhid-ups)'), ('usbhid-ups$AVRX750UD', 'Tripp Lite ups 3 AVRX750UD USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$AVRX750UF', 'Tripp Lite ups 3 AVRX750UF USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$BC600SINE', 'Tripp Lite ups 3 BC600SINE USB (protocol 2011) (usbhid-ups)'), ('usbhid-ups$BCPERS450', 'Tripp Lite ups 3 BCPERS450 USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$BCPRO600', 'Tripp Lite ups 3 BCPRO600 USB (protocol 2012) (usbhid-ups)'), ('usbhid-ups$ECO350UPS', 'Tripp Lite ups 3 ECO350UPS USB (protocol 2012) (usbhid-ups)'), ('usbhid-ups$ECO550UPS', 'Tripp Lite ups 3 ECO550UPS USB (protocol 2012) (usbhid-ups)'), ('usbhid-ups$ECO650LCD', 'Tripp Lite ups 3 ECO650LCD USB (protocol 2011) (usbhid-ups)'), ('usbhid-ups$ECO750UPS', 'Tripp Lite ups 3 ECO750UPS USB (protocol 2012) (usbhid-ups)'), ('usbhid-ups$ECO850LCD', 'Tripp Lite ups 3 ECO850LCD USB (protocol 2011) (usbhid-ups)'), ('usbhid-ups$HT850UPS', 'Tripp Lite ups 3 HT850UPS USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$HTR05-1U', 'Tripp Lite ups 3 HTR05-1U USB (protocol 3005) (usbhid-ups)'), ('usbhid-ups$HTR10-2U', 'Tripp Lite ups 3 HTR10-2U USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$INTERNET350U', 'Tripp Lite ups 3 INTERNET350U USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$INTERNET550U', 'Tripp Lite ups 3 INTERNET550U USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$INTERNET600U', 'Tripp Lite ups 3 INTERNET600U USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$INTERNET750U', 'Tripp Lite ups 3 INTERNET750U USB (protocol 1007) (usbhid-ups)'), ('usbhid-ups$INTERNET900U', 'Tripp Lite ups 3 INTERNET900U USB (protocol 1007) (usbhid-ups)'), ('usbhid-ups$INTERNETOFFICE500', 'Tripp Lite ups 3 INTERNETOFFICE500 USB (protocol 2010) (usbhid-ups)'), ('tripplite_usb$INTERNETOFFICE700', 'Tripp Lite ups 1 INTERNETOFFICE700 USB (older; product ID: 0001) (tripplite_usb)'), ('usbhid-ups$INTERNETOFFICE700', 'Tripp Lite ups 3 INTERNETOFFICE700 USB (protocol 2012) (usbhid-ups)'), ('usbhid-ups$OMNI650LCD', 'Tripp Lite ups 3 OMNI650LCD USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$OMNI900LCD', 'Tripp Lite ups 3 OMNI900LCD USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$OMNI1000LCD', 'Tripp Lite ups 2 OMNI1000LCD USB (usbhid-ups)'), ('usbhid-ups$OMNISMART300PNP', 'Tripp Lite ups 3 OMNISMART300PNP USB (protocol 2010) (usbhid-ups)'), ('tripplite_usb$OMNISMART500', 'Tripp Lite ups 1 OMNISMART500 USB (older; product ID: 0001) (tripplite_usb)'), ('usbhid-ups$OMNISMART500', 'Tripp Lite ups 3 OMNISMART500 USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$OMNISMART700', 'Tripp Lite ups 3 OMNISMART700 USB (protocol 2012) (usbhid-ups)'), ('tripplite_usb$OMNIVSINT800', 'Tripp Lite ups 2 OMNIVSINT800 USB (older; product ID: 0001) (tripplite_usb)'), ('usbhid-ups$OMNIVS800', 'Tripp Lite ups 3 OMNIVS800 USB (protocol 2012) (usbhid-ups)'), ('tripplite_usb$OMNIVS1000', 'Tripp Lite ups 2 OMNIVS1000 USB (older; product ID: 0001) (tripplite_usb)'), ('usbhid-ups$OMNIVS1000', 'Tripp Lite ups 3 OMNIVS1000 USB (protocol 2012) (usbhid-ups)'), ('tripplite_usb$OMNIVS1500XL', 'Tripp Lite ups 1 OMNIVS1500XL USB (tripplite_usb)'), ('usbhid-ups$POS500', 'Tripp Lite ups 3 POS500 USB (protocol 2007) (usbhid-ups)'), ('usbhid-ups$SM2200RMDVTAA', 'Tripp Lite ups 3 SM2200RMDVTAA USB (protocol 3014) (usbhid-ups)'), ('tripplite$SmartUPS', 'Tripp Lite ups 1 SmartUPS  (tripplite)'), ('tripplitesu$SmartOnline', 'Tripp Lite ups 1 SmartOnline  (tripplitesu)'), ('tripplite_usb$SMART550USB', 'Tripp Lite ups 1 SMART550USB USB (older; product ID: 0001) (tripplite_usb)'), ('usbhid-ups$SMART550USB', 'Tripp Lite ups 3 SMART550USB USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$SMART550USBWD', 'Tripp Lite ups 3 SMART550USBWD USB (protocol 2010) (usbhid-ups)'), ('tripplite_usb$SMART700USB', 'Tripp Lite ups 1 SMART700USB USB (tripplite_usb)'), ('usbhid-ups$SMART750RMXL2U', 'Tripp Lite ups 3 SMART750RMXL2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART750SLT', 'Tripp Lite ups 3 SMART750SLT USB (protocol 3014) (usbhid-ups)'), ('usbhid-ups$SMART750USB', 'Tripp Lite ups 3 SMART750USB USB (protocol 2012) (usbhid-ups)'), ('usbhid-ups$SMART750XLA', 'Tripp Lite ups 3 SMART750XLA USB (protocol 3014) (usbhid-ups)'), ('usbhid-ups$SMART1000LCD', 'Tripp Lite ups 3 SMART1000LCD USB (protocol 2010) (usbhid-ups)'), ('usbhid-ups$SMART1000RM2U', 'Tripp Lite ups 3 SMART1000RM2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART1000RMXL2U', 'Tripp Lite ups 3 SMART1000RMXL2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART1050SLT', 'Tripp Lite ups 3 SMART1050SLT USB (protocol 3012) (usbhid-ups)'), ('usbhid-ups$SMART1050SLTAA', 'Tripp Lite ups 3 SMART1050SLTAA USB (protocol 3012) (usbhid-ups)'), ('usbhid-ups$SMART1200LCD', 'Tripp Lite ups 3 SMART1200LCD USB (protocol 2009) (usbhid-ups)'), ('tripplite_usb$SMART1500RM2U', 'Tripp Lite ups 1 SMART1500RM2U USB (older; product ID: 0001) (tripplite_usb)'), ('usbhid-ups$SMART1500CRMXL', 'Tripp Lite ups 3 SMART1500CRMXL USB (protocol 3014) (usbhid-ups)'), ('usbhid-ups$SMART1500LCD', 'Tripp Lite ups 3 SMART1500LCD USB (protocol 2009) (usbhid-ups)'), ('usbhid-ups$SMART1500LCDXL', 'Tripp Lite ups 3 SMART1500LCDXL USB (protocol 2012) (usbhid-ups)'), ('usbhid-ups$SMART1500RM2U', 'Tripp Lite ups 3 SMART1500RM2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART1500RM2UN', 'Tripp Lite ups 3 SMART1500RM2UN USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART1500RMXL2UA', 'Tripp Lite ups 3 SMART1500RMXL2UA USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART1500RMXLN', 'Tripp Lite ups 3 SMART1500RMXLN USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART1500SLT', 'Tripp Lite ups 3 SMART1500SLT USB (protocol 3012) (usbhid-ups)'), ('usbhid-ups$SMART2200CRMXL', 'Tripp Lite ups 3 SMART2200CRMXL USB (protocol 3014) (usbhid-ups)'), ('usbhid-ups$SMART2200RM2U', 'Tripp Lite ups 3 SMART2200RM2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART2200RM2UN', 'Tripp Lite ups 3 SMART2200RM2UN USB (protocol 3015) (usbhid-ups)'), ('tripplite_usb$SMART2200RMXL2U', 'Tripp Lite ups 1 SMART2200RMXL2U USB (older; product ID: 0001) (tripplite_usb)'), ('usbhid-ups$SMART2200RMXL2U', 'Tripp Lite ups 3 SMART2200RMXL2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART2200RMXL2UP', 'Tripp Lite ups 3 SMART2200RMXL2UP USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART2200RMXLN', 'Tripp Lite ups 3 SMART2200RMXLN USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART2200SLT', 'Tripp Lite ups 3 SMART2200SLT USB (protocol 3013) (usbhid-ups)'), ('usbhid-ups$SMART2200SLTAA', 'Tripp Lite ups 3 SMART2200SLTAA USB (protocol 3013) (usbhid-ups)'), ('usbhid-ups$SMART2500XLHG', 'Tripp Lite ups 3 SMART2500XLHG USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART2600RM2U', 'Tripp Lite ups 3 SMART2600RM2U USB (protocol 3014) (usbhid-ups)'), ('usbhid-ups$SMART3000CRMXL', 'Tripp Lite ups 3 SMART3000CRMXL USB (protocol 3014) (usbhid-ups)'), ('usbhid-ups$SMART3000RM2U', 'Tripp Lite ups 3 SMART3000RM2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART3000RM2UN', 'Tripp Lite ups 3 SMART3000RM2UN USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART3000RMOD2U', 'Tripp Lite ups 3 SMART3000RMOD2U USB (protocol 3014) (usbhid-ups)'), ('usbhid-ups$SMART3000RMXL2U', 'Tripp Lite ups 3 SMART3000RMXL2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART3000RMXLN', 'Tripp Lite ups 3 SMART3000RMXLN USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMART3000SLT', 'Tripp Lite ups 3 SMART3000SLT USB (protocol 3013) (usbhid-ups)'), ('tripplite_usb$SMART500RT1U', 'Tripp Lite ups 2 SMART500RT1U USB (older; product ID 0001, protocol 3005) (tripplite_usb)'), ('usbhid-ups$SMART500RT1U', 'Tripp Lite ups 3 SMART500RT1U USB (newer; protocol/product ID 3005) (usbhid-ups)'), ('usbhid-ups$SMX1000LCD', 'Tripp Lite ups 3 SMX1000LCD USB (protocol 2005) (usbhid-ups)'), ('usbhid-ups$SMX1000RT2U', 'Tripp Lite ups 3 SMX1000RT2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMX1050SLT', 'Tripp Lite ups 3 SMX1050SLT USB (protocol 3012) (usbhid-ups)'), ('usbhid-ups$SMX1500LCD', 'Tripp Lite ups 3 SMX1500LCD USB (protocol 2009) (usbhid-ups)'), ('usbhid-ups$SMX1500SLT', 'Tripp Lite ups 3 SMX1500SLT USB (protocol 3012) (usbhid-ups)'), ('usbhid-ups$SMX1500XLRT2U', 'Tripp Lite ups 3 SMX1500XLRT2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMX2200XLRT2U', 'Tripp Lite ups 3 SMX2200XLRT2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMX3000RT2UTAA', 'Tripp Lite ups 3 SMX3000RT2UTAA USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMX3000XLRT2U', 'Tripp Lite ups 3 SMX3000XLRT2U USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMX3000XLRT2UA', 'Tripp Lite ups 3 SMX3000XLRT2UA USB (protocol 3015) (usbhid-ups)'), ('usbhid-ups$SMX500RT1U', 'Tripp Lite ups 3 SMX500RT1U USB (protocol 3005) (usbhid-ups)'), ('usbhid-ups$SMX750SLT', 'Tripp Lite ups 3 SMX750SLT USB (protocol 3014) (usbhid-ups)'), ('usbhid-ups$SU750RTXL2U', 'Tripp Lite ups 3 SU750RTXL2U USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU750RTXLCD2U', 'Tripp Lite ups 3 SU750RTXLCD2U USB (protocol 4004) (usbhid-ups)'), ('usbhid-ups$SU750XL', 'Tripp Lite ups 3 SU750XL USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU1000RTXL2UA', 'Tripp Lite ups 3 SU1000RTXL2UA USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU1000RTXLCD2U', 'Tripp Lite ups 3 SU1000RTXLCD2U USB (protocol 4004) (usbhid-ups)'), ('usbhid-ups$SU1000XLA', 'Tripp Lite ups 3 SU1000XLA USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU1000XLCD', 'Tripp Lite ups 3 SU1000XLCD USB (protocol 4004) (usbhid-ups)'), ('usbhid-ups$SU1500RTXL2UA (SmartOnline)', 'Tripp Lite ups 3 SU1500RTXL2UA (SmartOnline) USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU1500RTXLCD2U', 'Tripp Lite ups 3 SU1500RTXLCD2U USB (protocol 4004) (usbhid-ups)'), ('usbhid-ups$SU1500XL', 'Tripp Lite ups 3 SU1500XL USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU1500XLCD', 'Tripp Lite ups 3 SU1500XLCD USB (protocol 4004) (usbhid-ups)'), ('usbhid-ups$SU2200RTXL2UA', 'Tripp Lite ups 3 SU2200RTXL2UA USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU2200RTXLCD2U', 'Tripp Lite ups 3 SU2200RTXLCD2U USB (protocol 4004) (usbhid-ups)'), ('usbhid-ups$SU2200XLA', 'Tripp Lite ups 3 SU2200XLA USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU2200XLCD', 'Tripp Lite ups 3 SU2200XLCD USB (protocol 4004) (usbhid-ups)'), ('usbhid-ups$SU3000RTXL2U', 'Tripp Lite ups 3 SU3000RTXL2U USB (protocol 4005) (usbhid-ups)'), ('usbhid-ups$SU3000RTXL3U', 'Tripp Lite ups 3 SU3000RTXL3U USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU3000RTXLCD3U', 'Tripp Lite ups 3 SU3000RTXLCD3U USB (protocol 4004) (usbhid-ups)'), ('usbhid-ups$SU3000RTXR3U', 'Tripp Lite ups 3 SU3000RTXR3U USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU3000RTXR3UHW', 'Tripp Lite ups 3 SU3000RTXR3UHW USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU3000XL', 'Tripp Lite ups 3 SU3000XL USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SU3000XLCD', 'Tripp Lite ups 3 SU3000XLCD USB (protocol 4004) (usbhid-ups)'), ('usbhid-ups$SUINT1000RTXL2UA', 'Tripp Lite ups 3 SUINT1000RTXL2UA USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SUINT1500RTXL2UA', 'Tripp Lite ups 3 SUINT1500RTXL2UA USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SUINT2200RTXL2UA', 'Tripp Lite ups 3 SUINT2200RTXL2UA USB (protocol 4001) (usbhid-ups)'), ('usbhid-ups$SUINT3000RTXL2U', 'Tripp Lite ups 3 SUINT3000RTXL2U USB (protocol 4005) (usbhid-ups)'), ('blazer_ser$UPS 1000 Management PW-4105', 'Trust ups 2 UPS 1000 Management PW-4105  (blazer_ser)'), ('blazer_ser$UPS 1200VA Management PW-4120M', 'Trust ups 2 UPS 1200VA Management PW-4120M  (blazer_ser)'), ('blazer_ser$UPS 1300VA Management PW-4130M', 'Trust ups 2 UPS 1300VA Management PW-4130M  (blazer_ser)'), ('blazer_ser$ALPHA 500 IC', 'UNITEK ups 2 ALPHA 500 IC  (blazer_ser)'), ('blazer_ser$Alpha 1000is', 'UNITEK ups 2 Alpha 1000is  (blazer_ser)'), ('blazer_ser$Alpha 500', 'UNITEK ups 2 Alpha 500  (blazer_ser)'), ('blazer_ser$Alpha 500 ipE', 'UNITEK ups 2 Alpha 500 ipE  (blazer_ser)'), ('blazer_usb$Alpha650ipF', 'UNITEK ups 2 Alpha650ipF USB (blazer_usb)'), ('blazer_usb$Alpha650ipE', 'UNITEK ups 2 Alpha650ipE USB (blazer_usb)'), ('blazer_ser$Alpha 2600', 'UNITEK ups 2 Alpha 2600  (blazer_ser)'), ('blazer_usb$Alpha 1200Sx', 'UNITEK ups 2 Alpha 1200Sx USB (blazer_usb)'), ('blazer_usb$Alpha 1250xD', 'UNITEK ups 2 Alpha 1250xD USB (blazer_usb)'), ('blazer_ser$CXR1000', 'UPSonic ups 2 CXR1000  (blazer_ser)'), ('genericups upstype=0$LAN Saver 600', 'UPSonic ups 1 LAN Saver 600  (genericups upstype=0)'), ('genericups upstype=7$Power Guardian', 'UPSonic ups 1 Power Guardian  (genericups upstype=7)'), ('blazer_usb$PrOffice 650', 'UPSonic ups 2 PrOffice 650 USB (blazer_usb)'), ('blazer_usb$DS-800', 'UPSonic ups 2 DS-800 USB (blazer_usb)'), ('gamatronic$(various)', 'Various ups 4 (various) SEC protocol (gamatronic)'), ('genericups upstype=4$(various)', 'Various ups 1 (various) Generic RUPS model (genericups upstype=4)'), ('genericups upstype=21$(various)', 'Various ups 1 (various) Generic RUPS 2000 (Megatec M2501 cable) (genericups upstype=21)'), ('blazer_ser$(various serial)', 'Various ups 2 (various serial) Q1 / Megatec protocol (blazer_ser)'), ('blazer_usb$(various USB)', 'Various ups 2 (various USB) Q1 / Megatec protocol (blazer_usb)'), ('blazer_ser or bestups$(various)', 'Various ups 2 (various) PhoenixTec protocol (blazer_ser or bestups)'), ('snmp-ups$(various)', 'Various ups 3 (various) SNMP - RFC 1628 (snmp-ups)'), ('safenet$(various)', 'Various ups 1 (various) Safenet software (safenet)'), ('blazer_usb langid_fix=0x409$(Various USB)', 'Various ups 2 (Various USB) UPSilon 2000 software (blazer_usb langid_fix=0x409)'), ('nutdrv_qx$(Various serial)', 'Various ups 2 (Various serial) ViewPower software (nutdrv_qx)'), ('nutdrv_qx$(Various USB)', 'Various ups 2 (Various USB) ViewPower software (nutdrv_qx)'), ('blazer_ser$(Various serial)', 'Various ups 2 (Various serial) WinPower software (blazer_ser)'), ('blazer_usb$(Various USB)', 'Various ups 2 (Various USB) WinPower software (blazer_usb)'), ('blazer_ser or blazer_usb$Various Innova T', 'Various ups 2 Various Innova T (USB ID 06da:0201) (blazer_ser or blazer_usb)'), ('blazer_ser or blazer_usb$Various Innova RT', 'Various ups 2 Various Innova RT (USB ID 06da:0005) (blazer_ser or blazer_usb)'), ('blazer_ser or blazer_usb$Various Innova 3/1 T', 'Various ups 2 Various Innova 3/1 T (USB ID 06da:0004) (blazer_ser or blazer_usb)'), ('victronups$(various)', 'Victron/IMV ups 1 (various)  (victronups)'), ('genericups upstype=10$Lite', 'Victron/IMV ups 1 Lite crack cable (genericups upstype=10)'), ('optiups$PowerES', 'Viewsonic ups 1 PowerES 420E (optiups)'), ('richcomm_usb$EA200 LED', 'Vivaldi ups 1 EA200 LED USB (richcomm_usb)'), ('nutdrv_qx$Apex 1KVA', 'Voltronic Power ups 2 Apex 1KVA Serial (nutdrv_qx)'), ('nutdrv_qx$Apex 1KVA', 'Voltronic Power ups 2 Apex 1KVA USB (nutdrv_qx)'), ('nutdrv_qx$Frigate TX 1KVA', 'Voltronic Power ups 2 Frigate TX 1KVA Serial (nutdrv_qx)'), ('nutdrv_qx$Frigate TX 1KVA', 'Voltronic Power ups 2 Frigate TX 1KVA USB (nutdrv_qx)'), ('nutdrv_qx$Galleon 1KVA', 'Voltronic Power ups 2 Galleon 1KVA Serial (nutdrv_qx)'), ('nutdrv_qx$Galleon 1KVA', 'Voltronic Power ups 2 Galleon 1KVA USB (nutdrv_qx)'), ('nutdrv_qx$Imperial 1KVA', 'Voltronic Power ups 2 Imperial 1KVA Serial (nutdrv_qx)'), ('nutdrv_qx$Imperial 1KVA', 'Voltronic Power ups 2 Imperial 1KVA USB (nutdrv_qx)'), ('nutdrv_qx$Prosine 800', 'Voltronic Power ups 2 Prosine 800 Serial (nutdrv_qx)'), ('nutdrv_qx$Prosine 800', 'Voltronic Power ups 2 Prosine 800 USB (nutdrv_qx)'), ('nutdrv_qx$Vesta LED 850VA', 'Voltronic Power ups 2 Vesta LED 850VA USB (nutdrv_qx)'), ('nutdrv_qx$(various)', 'Voltronic Power ups 2 (various) Serial (nutdrv_qx)'), ('nutdrv_qx$(various)', 'Voltronic Power ups 2 (various) USB (nutdrv_qx)'), ('blazer_ser$CPM-800', 'WinPower ups 2 CPM-800  (blazer_ser)'), ('powerman-pdu$RPS-10', 'WTI pdu 1 RPS-10 10 outlets (powerman-pdu)'), ('powerman-pdu$NPS', 'WTI pdu 1 NPS 8 outlets (powerman-pdu)')], help_text='The driver used to communicate with your UPS.', max_length=120, verbose_name='Driver')),
                ('ups_port', models.CharField(blank=True, help_text='The serial or USB port where your UPS is connected.', max_length=120, verbose_name='Port')),
                ('ups_options', models.TextField(blank=True, help_text='Additional parameters to the hardware-specific part of the driver.', verbose_name='Auxiliary parameters (ups.conf)')),
                ('ups_optionsupsd', models.TextField(blank=True, help_text='Additional parameters to the hardware-specific part of the driver.', verbose_name='Auxiliary parameters (upsd.conf)')),
                ('ups_description', models.CharField(blank=True, max_length=120, verbose_name='Description')),
                ('ups_shutdown', models.CharField(choices=[(b'lowbatt', 'UPS reaches low battery'), (b'batt', 'UPS goes on battery')], default=b'batt', max_length=120, verbose_name='Shutdown mode')),
                ('ups_shutdowntimer', models.IntegerField(default=30, help_text='The time in seconds until shutdown is initiated. If the UPS happens to come back before the time is up the shutdown is canceled.', verbose_name='Shutdown timer')),
                ('ups_shutdowncmd', models.CharField(default=b'/sbin/shutdown -p now', help_text='The command used to shutdown the server. You can use a custom command here to perform other tasks before shutdown.default: /sbin/shutdown -p now', max_length=255, verbose_name='Shutdown Command')),
                ('ups_monuser', models.CharField(default=b'upsmon', max_length=50, verbose_name='Monitor User')),
                ('ups_monpwd', models.CharField(default=b'fixmepass', max_length=30, verbose_name='Monitor Password')),
                ('ups_extrausers', models.TextField(blank=True, verbose_name='Extra users (upsd.users)')),
                ('ups_rmonitor', models.BooleanField(default=False, verbose_name='Remote Monitor')),
                ('ups_emailnotify', models.BooleanField(default=False, verbose_name='Send Email Status Updates')),
                ('ups_toemail', models.CharField(blank=True, help_text='Destination email address. Separate email addresses by semi-colon.', max_length=120, verbose_name='To email')),
                ('ups_subject', models.CharField(default=b'UPS report generated by %h', help_text='The subject of the email. You can use the following parameters for substitution:<br /><ul><li>%d - Date</li><li>%h - Hostname</li></ul>', max_length=120, verbose_name='Email Subject')),
                ('ups_powerdown', models.BooleanField(default=True, help_text='Signal the UPS to power off after FreeNAS shuts down.', verbose_name='Power Off UPS')),
            ],
            options={
                'verbose_name': 'UPS',
                'verbose_name_plural': 'UPS',
            },
        ),
        migrations.CreateModel(
            name='WebDAV',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('webdav_protocol', models.CharField(choices=[(b'http', 'HTTP'), (b'https', 'HTTPS'), (b'httphttps', 'HTTP+HTTPS')], default=b'http', max_length=120, verbose_name='Protocol')),
                ('webdav_tcpport', models.PositiveIntegerField(default=8080, help_text='The port on which WebDAV will run.<br>Do not use a port that is already in use by another service (e.g. 22 for SSH).', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='HTTP Port')),
                ('webdav_tcpportssl', models.PositiveIntegerField(default=8081, help_text='The port on which Secure WebDAV will run.<br>Do not use a port that is already in use by another service (e.g. 22 for SSH).', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='HTTPS Port')),
                ('webdav_password', models.CharField(default=b'davtest', help_text='The Default Password is: davtest', max_length=120, verbose_name='Webdav Password')),
                ('webdav_htauth', models.CharField(choices=[(b'basic', 'Basic Authentication'), (b'digest', 'Digest Authentication')], default=b'digest', help_text='Type of HTTP Authentication for WebDAV<br>Basic Auth: Password is sent over the network as plaintext (Avoid if HTTPS is disabled) <br>Digest Auth: The hash of the password is sent over the network (more secure).', max_length=120, verbose_name='HTTP Authentication')),
                ('webdav_certssl', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='system.Certificate', verbose_name='Webdav SSL Certificate')),
            ],
            options={
                'verbose_name': 'WebDAV',
                'verbose_name_plural': 'WebDAV',
            },
        ),
        migrations.AddField(
            model_name='iscsitargetgroups',
            name='iscsi_target_portalgroup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.iSCSITargetPortal', verbose_name='Portal Group ID'),
        ),
        migrations.AddField(
            model_name='fibrechanneltotarget',
            name='fc_target',
            field=models.ForeignKey(help_text='Target this extent belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='services.iSCSITarget', verbose_name='Target'),
        ),
        migrations.AlterUniqueTogether(
            name='iscsitargettoextent',
            unique_together=set([('iscsi_target', 'iscsi_extent')]),
        ),
        migrations.AlterUniqueTogether(
            name='iscsitargetportalip',
            unique_together=set([('iscsi_target_portalip_ip', 'iscsi_target_portalip_port')]),
        ),
        migrations.AlterUniqueTogether(
            name='iscsitargetgroups',
            unique_together=set([('iscsi_target', 'iscsi_target_portalgroup')]),
        ),
        migrations.RunPython(create_services),
    ]
